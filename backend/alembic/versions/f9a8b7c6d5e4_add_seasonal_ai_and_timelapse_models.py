"""add_seasonal_ai_and_timelapse_models

Revision ID: f9a8b7c6d5e4
Revises: 88316ca546cb
Create Date: 2025-01-17 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f9a8b7c6d5e4'
down_revision = '88316ca546cb'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create seasonal_predictions table
    op.create_table('seasonal_predictions',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('plant_id', sa.UUID(), nullable=False),
        sa.Column('prediction_date', sa.DateTime(), nullable=False),
        sa.Column('prediction_period_start', sa.Date(), nullable=False),
        sa.Column('prediction_period_end', sa.Date(), nullable=False),
        sa.Column('growth_forecast', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('care_adjustments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('risk_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('optimal_activities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('confidence_score', sa.Float(), nullable=False),
        sa.Column('model_version', sa.String(length=50), nullable=True),
        sa.Column('environmental_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_seasonal_predictions_plant_id_user_plants')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_seasonal_predictions'))
    )
    
    # Create indexes for seasonal_predictions
    op.create_index('ix_seasonal_predictions_plant_id', 'seasonal_predictions', ['plant_id'], unique=False)
    op.create_index('ix_seasonal_predictions_prediction_date', 'seasonal_predictions', ['prediction_date'], unique=False)
    op.create_index('ix_seasonal_predictions_period_start', 'seasonal_predictions', ['prediction_period_start'], unique=False)
    op.create_index('ix_seasonal_predictions_period_end', 'seasonal_predictions', ['prediction_period_end'], unique=False)
    op.create_index('ix_seasonal_predictions_confidence', 'seasonal_predictions', ['confidence_score'], unique=False)
    
    # Create environmental_data_cache table
    op.create_table('environmental_data_cache',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('location_hash', sa.String(length=100), nullable=False),
        sa.Column('data_type', sa.String(length=50), nullable=False),
        sa.Column('date_range', postgresql.DATERANGE(), nullable=False),
        sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('source', sa.String(length=100), nullable=True),
        sa.Column('expires_at', sa.DateTime(), nullable=False),
        sa.Column('hit_count', sa.Integer(), nullable=True),
        sa.Column('last_accessed', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_environmental_data_cache'))
    )
    
    # Create indexes for environmental_data_cache
    op.create_index('ix_environmental_data_cache_location_hash', 'environmental_data_cache', ['location_hash'], unique=False)
    op.create_index('ix_environmental_data_cache_data_type', 'environmental_data_cache', ['data_type'], unique=False)
    op.create_index('ix_environmental_data_cache_expires_at', 'environmental_data_cache', ['expires_at'], unique=False)
    op.create_index('ix_environmental_data_cache_location_type', 'environmental_data_cache', ['location_hash', 'data_type'], unique=False)
    
    # Create seasonal_transitions table
    op.create_table('seasonal_transitions',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('location_hash', sa.String(length=100), nullable=False),
        sa.Column('transition_type', sa.String(length=50), nullable=False),
        sa.Column('transition_date', sa.Date(), nullable=False),
        sa.Column('temperature_change', sa.Float(), nullable=True),
        sa.Column('daylight_change', sa.Float(), nullable=True),
        sa.Column('precipitation_change', sa.Float(), nullable=True),
        sa.Column('confidence_score', sa.Float(), nullable=False),
        sa.Column('detection_method', sa.String(length=50), nullable=True),
        sa.Column('environmental_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_seasonal_transitions'))
    )
    
    # Create indexes for seasonal_transitions
    op.create_index('ix_seasonal_transitions_location_hash', 'seasonal_transitions', ['location_hash'], unique=False)
    op.create_index('ix_seasonal_transitions_transition_type', 'seasonal_transitions', ['transition_type'], unique=False)
    op.create_index('ix_seasonal_transitions_transition_date', 'seasonal_transitions', ['transition_date'], unique=False)
    op.create_index('ix_seasonal_transitions_location_date', 'seasonal_transitions', ['location_hash', 'transition_date'], unique=False)
    
    # Create timelapse_sessions table
    op.create_table('timelapse_sessions',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('plant_id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('session_name', sa.String(length=255), nullable=False),
        sa.Column('start_date', sa.DateTime(), nullable=False),
        sa.Column('end_date', sa.DateTime(), nullable=True),
        sa.Column('photo_schedule', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('tracking_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('total_photos', sa.Integer(), nullable=True),
        sa.Column('last_photo_date', sa.DateTime(), nullable=True),
        sa.Column('initial_measurements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('current_measurements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('milestone_targets', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('video_url', sa.String(length=500), nullable=True),
        sa.Column('video_generated_at', sa.DateTime(), nullable=True),
        sa.Column('video_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_timelapse_sessions_plant_id_user_plants')),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_timelapse_sessions_user_id_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_timelapse_sessions'))
    )
    
    # Create indexes for timelapse_sessions
    op.create_index('ix_timelapse_sessions_plant_id', 'timelapse_sessions', ['plant_id'], unique=False)
    op.create_index('ix_timelapse_sessions_user_id', 'timelapse_sessions', ['user_id'], unique=False)
    op.create_index('ix_timelapse_sessions_status', 'timelapse_sessions', ['status'], unique=False)
    op.create_index('ix_timelapse_sessions_start_date', 'timelapse_sessions', ['start_date'], unique=False)
    op.create_index('ix_timelapse_sessions_user_plant', 'timelapse_sessions', ['user_id', 'plant_id'], unique=False)
    
    # Create growth_photos table
    op.create_table('growth_photos',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('session_id', sa.UUID(), nullable=False),
        sa.Column('photo_url', sa.String(length=500), nullable=False),
        sa.Column('capture_date', sa.DateTime(), nullable=False),
        sa.Column('sequence_number', sa.Integer(), nullable=False),
        sa.Column('plant_measurements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('growth_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('health_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('processing_status', sa.String(length=50), nullable=False),
        sa.Column('processing_error', sa.Text(), nullable=True),
        sa.Column('processing_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('image_quality_score', sa.Float(), nullable=True),
        sa.Column('positioning_accuracy', sa.Float(), nullable=True),
        sa.Column('lighting_consistency', sa.Float(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('processed_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['session_id'], ['timelapse_sessions.id'], name=op.f('fk_growth_photos_session_id_timelapse_sessions')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_growth_photos'))
    )
    
    # Create indexes for growth_photos
    op.create_index('ix_growth_photos_session_id', 'growth_photos', ['session_id'], unique=False)
    op.create_index('ix_growth_photos_capture_date', 'growth_photos', ['capture_date'], unique=False)
    op.create_index('ix_growth_photos_sequence_number', 'growth_photos', ['sequence_number'], unique=False)
    op.create_index('ix_growth_photos_processing_status', 'growth_photos', ['processing_status'], unique=False)
    op.create_index('ix_growth_photos_session_sequence', 'growth_photos', ['session_id', 'sequence_number'], unique=True)
    
    # Create growth_milestones table
    op.create_table('growth_milestones',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('session_id', sa.UUID(), nullable=False),
        sa.Column('photo_id', sa.UUID(), nullable=True),
        sa.Column('milestone_type', sa.String(length=100), nullable=False),
        sa.Column('milestone_name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('achievement_date', sa.DateTime(), nullable=False),
        sa.Column('measurement_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('comparison_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('detection_method', sa.String(length=50), nullable=True),
        sa.Column('confidence_score', sa.Float(), nullable=True),
        sa.Column('detection_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('user_verified', sa.Boolean(), nullable=True),
        sa.Column('user_notes', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['photo_id'], ['growth_photos.id'], name=op.f('fk_growth_milestones_photo_id_growth_photos')),
        sa.ForeignKeyConstraint(['session_id'], ['timelapse_sessions.id'], name=op.f('fk_growth_milestones_session_id_timelapse_sessions')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_growth_milestones'))
    )
    
    # Create indexes for growth_milestones
    op.create_index('ix_growth_milestones_session_id', 'growth_milestones', ['session_id'], unique=False)
    op.create_index('ix_growth_milestones_milestone_type', 'growth_milestones', ['milestone_type'], unique=False)
    op.create_index('ix_growth_milestones_achievement_date', 'growth_milestones', ['achievement_date'], unique=False)
    op.create_index('ix_growth_milestones_user_verified', 'growth_milestones', ['user_verified'], unique=False)
    
    # Create growth_analytics table
    op.create_table('growth_analytics',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('plant_id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('analysis_period_start', sa.DateTime(), nullable=False),
        sa.Column('analysis_period_end', sa.DateTime(), nullable=False),
        sa.Column('analysis_type', sa.String(length=50), nullable=False),
        sa.Column('growth_rate_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('trend_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('seasonal_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('peer_comparison', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('historical_comparison', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('insights', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('data_quality_score', sa.Float(), nullable=True),
        sa.Column('confidence_level', sa.Float(), nullable=True),
        sa.Column('analysis_version', sa.String(length=50), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_growth_analytics_plant_id_user_plants')),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_growth_analytics_user_id_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_growth_analytics'))
    )
    
    # Create indexes for growth_analytics
    op.create_index('ix_growth_analytics_plant_id', 'growth_analytics', ['plant_id'], unique=False)
    op.create_index('ix_growth_analytics_user_id', 'growth_analytics', ['user_id'], unique=False)
    op.create_index('ix_growth_analytics_analysis_type', 'growth_analytics', ['analysis_type'], unique=False)
    op.create_index('ix_growth_analytics_period_start', 'growth_analytics', ['analysis_period_start'], unique=False)
    op.create_index('ix_growth_analytics_period_end', 'growth_analytics', ['analysis_period_end'], unique=False)
    op.create_index('ix_growth_analytics_user_plant', 'growth_analytics', ['user_id', 'plant_id'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop growth_analytics table
    op.drop_index('ix_growth_analytics_user_plant', table_name='growth_analytics')
    op.drop_index('ix_growth_analytics_period_end', table_name='growth_analytics')
    op.drop_index('ix_growth_analytics_period_start', table_name='growth_analytics')
    op.drop_index('ix_growth_analytics_analysis_type', table_name='growth_analytics')
    op.drop_index('ix_growth_analytics_user_id', table_name='growth_analytics')
    op.drop_index('ix_growth_analytics_plant_id', table_name='growth_analytics')
    op.drop_table('growth_analytics')
    
    # Drop growth_milestones table
    op.drop_index('ix_growth_milestones_user_verified', table_name='growth_milestones')
    op.drop_index('ix_growth_milestones_achievement_date', table_name='growth_milestones')
    op.drop_index('ix_growth_milestones_milestone_type', table_name='growth_milestones')
    op.drop_index('ix_growth_milestones_session_id', table_name='growth_milestones')
    op.drop_table('growth_milestones')
    
    # Drop growth_photos table
    op.drop_index('ix_growth_photos_session_sequence', table_name='growth_photos')
    op.drop_index('ix_growth_photos_processing_status', table_name='growth_photos')
    op.drop_index('ix_growth_photos_sequence_number', table_name='growth_photos')
    op.drop_index('ix_growth_photos_capture_date', table_name='growth_photos')
    op.drop_index('ix_growth_photos_session_id', table_name='growth_photos')
    op.drop_table('growth_photos')
    
    # Drop timelapse_sessions table
    op.drop_index('ix_timelapse_sessions_user_plant', table_name='timelapse_sessions')
    op.drop_index('ix_timelapse_sessions_start_date', table_name='timelapse_sessions')
    op.drop_index('ix_timelapse_sessions_status', table_name='timelapse_sessions')
    op.drop_index('ix_timelapse_sessions_user_id', table_name='timelapse_sessions')
    op.drop_index('ix_timelapse_sessions_plant_id', table_name='timelapse_sessions')
    op.drop_table('timelapse_sessions')
    
    # Drop seasonal_transitions table
    op.drop_index('ix_seasonal_transitions_location_date', table_name='seasonal_transitions')
    op.drop_index('ix_seasonal_transitions_transition_date', table_name='seasonal_transitions')
    op.drop_index('ix_seasonal_transitions_transition_type', table_name='seasonal_transitions')
    op.drop_index('ix_seasonal_transitions_location_hash', table_name='seasonal_transitions')
    op.drop_table('seasonal_transitions')
    
    # Drop environmental_data_cache table
    op.drop_index('ix_environmental_data_cache_location_type', table_name='environmental_data_cache')
    op.drop_index('ix_environmental_data_cache_expires_at', table_name='environmental_data_cache')
    op.drop_index('ix_environmental_data_cache_data_type', table_name='environmental_data_cache')
    op.drop_index('ix_environmental_data_cache_location_hash', table_name='environmental_data_cache')
    op.drop_table('environmental_data_cache')
    
    # Drop seasonal_predictions table
    op.drop_index('ix_seasonal_predictions_confidence', table_name='seasonal_predictions')
    op.drop_index('ix_seasonal_predictions_period_end', table_name='seasonal_predictions')
    op.drop_index('ix_seasonal_predictions_period_start', table_name='seasonal_predictions')
    op.drop_index('ix_seasonal_predictions_prediction_date', table_name='seasonal_predictions')
    op.drop_index('ix_seasonal_predictions_plant_id', table_name='seasonal_predictions')
    op.drop_table('seasonal_predictions')
    
    # ### end Alembic commands ###