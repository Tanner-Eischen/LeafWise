"""create_initial_schema

Revision ID: f4ce455d8933
Revises: 
Create Date: 2025-09-23 13:09:20.573678

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy
import fastapi_users_db_sqlalchemy.generics

# revision identifiers, used by Alembic.
revision = 'f4ce455d8933'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('environmental_data_cache',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('location_hash', sa.String(length=100), nullable=False),
    sa.Column('data_type', sa.String(length=50), nullable=False),
    sa.Column('date_range', postgresql.DATERANGE(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('hit_count', sa.Integer(), nullable=True),
    sa.Column('last_accessed', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_environmental_data_cache'))
    )
    op.create_index(op.f('ix_environmental_data_cache_data_type'), 'environmental_data_cache', ['data_type'], unique=False)
    op.create_index(op.f('ix_environmental_data_cache_location_hash'), 'environmental_data_cache', ['location_hash'], unique=False)
    op.create_table('local_nurseries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=50), nullable=True),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('website', sa.String(length=200), nullable=True),
    sa.Column('business_type', sa.String(length=50), nullable=True),
    sa.Column('specialties', sa.JSON(), nullable=True),
    sa.Column('services', sa.JSON(), nullable=True),
    sa.Column('operating_hours', sa.JSON(), nullable=True),
    sa.Column('average_rating', sa.Float(), nullable=True),
    sa.Column('total_reviews', sa.Integer(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_local_nurseries'))
    )
    op.create_table('plant_achievements',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('achievement_type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('icon', sa.String(length=50), nullable=True),
    sa.Column('badge_color', sa.String(length=20), nullable=True),
    sa.Column('points', sa.Integer(), nullable=True),
    sa.Column('unlock_criteria', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_achievements'))
    )
    op.create_table('plant_content_embeddings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('content_id', sa.UUID(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_content_embeddings'))
    )
    op.create_index('ix_plant_content_embeddings_content_id', 'plant_content_embeddings', ['content_id'], unique=False)
    op.create_index('ix_plant_content_embeddings_type', 'plant_content_embeddings', ['content_type'], unique=False)
    op.create_index('ix_plant_content_embeddings_vector', 'plant_content_embeddings', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_table('plant_species',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scientific_name', sa.String(length=255), nullable=False),
    sa.Column('common_names', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('family', sa.String(length=100), nullable=True),
    sa.Column('care_level', sa.String(length=20), nullable=True),
    sa.Column('light_requirements', sa.String(length=50), nullable=True),
    sa.Column('water_frequency_days', sa.Integer(), nullable=True),
    sa.Column('humidity_preference', sa.String(length=20), nullable=True),
    sa.Column('temperature_range', sa.String(length=50), nullable=True),
    sa.Column('toxicity_info', sa.Text(), nullable=True),
    sa.Column('care_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_species')),
    sa.UniqueConstraint('scientific_name', name=op.f('uq_plant_species_scientific_name'))
    )
    op.create_table('seasonal_transitions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('location_hash', sa.String(length=100), nullable=False),
    sa.Column('transition_type', sa.String(length=50), nullable=False),
    sa.Column('transition_date', sa.Date(), nullable=False),
    sa.Column('temperature_change', sa.Float(), nullable=True),
    sa.Column('daylight_change', sa.Float(), nullable=True),
    sa.Column('precipitation_change', sa.Float(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('detection_method', sa.String(length=50), nullable=True),
    sa.Column('environmental_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_seasonal_transitions'))
    )
    op.create_index(op.f('ix_seasonal_transitions_location_hash'), 'seasonal_transitions', ['location_hash'], unique=False)
    op.create_table('semantic_search_cache',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('query_hash', sa.String(length=64), nullable=False),
    sa.Column('query_embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=False),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('filters_hash', sa.String(length=64), nullable=True),
    sa.Column('hit_count', sa.Integer(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_accessed', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_semantic_search_cache')),
    sa.UniqueConstraint('query_hash', name=op.f('uq_semantic_search_cache_query_hash'))
    )
    op.create_index('ix_semantic_search_cache_expires', 'semantic_search_cache', ['expires_at'], unique=False)
    op.create_index('ix_semantic_search_cache_query_hash', 'semantic_search_cache', ['query_hash'], unique=False)
    op.create_table('task_categories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_categories')),
    sa.UniqueConstraint('name', name=op.f('uq_task_categories_name'))
    )
    op.create_index('ix_task_categories_name', 'task_categories', ['name'], unique=False)
    op.create_table('users',
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('profile_picture_url', sa.String(length=500), nullable=True),
    sa.Column('gardening_experience', sa.String(length=20), nullable=True),
    sa.Column('favorite_plants', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('is_private', sa.Boolean(), nullable=True),
    sa.Column('allow_plant_identification', sa.Boolean(), nullable=True),
    sa.Column('allow_friend_requests', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('is_expert', sa.Boolean(), nullable=False),
    sa.Column('is_moderator', sa.Boolean(), nullable=False),
    sa.Column('expert_specialties', sa.Text(), nullable=True),
    sa.Column('admin_permissions', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_active', sa.DateTime(), nullable=True),
    sa.Column('id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('calibration_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('sensor_type', sa.String(length=20), nullable=False),
    sa.Column('device_model', sa.String(length=100), nullable=True),
    sa.Column('calibration_factor', sa.Float(), nullable=False),
    sa.Column('offset_value', sa.Float(), nullable=False),
    sa.Column('reference_lux', sa.Float(), nullable=True),
    sa.Column('measured_lux', sa.Float(), nullable=True),
    sa.Column('accuracy_percentage', sa.Float(), nullable=True),
    sa.Column('variance_percentage', sa.Float(), nullable=True),
    sa.Column('sample_count', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('calibration_method', sa.String(length=50), nullable=True),
    sa.Column('reference_device', sa.String(length=100), nullable=True),
    sa.Column('valid_from', sa.DateTime(), nullable=False),
    sa.Column('valid_until', sa.DateTime(), nullable=True),
    sa.Column('last_validation', sa.DateTime(), nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('calibration_conditions', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_calibration_profiles_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_calibration_profiles')),
    sa.UniqueConstraint('user_id', 'name', name='uq_calibration_profile_user_name')
    )
    op.create_index('ix_calibration_profiles_sensor_type', 'calibration_profiles', ['sensor_type'], unique=False)
    op.create_index('ix_calibration_profiles_status', 'calibration_profiles', ['status'], unique=False)
    op.create_index('ix_calibration_profiles_user_id', 'calibration_profiles', ['user_id'], unique=False)
    op.create_index('ix_calibration_profiles_valid_from', 'calibration_profiles', ['valid_from'], unique=False)
    op.create_table('friendships',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('requester_id', sa.UUID(), nullable=False),
    sa.Column('addressee_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('is_close_friend', sa.Boolean(), nullable=True),
    sa.Column('is_blocked', sa.Boolean(), nullable=True),
    sa.Column('blocked_by_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('accepted_at', sa.DateTime(), nullable=True),
    sa.Column('blocked_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['addressee_id'], ['users.id'], name=op.f('fk_friendships_addressee_id_users')),
    sa.ForeignKeyConstraint(['blocked_by_id'], ['users.id'], name=op.f('fk_friendships_blocked_by_id_users')),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], name=op.f('fk_friendships_requester_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_friendships')),
    sa.UniqueConstraint('requester_id', 'addressee_id', name='unique_friendship')
    )
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sender_id', sa.UUID(), nullable=False),
    sa.Column('recipient_id', sa.UUID(), nullable=False),
    sa.Column('content_type', sa.String(length=20), nullable=False),
    sa.Column('text_content', sa.Text(), nullable=True),
    sa.Column('media_url', sa.String(length=500), nullable=True),
    sa.Column('media_thumbnail_url', sa.String(length=500), nullable=True),
    sa.Column('caption', sa.Text(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('disappear_after', sa.Integer(), nullable=True),
    sa.Column('is_disappearing', sa.Boolean(), nullable=True),
    sa.Column('is_delivered', sa.Boolean(), nullable=True),
    sa.Column('is_viewed', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('delivered_at', sa.DateTime(), nullable=True),
    sa.Column('viewed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.id'], name=op.f('fk_messages_recipient_id_users')),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('fk_messages_sender_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_messages'))
    )
    op.create_table('nursery_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('nursery_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('start_time', sa.Time(), nullable=True),
    sa.Column('end_time', sa.Time(), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=True),
    sa.Column('recurrence_pattern', sa.JSON(), nullable=True),
    sa.Column('max_participants', sa.Integer(), nullable=True),
    sa.Column('current_participants', sa.Integer(), nullable=True),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('skill_level', sa.String(length=20), nullable=True),
    sa.Column('requirements', sa.Text(), nullable=True),
    sa.Column('materials_provided', sa.Text(), nullable=True),
    sa.Column('requires_registration', sa.Boolean(), nullable=True),
    sa.Column('registration_deadline', sa.DateTime(), nullable=True),
    sa.Column('contact_info', sa.String(length=200), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_cancelled', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['nursery_id'], ['local_nurseries.id'], name=op.f('fk_nursery_events_nursery_id_local_nurseries')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_nursery_events'))
    )
    op.create_table('nursery_reviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('nursery_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('review_text', sa.Text(), nullable=True),
    sa.Column('plant_quality_rating', sa.Integer(), nullable=True),
    sa.Column('service_rating', sa.Integer(), nullable=True),
    sa.Column('price_rating', sa.Integer(), nullable=True),
    sa.Column('selection_rating', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('is_verified_purchase', sa.Boolean(), nullable=True),
    sa.Column('visit_date', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['nursery_id'], ['local_nurseries.id'], name=op.f('fk_nursery_reviews_nursery_id_local_nurseries')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_nursery_reviews_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_nursery_reviews'))
    )
    op.create_table('plant_identifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('species_id', sa.UUID(), nullable=True),
    sa.Column('image_path', sa.String(length=500), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('identified_name', sa.String(length=255), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('verification_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['species_id'], ['plant_species.id'], name=op.f('fk_plant_identifications_species_id_plant_species')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_plant_identifications_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_identifications'))
    )
    op.create_table('plant_knowledge_base',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('plant_species_id', sa.UUID(), nullable=True),
    sa.Column('difficulty_level', sa.String(length=20), nullable=True),
    sa.Column('season', sa.String(length=20), nullable=True),
    sa.Column('climate_zones', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('author_id', sa.UUID(), nullable=True),
    sa.Column('verified', sa.String(length=20), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.Column('helpful_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_plant_knowledge_base_author_id_users')),
    sa.ForeignKeyConstraint(['plant_species_id'], ['plant_species.id'], name=op.f('fk_plant_knowledge_base_plant_species_id_plant_species')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_knowledge_base'))
    )
    op.create_index('ix_plant_knowledge_base_difficulty', 'plant_knowledge_base', ['difficulty_level'], unique=False)
    op.create_index('ix_plant_knowledge_base_species', 'plant_knowledge_base', ['plant_species_id'], unique=False)
    op.create_index('ix_plant_knowledge_base_type', 'plant_knowledge_base', ['content_type'], unique=False)
    op.create_index('ix_plant_knowledge_base_verified', 'plant_knowledge_base', ['verified'], unique=False)
    op.create_table('plant_questions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('species_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('image_paths', sa.Text(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('is_solved', sa.Boolean(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['species_id'], ['plant_species.id'], name=op.f('fk_plant_questions_species_id_plant_species')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_plant_questions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_questions'))
    )
    op.create_table('plant_trades',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('species_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('trade_type', sa.Enum('TRADE', 'SELL', 'GIVE_AWAY', name='tradetype'), nullable=False),
    sa.Column('status', sa.Enum('AVAILABLE', 'PENDING', 'COMPLETED', 'CANCELLED', name='tradestatus'), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('price', sa.String(length=50), nullable=True),
    sa.Column('image_paths', sa.Text(), nullable=True),
    sa.Column('interested_user_id', sa.UUID(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['interested_user_id'], ['users.id'], name=op.f('fk_plant_trades_interested_user_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_plant_trades_owner_id_users')),
    sa.ForeignKeyConstraint(['species_id'], ['plant_species.id'], name=op.f('fk_plant_trades_species_id_plant_species')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_trades'))
    )
    op.create_table('rag_interactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('interaction_type', sa.String(length=50), nullable=False),
    sa.Column('query_text', sa.Text(), nullable=True),
    sa.Column('query_embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('retrieved_documents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('generated_response', sa.Text(), nullable=True),
    sa.Column('user_feedback', sa.Integer(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('confidence_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_rag_interactions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rag_interactions'))
    )
    op.create_index('ix_rag_interactions_created', 'rag_interactions', ['created_at'], unique=False)
    op.create_index('ix_rag_interactions_type', 'rag_interactions', ['interaction_type'], unique=False)
    op.create_index('ix_rag_interactions_user', 'rag_interactions', ['user_id'], unique=False)
    op.create_index('ix_rag_interactions_vector', 'rag_interactions', ['query_embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'query_embedding': 'vector_cosine_ops'})
    op.create_table('stories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('content_type', sa.String(length=20), nullable=False),
    sa.Column('media_url', sa.String(length=500), nullable=False),
    sa.Column('thumbnail_url', sa.String(length=500), nullable=True),
    sa.Column('caption', sa.Text(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('privacy_level', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('plant_tags', sa.String(length=500), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('story_metadata', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_stories_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_stories'))
    )
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('priority', sa.String(length=20), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.Column('assignee_id', sa.UUID(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('estimated_hours', sa.Float(), nullable=True),
    sa.Column('actual_hours', sa.Float(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('implementation_notes', sa.Text(), nullable=True),
    sa.Column('acceptance_criteria', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assignee_id'], ['users.id'], name=op.f('fk_tasks_assignee_id_users')),
    sa.ForeignKeyConstraint(['category_id'], ['task_categories.id'], name=op.f('fk_tasks_category_id_task_categories')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_tasks_created_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_index('ix_tasks_assignee_id', 'tasks', ['assignee_id'], unique=False)
    op.create_index('ix_tasks_category_id', 'tasks', ['category_id'], unique=False)
    op.create_index('ix_tasks_created_at', 'tasks', ['created_at'], unique=False)
    op.create_index('ix_tasks_due_date', 'tasks', ['due_date'], unique=False)
    op.create_index('ix_tasks_priority', 'tasks', ['priority'], unique=False)
    op.create_index('ix_tasks_status', 'tasks', ['status'], unique=False)
    op.create_table('user_achievements',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('achievement_id', sa.UUID(), nullable=False),
    sa.Column('earned_at', sa.DateTime(), nullable=True),
    sa.Column('progress_data', sa.JSON(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['achievement_id'], ['plant_achievements.id'], name=op.f('fk_user_achievements_achievement_id_plant_achievements')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_achievements_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_achievements'))
    )
    op.create_table('user_nursery_favorites',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('nursery_id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('last_visited', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['nursery_id'], ['local_nurseries.id'], name=op.f('fk_user_nursery_favorites_nursery_id_local_nurseries')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_nursery_favorites_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_nursery_favorites'))
    )
    op.create_table('user_plants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('species_id', sa.UUID(), nullable=False),
    sa.Column('nickname', sa.String(length=100), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('acquired_date', sa.DateTime(), nullable=True),
    sa.Column('last_watered', sa.DateTime(), nullable=True),
    sa.Column('last_fertilized', sa.DateTime(), nullable=True),
    sa.Column('last_repotted', sa.DateTime(), nullable=True),
    sa.Column('health_status', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['species_id'], ['plant_species.id'], name=op.f('fk_user_plants_species_id_plant_species')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_plants_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_plants'))
    )
    op.create_table('user_preference_embeddings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('preference_type', sa.String(length=50), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=False),
    sa.Column('confidence_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_preference_embeddings_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_preference_embeddings'))
    )
    op.create_index('ix_user_preference_embeddings_type', 'user_preference_embeddings', ['preference_type'], unique=False)
    op.create_index('ix_user_preference_embeddings_user', 'user_preference_embeddings', ['user_id'], unique=False)
    op.create_index('ix_user_preference_embeddings_vector', 'user_preference_embeddings', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_table('user_stats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('total_plants', sa.Integer(), nullable=True),
    sa.Column('active_plants', sa.Integer(), nullable=True),
    sa.Column('plants_identified', sa.Integer(), nullable=True),
    sa.Column('total_care_logs', sa.Integer(), nullable=True),
    sa.Column('care_streak_days', sa.Integer(), nullable=True),
    sa.Column('longest_care_streak', sa.Integer(), nullable=True),
    sa.Column('last_care_activity', sa.DateTime(), nullable=True),
    sa.Column('questions_asked', sa.Integer(), nullable=True),
    sa.Column('questions_answered', sa.Integer(), nullable=True),
    sa.Column('helpful_answers', sa.Integer(), nullable=True),
    sa.Column('trades_completed', sa.Integer(), nullable=True),
    sa.Column('total_achievements', sa.Integer(), nullable=True),
    sa.Column('total_points', sa.Integer(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_stats_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_stats')),
    sa.UniqueConstraint('user_id', name=op.f('uq_user_stats_user_id'))
    )
    op.create_table('ble_devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_name', sa.String(length=100), nullable=True),
    sa.Column('mac_address', sa.String(length=17), nullable=False),
    sa.Column('manufacturer', sa.String(length=100), nullable=True),
    sa.Column('model', sa.String(length=100), nullable=True),
    sa.Column('firmware_version', sa.String(length=50), nullable=True),
    sa.Column('supported_services', sa.JSON(), nullable=True),
    sa.Column('sensor_types', sa.JSON(), nullable=True),
    sa.Column('battery_level', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('last_seen', sa.DateTime(), nullable=True),
    sa.Column('last_connected', sa.DateTime(), nullable=True),
    sa.Column('connection_attempts', sa.Integer(), nullable=False),
    sa.Column('rssi', sa.Integer(), nullable=True),
    sa.Column('connection_stability', sa.Float(), nullable=True),
    sa.Column('sampling_rate_hz', sa.Float(), nullable=True),
    sa.Column('auto_connect', sa.Boolean(), nullable=True),
    sa.Column('is_trusted', sa.Boolean(), nullable=True),
    sa.Column('calibration_profile_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['calibration_profile_id'], ['calibration_profiles.id'], name=op.f('fk_ble_devices_calibration_profile_id_calibration_profiles')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_ble_devices_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ble_devices')),
    sa.UniqueConstraint('user_id', 'mac_address', name='uq_ble_device_user_mac')
    )
    op.create_index('ix_ble_devices_last_seen', 'ble_devices', ['last_seen'], unique=False)
    op.create_index('ix_ble_devices_mac_address', 'ble_devices', ['mac_address'], unique=False)
    op.create_index('ix_ble_devices_status', 'ble_devices', ['status'], unique=False)
    op.create_index('ix_ble_devices_user_id', 'ble_devices', ['user_id'], unique=False)
    op.create_table('care_plans_v2',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('plan', sa.JSON(), nullable=False),
    sa.Column('rationale', sa.JSON(), nullable=False),
    sa.Column('valid_from', sa.DateTime(), nullable=False),
    sa.Column('valid_to', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_care_plans_v2_plant_id_user_plants')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_care_plans_v2_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_care_plans_v2')),
    sa.UniqueConstraint('plant_id', 'version', name='uq_care_plan_plant_version')
    )
    op.create_index('ix_care_plans_v2_created_at', 'care_plans_v2', ['created_at'], unique=False)
    op.create_index('ix_care_plans_v2_plant_id', 'care_plans_v2', ['plant_id'], unique=False)
    op.create_index('ix_care_plans_v2_user_id', 'care_plans_v2', ['user_id'], unique=False)
    op.create_index('ix_care_plans_v2_valid_from', 'care_plans_v2', ['valid_from'], unique=False)
    op.create_table('growth_analytics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('analysis_period_start', sa.DateTime(), nullable=False),
    sa.Column('analysis_period_end', sa.DateTime(), nullable=False),
    sa.Column('analysis_type', sa.String(length=50), nullable=False),
    sa.Column('growth_rate_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('trend_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('seasonal_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('peer_comparison', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('historical_comparison', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('insights', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data_quality_score', sa.Float(), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=True),
    sa.Column('analysis_version', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_growth_analytics_plant_id_user_plants')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_growth_analytics_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_growth_analytics'))
    )
    op.create_table('growth_photos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('image_width', sa.Integer(), nullable=True),
    sa.Column('image_height', sa.Integer(), nullable=True),
    sa.Column('leaf_area_cm2', sa.Float(), nullable=True),
    sa.Column('plant_height_cm', sa.Float(), nullable=True),
    sa.Column('leaf_count', sa.Integer(), nullable=True),
    sa.Column('stem_width_mm', sa.Float(), nullable=True),
    sa.Column('health_score', sa.Float(), nullable=True),
    sa.Column('chlorophyll_index', sa.Float(), nullable=True),
    sa.Column('disease_indicators', sa.JSON(), nullable=True),
    sa.Column('processing_version', sa.String(length=20), nullable=True),
    sa.Column('confidence_scores', sa.JSON(), nullable=True),
    sa.Column('analysis_duration_ms', sa.Integer(), nullable=True),
    sa.Column('location_name', sa.String(length=100), nullable=True),
    sa.Column('ambient_light_lux', sa.Float(), nullable=True),
    sa.Column('camera_settings', sa.JSON(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_processed', sa.Boolean(), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('captured_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_growth_photos_plant_id_user_plants')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_growth_photos_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_growth_photos'))
    )
    op.create_index('ix_growth_photos_captured_at', 'growth_photos', ['captured_at'], unique=False)
    op.create_index('ix_growth_photos_is_processed', 'growth_photos', ['is_processed'], unique=False)
    op.create_index('ix_growth_photos_plant_captured', 'growth_photos', ['plant_id', 'captured_at'], unique=False)
    op.create_index('ix_growth_photos_plant_id', 'growth_photos', ['plant_id'], unique=False)
    op.create_index('ix_growth_photos_user_id', 'growth_photos', ['user_id'], unique=False)
    op.create_table('plant_answers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('is_accepted', sa.Boolean(), nullable=True),
    sa.Column('upvotes', sa.Integer(), nullable=True),
    sa.Column('downvotes', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['plant_questions.id'], name=op.f('fk_plant_answers_question_id_plant_questions')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_plant_answers_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_answers'))
    )
    op.create_table('plant_care_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('care_type', sa.String(length=50), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('performed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_plant_care_logs_plant_id_user_plants')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_care_logs'))
    )
    op.create_table('plant_milestones',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('milestone_type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('achieved_at', sa.DateTime(), nullable=True),
    sa.Column('photo_url', sa.String(length=500), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_plant_milestones_plant_id_user_plants')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_milestones'))
    )
    op.create_table('plant_photos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('caption', sa.Text(), nullable=True),
    sa.Column('is_progress_photo', sa.Boolean(), nullable=True),
    sa.Column('taken_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_plant_photos_plant_id_user_plants')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_photos'))
    )
    op.create_table('seasonal_predictions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('prediction_date', sa.DateTime(), nullable=False),
    sa.Column('prediction_period_start', sa.Date(), nullable=False),
    sa.Column('prediction_period_end', sa.Date(), nullable=False),
    sa.Column('growth_forecast', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('care_adjustments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('risk_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('optimal_activities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('environmental_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_seasonal_predictions_plant_id_user_plants')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_seasonal_predictions'))
    )
    op.create_table('story_views',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('story_id', sa.UUID(), nullable=False),
    sa.Column('viewer_id', sa.UUID(), nullable=False),
    sa.Column('viewed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['story_id'], ['stories.id'], name=op.f('fk_story_views_story_id_stories')),
    sa.ForeignKeyConstraint(['viewer_id'], ['users.id'], name=op.f('fk_story_views_viewer_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_story_views'))
    )
    op.create_table('task_comments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_comments_task_id_tasks')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_task_comments_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_comments'))
    )
    op.create_index('ix_task_comments_created_at', 'task_comments', ['created_at'], unique=False)
    op.create_index('ix_task_comments_task_id', 'task_comments', ['task_id'], unique=False)
    op.create_index('ix_task_comments_user_id', 'task_comments', ['user_id'], unique=False)
    op.create_table('task_dependencies',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('dependency_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dependency_id'], ['tasks.id'], name=op.f('fk_task_dependencies_dependency_id_tasks')),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_dependencies_task_id_tasks')),
    sa.PrimaryKeyConstraint('task_id', 'dependency_id', name=op.f('pk_task_dependencies'))
    )
    op.create_table('task_progress',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('hours_worked', sa.Float(), nullable=False),
    sa.Column('progress_notes', sa.Text(), nullable=True),
    sa.Column('completion_percentage', sa.Float(), nullable=False),
    sa.Column('logged_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_progress_task_id_tasks')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_task_progress_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_progress'))
    )
    op.create_index('ix_task_progress_logged_at', 'task_progress', ['logged_at'], unique=False)
    op.create_index('ix_task_progress_task_id', 'task_progress', ['task_id'], unique=False)
    op.create_index('ix_task_progress_user_id', 'task_progress', ['user_id'], unique=False)
    op.create_table('timelapse_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_name', sa.String(length=255), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('photo_schedule', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tracking_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('total_photos', sa.Integer(), nullable=True),
    sa.Column('last_photo_date', sa.DateTime(), nullable=True),
    sa.Column('initial_measurements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('current_measurements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('milestone_targets', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('video_url', sa.String(length=500), nullable=True),
    sa.Column('video_generated_at', sa.DateTime(), nullable=True),
    sa.Column('video_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_timelapse_sessions_plant_id_user_plants')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_timelapse_sessions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_timelapse_sessions'))
    )
    op.create_table('light_readings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('plant_id', sa.UUID(), nullable=True),
    sa.Column('lux_value', sa.Float(), nullable=False),
    sa.Column('ppfd_value', sa.Float(), nullable=True),
    sa.Column('source', sa.String(length=20), nullable=False),
    sa.Column('location_name', sa.String(length=100), nullable=True),
    sa.Column('gps_latitude', sa.Float(), nullable=True),
    sa.Column('gps_longitude', sa.Float(), nullable=True),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('calibration_profile_id', sa.UUID(), nullable=True),
    sa.Column('accuracy_estimate', sa.Float(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('device_id', sa.String(length=100), nullable=True),
    sa.Column('ble_device_id', sa.UUID(), nullable=True),
    sa.Column('growth_photo_id', sa.UUID(), nullable=True),
    sa.Column('telemetry_session_id', sa.UUID(), nullable=True),
    sa.Column('sync_status', sa.String(length=20), nullable=False),
    sa.Column('offline_created', sa.Boolean(), nullable=False),
    sa.Column('conflict_resolution_data', sa.JSON(), nullable=True),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('processing_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('measured_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ble_device_id'], ['ble_devices.id'], name=op.f('fk_light_readings_ble_device_id_ble_devices')),
    sa.ForeignKeyConstraint(['calibration_profile_id'], ['calibration_profiles.id'], name=op.f('fk_light_readings_calibration_profile_id_calibration_profiles')),
    sa.ForeignKeyConstraint(['growth_photo_id'], ['growth_photos.id'], name=op.f('fk_light_readings_growth_photo_id_growth_photos')),
    sa.ForeignKeyConstraint(['plant_id'], ['user_plants.id'], name=op.f('fk_light_readings_plant_id_user_plants')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_light_readings_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_light_readings'))
    )
    op.create_index('ix_light_readings_location', 'light_readings', ['location_name'], unique=False)
    op.create_index('ix_light_readings_measured_at', 'light_readings', ['measured_at'], unique=False)
    op.create_index('ix_light_readings_plant_id', 'light_readings', ['plant_id'], unique=False)
    op.create_index('ix_light_readings_source', 'light_readings', ['source'], unique=False)
    op.create_index('ix_light_readings_user_id', 'light_readings', ['user_id'], unique=False)
    op.create_index('ix_light_readings_user_measured', 'light_readings', ['user_id', 'measured_at'], unique=False)
    op.create_table('timelapse_photos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('photo_url', sa.String(length=500), nullable=False),
    sa.Column('capture_date', sa.DateTime(), nullable=False),
    sa.Column('sequence_number', sa.Integer(), nullable=False),
    sa.Column('plant_measurements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('growth_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('health_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processing_status', sa.String(length=50), nullable=False),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('processing_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('image_quality_score', sa.Float(), nullable=True),
    sa.Column('positioning_accuracy', sa.Float(), nullable=True),
    sa.Column('lighting_consistency', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['timelapse_sessions.id'], name=op.f('fk_timelapse_photos_session_id_timelapse_sessions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_timelapse_photos'))
    )
    op.create_table('growth_milestones',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('photo_id', sa.UUID(), nullable=True),
    sa.Column('milestone_type', sa.String(length=100), nullable=False),
    sa.Column('milestone_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('achievement_date', sa.DateTime(), nullable=False),
    sa.Column('measurement_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('comparison_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('detection_method', sa.String(length=50), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('detection_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_verified', sa.Boolean(), nullable=True),
    sa.Column('user_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['timelapse_photos.id'], name=op.f('fk_growth_milestones_photo_id_timelapse_photos')),
    sa.ForeignKeyConstraint(['session_id'], ['timelapse_sessions.id'], name=op.f('fk_growth_milestones_session_id_timelapse_sessions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_growth_milestones'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('growth_milestones')
    op.drop_table('timelapse_photos')
    op.drop_index('ix_light_readings_user_measured', table_name='light_readings')
    op.drop_index('ix_light_readings_user_id', table_name='light_readings')
    op.drop_index('ix_light_readings_source', table_name='light_readings')
    op.drop_index('ix_light_readings_plant_id', table_name='light_readings')
    op.drop_index('ix_light_readings_measured_at', table_name='light_readings')
    op.drop_index('ix_light_readings_location', table_name='light_readings')
    op.drop_table('light_readings')
    op.drop_table('timelapse_sessions')
    op.drop_index('ix_task_progress_user_id', table_name='task_progress')
    op.drop_index('ix_task_progress_task_id', table_name='task_progress')
    op.drop_index('ix_task_progress_logged_at', table_name='task_progress')
    op.drop_table('task_progress')
    op.drop_table('task_dependencies')
    op.drop_index('ix_task_comments_user_id', table_name='task_comments')
    op.drop_index('ix_task_comments_task_id', table_name='task_comments')
    op.drop_index('ix_task_comments_created_at', table_name='task_comments')
    op.drop_table('task_comments')
    op.drop_table('story_views')
    op.drop_table('seasonal_predictions')
    op.drop_table('plant_photos')
    op.drop_table('plant_milestones')
    op.drop_table('plant_care_logs')
    op.drop_table('plant_answers')
    op.drop_index('ix_growth_photos_user_id', table_name='growth_photos')
    op.drop_index('ix_growth_photos_plant_id', table_name='growth_photos')
    op.drop_index('ix_growth_photos_plant_captured', table_name='growth_photos')
    op.drop_index('ix_growth_photos_is_processed', table_name='growth_photos')
    op.drop_index('ix_growth_photos_captured_at', table_name='growth_photos')
    op.drop_table('growth_photos')
    op.drop_table('growth_analytics')
    op.drop_index('ix_care_plans_v2_valid_from', table_name='care_plans_v2')
    op.drop_index('ix_care_plans_v2_user_id', table_name='care_plans_v2')
    op.drop_index('ix_care_plans_v2_plant_id', table_name='care_plans_v2')
    op.drop_index('ix_care_plans_v2_created_at', table_name='care_plans_v2')
    op.drop_table('care_plans_v2')
    op.drop_index('ix_ble_devices_user_id', table_name='ble_devices')
    op.drop_index('ix_ble_devices_status', table_name='ble_devices')
    op.drop_index('ix_ble_devices_mac_address', table_name='ble_devices')
    op.drop_index('ix_ble_devices_last_seen', table_name='ble_devices')
    op.drop_table('ble_devices')
    op.drop_table('user_stats')
    op.drop_index('ix_user_preference_embeddings_vector', table_name='user_preference_embeddings', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_index('ix_user_preference_embeddings_user', table_name='user_preference_embeddings')
    op.drop_index('ix_user_preference_embeddings_type', table_name='user_preference_embeddings')
    op.drop_table('user_preference_embeddings')
    op.drop_table('user_plants')
    op.drop_table('user_nursery_favorites')
    op.drop_table('user_achievements')
    op.drop_index('ix_tasks_status', table_name='tasks')
    op.drop_index('ix_tasks_priority', table_name='tasks')
    op.drop_index('ix_tasks_due_date', table_name='tasks')
    op.drop_index('ix_tasks_created_at', table_name='tasks')
    op.drop_index('ix_tasks_category_id', table_name='tasks')
    op.drop_index('ix_tasks_assignee_id', table_name='tasks')
    op.drop_table('tasks')
    op.drop_table('stories')
    op.drop_index('ix_rag_interactions_vector', table_name='rag_interactions', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'query_embedding': 'vector_cosine_ops'})
    op.drop_index('ix_rag_interactions_user', table_name='rag_interactions')
    op.drop_index('ix_rag_interactions_type', table_name='rag_interactions')
    op.drop_index('ix_rag_interactions_created', table_name='rag_interactions')
    op.drop_table('rag_interactions')
    op.drop_table('plant_trades')
    op.drop_table('plant_questions')
    op.drop_index('ix_plant_knowledge_base_verified', table_name='plant_knowledge_base')
    op.drop_index('ix_plant_knowledge_base_type', table_name='plant_knowledge_base')
    op.drop_index('ix_plant_knowledge_base_species', table_name='plant_knowledge_base')
    op.drop_index('ix_plant_knowledge_base_difficulty', table_name='plant_knowledge_base')
    op.drop_table('plant_knowledge_base')
    op.drop_table('plant_identifications')
    op.drop_table('nursery_reviews')
    op.drop_table('nursery_events')
    op.drop_table('messages')
    op.drop_table('friendships')
    op.drop_index('ix_calibration_profiles_valid_from', table_name='calibration_profiles')
    op.drop_index('ix_calibration_profiles_user_id', table_name='calibration_profiles')
    op.drop_index('ix_calibration_profiles_status', table_name='calibration_profiles')
    op.drop_index('ix_calibration_profiles_sensor_type', table_name='calibration_profiles')
    op.drop_table('calibration_profiles')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index('ix_task_categories_name', table_name='task_categories')
    op.drop_table('task_categories')
    op.drop_index('ix_semantic_search_cache_query_hash', table_name='semantic_search_cache')
    op.drop_index('ix_semantic_search_cache_expires', table_name='semantic_search_cache')
    op.drop_table('semantic_search_cache')
    op.drop_index(op.f('ix_seasonal_transitions_location_hash'), table_name='seasonal_transitions')
    op.drop_table('seasonal_transitions')
    op.drop_table('plant_species')
    op.drop_index('ix_plant_content_embeddings_vector', table_name='plant_content_embeddings', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_index('ix_plant_content_embeddings_type', table_name='plant_content_embeddings')
    op.drop_index('ix_plant_content_embeddings_content_id', table_name='plant_content_embeddings')
    op.drop_table('plant_content_embeddings')
    op.drop_table('plant_achievements')
    op.drop_table('local_nurseries')
    op.drop_index(op.f('ix_environmental_data_cache_location_hash'), table_name='environmental_data_cache')
    op.drop_index(op.f('ix_environmental_data_cache_data_type'), table_name='environmental_data_cache')
    op.drop_table('environmental_data_cache')
    # ### end Alembic commands ###