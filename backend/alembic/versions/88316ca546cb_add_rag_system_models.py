"""add_rag_system_models

Revision ID: 88316ca546cb
Revises: 2c0d0c4c83cb
Create Date: 2025-06-29 00:31:46.491001

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision = '88316ca546cb'
down_revision = '2c0d0c4c83cb'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('plant_content_embeddings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('content_id', sa.UUID(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_content_embeddings'))
    )
    op.create_index('ix_plant_content_embeddings_content_id', 'plant_content_embeddings', ['content_id'], unique=False)
    op.create_index('ix_plant_content_embeddings_type', 'plant_content_embeddings', ['content_type'], unique=False)
    op.create_index('ix_plant_content_embeddings_vector', 'plant_content_embeddings', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_table('semantic_search_cache',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('query_hash', sa.String(length=64), nullable=False),
    sa.Column('query_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('filters_hash', sa.String(length=64), nullable=True),
    sa.Column('hit_count', sa.Integer(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_accessed', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_semantic_search_cache')),
    sa.UniqueConstraint('query_hash', name=op.f('uq_semantic_search_cache_query_hash'))
    )
    op.create_index('ix_semantic_search_cache_expires', 'semantic_search_cache', ['expires_at'], unique=False)
    op.create_index('ix_semantic_search_cache_query_hash', 'semantic_search_cache', ['query_hash'], unique=False)
    op.create_table('plant_knowledge_base',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('plant_species_id', sa.UUID(), nullable=True),
    sa.Column('difficulty_level', sa.String(length=20), nullable=True),
    sa.Column('season', sa.String(length=20), nullable=True),
    sa.Column('climate_zones', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('author_id', sa.UUID(), nullable=True),
    sa.Column('verified', sa.String(length=20), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.Column('helpful_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_plant_knowledge_base_author_id_users')),
    sa.ForeignKeyConstraint(['plant_species_id'], ['plant_species.id'], name=op.f('fk_plant_knowledge_base_plant_species_id_plant_species')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plant_knowledge_base'))
    )
    op.create_index('ix_plant_knowledge_base_difficulty', 'plant_knowledge_base', ['difficulty_level'], unique=False)
    op.create_index('ix_plant_knowledge_base_species', 'plant_knowledge_base', ['plant_species_id'], unique=False)
    op.create_index('ix_plant_knowledge_base_type', 'plant_knowledge_base', ['content_type'], unique=False)
    op.create_index('ix_plant_knowledge_base_verified', 'plant_knowledge_base', ['verified'], unique=False)
    op.create_table('rag_interactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('interaction_type', sa.String(length=50), nullable=False),
    sa.Column('query_text', sa.Text(), nullable=True),
    sa.Column('query_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('retrieved_documents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('generated_response', sa.Text(), nullable=True),
    sa.Column('user_feedback', sa.Integer(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('confidence_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_rag_interactions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rag_interactions'))
    )
    op.create_index('ix_rag_interactions_created', 'rag_interactions', ['created_at'], unique=False)
    op.create_index('ix_rag_interactions_type', 'rag_interactions', ['interaction_type'], unique=False)
    op.create_index('ix_rag_interactions_user', 'rag_interactions', ['user_id'], unique=False)
    op.create_index('ix_rag_interactions_vector', 'rag_interactions', ['query_embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'query_embedding': 'vector_cosine_ops'})
    op.create_table('user_preference_embeddings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('preference_type', sa.String(length=50), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.Column('confidence_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_preference_embeddings_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_preference_embeddings'))
    )
    op.create_index('ix_user_preference_embeddings_type', 'user_preference_embeddings', ['preference_type'], unique=False)
    op.create_index('ix_user_preference_embeddings_user', 'user_preference_embeddings', ['user_id'], unique=False)
    op.create_index('ix_user_preference_embeddings_vector', 'user_preference_embeddings', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_preference_embeddings_vector', table_name='user_preference_embeddings', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_index('ix_user_preference_embeddings_user', table_name='user_preference_embeddings')
    op.drop_index('ix_user_preference_embeddings_type', table_name='user_preference_embeddings')
    op.drop_table('user_preference_embeddings')
    op.drop_index('ix_rag_interactions_vector', table_name='rag_interactions', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'query_embedding': 'vector_cosine_ops'})
    op.drop_index('ix_rag_interactions_user', table_name='rag_interactions')
    op.drop_index('ix_rag_interactions_type', table_name='rag_interactions')
    op.drop_index('ix_rag_interactions_created', table_name='rag_interactions')
    op.drop_table('rag_interactions')
    op.drop_index('ix_plant_knowledge_base_verified', table_name='plant_knowledge_base')
    op.drop_index('ix_plant_knowledge_base_type', table_name='plant_knowledge_base')
    op.drop_index('ix_plant_knowledge_base_species', table_name='plant_knowledge_base')
    op.drop_index('ix_plant_knowledge_base_difficulty', table_name='plant_knowledge_base')
    op.drop_table('plant_knowledge_base')
    op.drop_index('ix_semantic_search_cache_query_hash', table_name='semantic_search_cache')
    op.drop_index('ix_semantic_search_cache_expires', table_name='semantic_search_cache')
    op.drop_table('semantic_search_cache')
    op.drop_index('ix_plant_content_embeddings_vector', table_name='plant_content_embeddings', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_index('ix_plant_content_embeddings_type', table_name='plant_content_embeddings')
    op.drop_index('ix_plant_content_embeddings_content_id', table_name='plant_content_embeddings')
    op.drop_table('plant_content_embeddings')
    # ### end Alembic commands ###