This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo, **/certdata.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
assets/animations/
assets/fonts/
assets/icons/
assets/images/
.gitignore
.metadata
analysis_options.yaml
lib/core/constants/app_constants.dart
lib/core/exceptions/api_exception.dart
lib/core/models/friendship.dart
lib/core/models/friendship.freezed.dart
lib/core/models/friendship.g.dart
lib/core/models/message.dart
lib/core/models/message.freezed.dart
lib/core/models/message.g.dart
lib/core/models/story.dart
lib/core/models/story.freezed.dart
lib/core/models/story.g.dart
lib/core/models/user.dart
lib/core/models/user.freezed.dart
lib/core/models/user.g.dart
lib/core/network/api_client.dart
lib/core/network/interceptors/auth_interceptor.dart
lib/core/network/interceptors/error_interceptor.dart
lib/core/network/interceptors/logging_interceptor.dart
lib/core/providers/api_provider.dart
lib/core/providers/storage_provider.dart
lib/core/router/app_router.dart
lib/core/services/api_service.dart
lib/core/services/storage_service.dart
lib/core/theme/app_theme.dart
lib/core/utils/date_utils.dart
lib/core/widgets/analytics_widgets.dart
lib/core/widgets/custom_button.dart
lib/core/widgets/custom_search_bar.dart
lib/core/widgets/custom_text_field.dart
lib/core/widgets/error_widget.dart
lib/core/widgets/loading_widget.dart
lib/core/widgets/user_avatar.dart
lib/core/widgets/vote_buttons.dart
lib/features/auth/models/auth_models.dart
lib/features/auth/models/auth_models.freezed.dart
lib/features/auth/models/auth_models.g.dart
lib/features/auth/presentation/screens/login_screen.dart
lib/features/auth/presentation/screens/register_screen.dart
lib/features/auth/presentation/screens/splash_screen.dart
lib/features/auth/presentation/widgets/auth_button.dart
lib/features/auth/presentation/widgets/auth_text_field.dart
lib/features/auth/providers/auth_provider.dart
lib/features/auth/repositories/auth_repository.dart
lib/features/camera/models/ar_overlay_models.dart
lib/features/camera/models/ar_overlay_models.g.dart
lib/features/camera/presentation/screens/camera_screen.dart
lib/features/camera/services/ar_data_service.dart
lib/features/camera/widgets/plant_ar_filters.dart
lib/features/chat/presentation/screens/chat_screen.dart
lib/features/chat/presentation/screens/conversation_screen.dart
lib/features/friends/presentation/screens/add_friends_screen.dart
lib/features/friends/presentation/screens/friends_screen.dart
lib/features/friends/presentation/widgets/friend_suggestions.dart
lib/features/home/presentation/screens/home_screen.dart
lib/features/home/presentation/screens/main_screen.dart
lib/features/home/presentation/widgets/bottom_nav_bar.dart
lib/features/messages/presentation/widgets/recent_conversations.dart
lib/features/plant_care/models/plant_care_models.dart
lib/features/plant_care/models/plant_care_models.g.dart
lib/features/plant_care/presentation/screens/add_plant_screen.dart
lib/features/plant_care/presentation/screens/care_logs_screen.dart
lib/features/plant_care/presentation/screens/care_reminders_screen.dart
lib/features/plant_care/presentation/screens/plant_care_dashboard_screen.dart
lib/features/plant_care/presentation/screens/plant_detail_screen.dart
lib/features/plant_care/presentation/widgets/care_reminder_card.dart
lib/features/plant_care/presentation/widgets/plant_card.dart
lib/features/plant_care/providers/plant_care_provider.dart
lib/features/plant_care/services/plant_care_service.dart
lib/features/plant_community/models/plant_community_models.dart
lib/features/plant_community/models/plant_community_models.g.dart
lib/features/plant_community/presentation/screens/plant_community_screen.dart
lib/features/plant_community/presentation/screens/plant_questions_screen.dart
lib/features/plant_community/presentation/screens/plant_trades_screen.dart
lib/features/plant_community/presentation/widgets/question_card.dart
lib/features/plant_community/presentation/widgets/trade_card.dart
lib/features/plant_community/providers/plant_community_provider.dart
lib/features/plant_community/services/plant_community_service.dart
lib/features/plant_identification/models/plant_identification_models.dart
lib/features/plant_identification/models/plant_identification_models.freezed.dart
lib/features/plant_identification/models/plant_identification_models.g.dart
lib/features/plant_identification/presentation/screens/plant_identification_history_screen.dart
lib/features/plant_identification/presentation/screens/plant_identification_screen.dart
lib/features/plant_identification/presentation/screens/plant_search_screen.dart
lib/features/plant_identification/presentation/screens/plant_species_detail_screen.dart
lib/features/plant_identification/presentation/widgets/plant_identification_loading.dart
lib/features/plant_identification/presentation/widgets/plant_identification_result.dart
lib/features/plant_identification/providers/plant_identification_provider.dart
lib/features/plant_identification/services/plant_identification_service.dart
lib/features/plant/presentation/screens/plant_features_screen.dart
lib/features/profile/presentation/screens/profile_analytics_screen.dart
lib/features/profile/presentation/screens/profile_edit_screen.dart
lib/features/profile/presentation/screens/profile_screen.dart
lib/features/stories/presentation/screens/stories_screen.dart
lib/features/stories/presentation/screens/story_creation_screen.dart
lib/features/stories/presentation/screens/story_viewer_screen.dart
lib/features/stories/presentation/widgets/stories_bar.dart
lib/main.dart
preview.html
pubspec.yaml
README.md
test/widget_test.dart
web/index.html
web/manifest.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release
.env
vibe-tools.mdc
vibe-tools.env.mdc
</file>

<file path=".metadata">
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "fcf2c11572af6f390246c056bc905eca609533a0"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: fcf2c11572af6f390246c056bc905eca609533a0
      base_revision: fcf2c11572af6f390246c056bc905eca609533a0
    - platform: web
      create_revision: fcf2c11572af6f390246c056bc905eca609533a0
      base_revision: fcf2c11572af6f390246c056bc905eca609533a0

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'
</file>

<file path="analysis_options.yaml">
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.
# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml
linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
</file>

<file path="lib/core/constants/app_constants.dart">
class AppConstants {
  // App Info
  static const String appName = 'Plant Social';
  static const String appVersion = '1.0.0';
  static const String appDescription = 'A plant-focused social messaging platform';
  // API Configuration
  static const String baseUrl = 'http://localhost:8000';
  static const String apiVersion = 'v1';
  static const String apiBaseUrl = '$baseUrl/api/$apiVersion';
  static const String wsBaseUrl = 'ws://localhost:8000/api/$apiVersion/ws';
  // Storage Keys
  static const String accessTokenKey = 'access_token';
  static const String refreshTokenKey = 'refresh_token';
  static const String userIdKey = 'user_id';
  static const String userDataKey = 'user_data';
  // Message Types
  static const String messageTypeText = 'text';
  static const String messageTypeImage = 'image';
  static const String messageTypeVideo = 'video';
  // Story Types
  static const String storyTypePhoto = 'photo';
  static const String storyTypeVideo = 'video';
  static const String storyTypePlantShowcase = 'plant_showcase';
  static const String storyTypePlantCare = 'plant_care';
  // Privacy Levels
  static const String privacyPublic = 'public';
  static const String privacyFriends = 'friends';
  static const String privacyCloseFriends = 'close_friends';
  // Friendship Status
  static const String friendshipPending = 'pending';
  static const String friendshipAccepted = 'accepted';
  static const String friendshipBlocked = 'blocked';
  // Media Constraints
  static const int maxImageSizeMB = 10;
  static const int maxVideoSizeMB = 50;
  static const int maxVideoDurationSeconds = 60;
  static const int storyDurationHours = 24;
  // Disappearing Message Timers (seconds)
  static const List<int> disappearTimers = [1, 3, 5, 10, 30, 60];
  // Plant Care Types
  static const String careTypeWatering = 'watering';
  static const String careTypeFertilizing = 'fertilizing';
  static const String careTypePruning = 'pruning';
  static const String careTypeRepotting = 'repotting';
  // Plant Difficulty Levels
  static const String difficultyEasy = 'easy';
  static const String difficultyModerate = 'moderate';
  static const String difficultyDifficult = 'difficult';
  // Error Messages
  static const String networkError = 'Network connection error';
  static const String serverError = 'Server error occurred';
  static const String authError = 'Authentication failed';
  static const String permissionError = 'Permission denied';
  // Success Messages
  static const String loginSuccess = 'Login successful';
  static const String registrationSuccess = 'Registration successful';
  static const String messageSent = 'Message sent';
  static const String storyPosted = 'Story posted successfully';
  // Validation
  static const int minPasswordLength = 8;
  static const int maxUsernameLength = 30;
  static const int maxDisplayNameLength = 50;
  static const int maxBioLength = 150;
  // Animation Durations
  static const Duration shortAnimation = Duration(milliseconds: 200);
  static const Duration mediumAnimation = Duration(milliseconds: 300);
  static const Duration longAnimation = Duration(milliseconds: 500);
  // Pagination
  static const int defaultPageSize = 20;
  static const int storiesPageSize = 10;
  static const int messagesPageSize = 50;
}
</file>

<file path="lib/core/exceptions/api_exception.dart">
enum ApiExceptionType {
  network,
  timeout,
  server,
  badRequest,
  unauthorized,
  forbidden,
  notFound,
  conflict,
  validation,
  tooManyRequests,
  cancel,
  unknown,
}
class ApiException implements Exception {
  final String message;
  final int statusCode;
  final ApiExceptionType type;
  final Map<String, dynamic>? details;
  const ApiException({
    required this.message,
    required this.statusCode,
    required this.type,
    this.details,
  });
  @override
  String toString() {
    return 'ApiException: $message (Status: $statusCode, Type: $type)';
  }
  bool get isNetworkError => type == ApiExceptionType.network;
  bool get isTimeoutError => type == ApiExceptionType.timeout;
  bool get isServerError => type == ApiExceptionType.server;
  bool get isClientError => [
        ApiExceptionType.badRequest,
        ApiExceptionType.unauthorized,
        ApiExceptionType.forbidden,
        ApiExceptionType.notFound,
        ApiExceptionType.conflict,
        ApiExceptionType.validation,
        ApiExceptionType.tooManyRequests,
      ].contains(type);
  bool get isAuthError => [
        ApiExceptionType.unauthorized,
        ApiExceptionType.forbidden,
      ].contains(type);
  bool get isValidationError => type == ApiExceptionType.validation;
}
class NetworkException extends ApiException {
  const NetworkException({
    String message = 'Network error occurred',
  }) : super(
          message: message,
          statusCode: 0,
          type: ApiExceptionType.network,
        );
}
class TimeoutException extends ApiException {
  const TimeoutException({
    String message = 'Request timeout',
  }) : super(
          message: message,
          statusCode: 408,
          type: ApiExceptionType.timeout,
        );
}
class ServerException extends ApiException {
  const ServerException({
    String message = 'Server error occurred',
    int statusCode = 500,
  }) : super(
          message: message,
          statusCode: statusCode,
          type: ApiExceptionType.server,
        );
}
class UnauthorizedException extends ApiException {
  const UnauthorizedException({
    String message = 'Authentication required',
  }) : super(
          message: message,
          statusCode: 401,
          type: ApiExceptionType.unauthorized,
        );
}
class ForbiddenException extends ApiException {
  const ForbiddenException({
    String message = 'Access forbidden',
  }) : super(
          message: message,
          statusCode: 403,
          type: ApiExceptionType.forbidden,
        );
}
class NotFoundException extends ApiException {
  const NotFoundException({
    String message = 'Resource not found',
  }) : super(
          message: message,
          statusCode: 404,
          type: ApiExceptionType.notFound,
        );
}
class ValidationException extends ApiException {
  const ValidationException({
    String message = 'Validation failed',
    Map<String, dynamic>? details,
  }) : super(
          message: message,
          statusCode: 422,
          type: ApiExceptionType.validation,
          details: details,
        );
}
class ConflictException extends ApiException {
  const ConflictException({
    String message = 'Resource conflict',
  }) : super(
          message: message,
          statusCode: 409,
          type: ApiExceptionType.conflict,
        );
}
</file>

<file path="lib/core/models/friendship.dart">
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:plant_social/core/models/user.dart';
part 'friendship.freezed.dart';
part 'friendship.g.dart';
enum FriendshipStatus {
  pending,
  accepted,
  blocked,
  declined,
}
@freezed
class Friendship with _$Friendship {
  const factory Friendship({
    required String id,
    required String requesterId,
    required String addresseeId,
    @Default(FriendshipStatus.pending) FriendshipStatus status,
    String? message,
    DateTime? acceptedAt,
    DateTime? blockedAt,
    DateTime? declinedAt,
    required DateTime createdAt,
    DateTime? updatedAt,
    // User info (populated from join)
    User? requester,
    User? addressee,
  }) = _Friendship;
  factory Friendship.fromJson(Map<String, dynamic> json) => _$FriendshipFromJson(json);
}
@freezed
class FriendRequest with _$FriendRequest {
  const factory FriendRequest({
    required String id,
    required String fromUserId,
    required String toUserId,
    String? message,
    @Default(FriendshipStatus.pending) FriendshipStatus status,
    required DateTime createdAt,
    // User info (populated from join)
    User? fromUser,
    User? toUser,
  }) = _FriendRequest;
  factory FriendRequest.fromJson(Map<String, dynamic> json) => _$FriendRequestFromJson(json);
}
@freezed
class SendFriendRequestRequest with _$SendFriendRequestRequest {
  const factory SendFriendRequestRequest({
    required String toUserId,
    String? message,
  }) = _SendFriendRequestRequest;
  factory SendFriendRequestRequest.fromJson(Map<String, dynamic> json) => _$SendFriendRequestRequestFromJson(json);
}
@freezed
class FriendshipResponse with _$FriendshipResponse {
  const factory FriendshipResponse({
    required String friendshipId,
    required FriendshipStatus status,
  }) = _FriendshipResponse;
  factory FriendshipResponse.fromJson(Map<String, dynamic> json) => _$FriendshipResponseFromJson(json);
}
@freezed
class FriendsList with _$FriendsList {
  const factory FriendsList({
    @Default([]) List<User> friends,
    @Default(0) int totalCount,
    @Default(false) bool hasMore,
    String? nextCursor,
  }) = _FriendsList;
  factory FriendsList.fromJson(Map<String, dynamic> json) => _$FriendsListFromJson(json);
}
@freezed
class FriendRequestsList with _$FriendRequestsList {
  const factory FriendRequestsList({
    @Default([]) List<FriendRequest> requests,
    @Default(0) int totalCount,
    @Default(false) bool hasMore,
    String? nextCursor,
  }) = _FriendRequestsList;
  factory FriendRequestsList.fromJson(Map<String, dynamic> json) => _$FriendRequestsListFromJson(json);
}
@freezed
class MutualFriends with _$MutualFriends {
  const factory MutualFriends({
    @Default([]) List<User> friends,
    @Default(0) int count,
  }) = _MutualFriends;
  factory MutualFriends.fromJson(Map<String, dynamic> json) => _$MutualFriendsFromJson(json);
}
</file>

<file path="lib/core/models/friendship.freezed.dart">
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark
part of 'friendship.dart';
// **************************************************************************
// FreezedGenerator
// **************************************************************************
T _$identity<T>(T value) => value;
final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');
Friendship _$FriendshipFromJson(Map<String, dynamic> json) {
  return _Friendship.fromJson(json);
}
/// @nodoc
mixin _$Friendship {
  String get id => throw _privateConstructorUsedError;
  String get requesterId => throw _privateConstructorUsedError;
  String get addresseeId => throw _privateConstructorUsedError;
  FriendshipStatus get status => throw _privateConstructorUsedError;
  String? get message => throw _privateConstructorUsedError;
  DateTime? get acceptedAt => throw _privateConstructorUsedError;
  DateTime? get blockedAt => throw _privateConstructorUsedError;
  DateTime? get declinedAt => throw _privateConstructorUsedError;
  DateTime get createdAt => throw _privateConstructorUsedError;
  DateTime? get updatedAt =>
      throw _privateConstructorUsedError; // User info (populated from join)
  User? get requester => throw _privateConstructorUsedError;
  User? get addressee => throw _privateConstructorUsedError;
  /// Serializes this Friendship to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of Friendship
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $FriendshipCopyWith<Friendship> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $FriendshipCopyWith<$Res> {
  factory $FriendshipCopyWith(
          Friendship value, $Res Function(Friendship) then) =
      _$FriendshipCopyWithImpl<$Res, Friendship>;
  @useResult
  $Res call(
      {String id,
      String requesterId,
      String addresseeId,
      FriendshipStatus status,
      String? message,
      DateTime? acceptedAt,
      DateTime? blockedAt,
      DateTime? declinedAt,
      DateTime createdAt,
      DateTime? updatedAt,
      User? requester,
      User? addressee});
  $UserCopyWith<$Res>? get requester;
  $UserCopyWith<$Res>? get addressee;
}
/// @nodoc
class _$FriendshipCopyWithImpl<$Res, $Val extends Friendship>
    implements $FriendshipCopyWith<$Res> {
  _$FriendshipCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of Friendship
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? requesterId = null,
    Object? addresseeId = null,
    Object? status = null,
    Object? message = freezed,
    Object? acceptedAt = freezed,
    Object? blockedAt = freezed,
    Object? declinedAt = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? requester = freezed,
    Object? addressee = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      requesterId: null == requesterId
          ? _value.requesterId
          : requesterId // ignore: cast_nullable_to_non_nullable
              as String,
      addresseeId: null == addresseeId
          ? _value.addresseeId
          : addresseeId // ignore: cast_nullable_to_non_nullable
              as String,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as FriendshipStatus,
      message: freezed == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String?,
      acceptedAt: freezed == acceptedAt
          ? _value.acceptedAt
          : acceptedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      blockedAt: freezed == blockedAt
          ? _value.blockedAt
          : blockedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      declinedAt: freezed == declinedAt
          ? _value.declinedAt
          : declinedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      requester: freezed == requester
          ? _value.requester
          : requester // ignore: cast_nullable_to_non_nullable
              as User?,
      addressee: freezed == addressee
          ? _value.addressee
          : addressee // ignore: cast_nullable_to_non_nullable
              as User?,
    ) as $Val);
  }
  /// Create a copy of Friendship
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get requester {
    if (_value.requester == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.requester!, (value) {
      return _then(_value.copyWith(requester: value) as $Val);
    });
  }
  /// Create a copy of Friendship
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get addressee {
    if (_value.addressee == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.addressee!, (value) {
      return _then(_value.copyWith(addressee: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$FriendshipImplCopyWith<$Res>
    implements $FriendshipCopyWith<$Res> {
  factory _$$FriendshipImplCopyWith(
          _$FriendshipImpl value, $Res Function(_$FriendshipImpl) then) =
      __$$FriendshipImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String requesterId,
      String addresseeId,
      FriendshipStatus status,
      String? message,
      DateTime? acceptedAt,
      DateTime? blockedAt,
      DateTime? declinedAt,
      DateTime createdAt,
      DateTime? updatedAt,
      User? requester,
      User? addressee});
  @override
  $UserCopyWith<$Res>? get requester;
  @override
  $UserCopyWith<$Res>? get addressee;
}
/// @nodoc
class __$$FriendshipImplCopyWithImpl<$Res>
    extends _$FriendshipCopyWithImpl<$Res, _$FriendshipImpl>
    implements _$$FriendshipImplCopyWith<$Res> {
  __$$FriendshipImplCopyWithImpl(
      _$FriendshipImpl _value, $Res Function(_$FriendshipImpl) _then)
      : super(_value, _then);
  /// Create a copy of Friendship
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? requesterId = null,
    Object? addresseeId = null,
    Object? status = null,
    Object? message = freezed,
    Object? acceptedAt = freezed,
    Object? blockedAt = freezed,
    Object? declinedAt = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? requester = freezed,
    Object? addressee = freezed,
  }) {
    return _then(_$FriendshipImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      requesterId: null == requesterId
          ? _value.requesterId
          : requesterId // ignore: cast_nullable_to_non_nullable
              as String,
      addresseeId: null == addresseeId
          ? _value.addresseeId
          : addresseeId // ignore: cast_nullable_to_non_nullable
              as String,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as FriendshipStatus,
      message: freezed == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String?,
      acceptedAt: freezed == acceptedAt
          ? _value.acceptedAt
          : acceptedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      blockedAt: freezed == blockedAt
          ? _value.blockedAt
          : blockedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      declinedAt: freezed == declinedAt
          ? _value.declinedAt
          : declinedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      requester: freezed == requester
          ? _value.requester
          : requester // ignore: cast_nullable_to_non_nullable
              as User?,
      addressee: freezed == addressee
          ? _value.addressee
          : addressee // ignore: cast_nullable_to_non_nullable
              as User?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$FriendshipImpl implements _Friendship {
  const _$FriendshipImpl(
      {required this.id,
      required this.requesterId,
      required this.addresseeId,
      this.status = FriendshipStatus.pending,
      this.message,
      this.acceptedAt,
      this.blockedAt,
      this.declinedAt,
      required this.createdAt,
      this.updatedAt,
      this.requester,
      this.addressee});
  factory _$FriendshipImpl.fromJson(Map<String, dynamic> json) =>
      _$$FriendshipImplFromJson(json);
  @override
  final String id;
  @override
  final String requesterId;
  @override
  final String addresseeId;
  @override
  @JsonKey()
  final FriendshipStatus status;
  @override
  final String? message;
  @override
  final DateTime? acceptedAt;
  @override
  final DateTime? blockedAt;
  @override
  final DateTime? declinedAt;
  @override
  final DateTime createdAt;
  @override
  final DateTime? updatedAt;
// User info (populated from join)
  @override
  final User? requester;
  @override
  final User? addressee;
  @override
  String toString() {
    return 'Friendship(id: $id, requesterId: $requesterId, addresseeId: $addresseeId, status: $status, message: $message, acceptedAt: $acceptedAt, blockedAt: $blockedAt, declinedAt: $declinedAt, createdAt: $createdAt, updatedAt: $updatedAt, requester: $requester, addressee: $addressee)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FriendshipImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.requesterId, requesterId) ||
                other.requesterId == requesterId) &&
            (identical(other.addresseeId, addresseeId) ||
                other.addresseeId == addresseeId) &&
            (identical(other.status, status) || other.status == status) &&
            (identical(other.message, message) || other.message == message) &&
            (identical(other.acceptedAt, acceptedAt) ||
                other.acceptedAt == acceptedAt) &&
            (identical(other.blockedAt, blockedAt) ||
                other.blockedAt == blockedAt) &&
            (identical(other.declinedAt, declinedAt) ||
                other.declinedAt == declinedAt) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.updatedAt, updatedAt) ||
                other.updatedAt == updatedAt) &&
            (identical(other.requester, requester) ||
                other.requester == requester) &&
            (identical(other.addressee, addressee) ||
                other.addressee == addressee));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      requesterId,
      addresseeId,
      status,
      message,
      acceptedAt,
      blockedAt,
      declinedAt,
      createdAt,
      updatedAt,
      requester,
      addressee);
  /// Create a copy of Friendship
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FriendshipImplCopyWith<_$FriendshipImpl> get copyWith =>
      __$$FriendshipImplCopyWithImpl<_$FriendshipImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$FriendshipImplToJson(
      this,
    );
  }
}
abstract class _Friendship implements Friendship {
  const factory _Friendship(
      {required final String id,
      required final String requesterId,
      required final String addresseeId,
      final FriendshipStatus status,
      final String? message,
      final DateTime? acceptedAt,
      final DateTime? blockedAt,
      final DateTime? declinedAt,
      required final DateTime createdAt,
      final DateTime? updatedAt,
      final User? requester,
      final User? addressee}) = _$FriendshipImpl;
  factory _Friendship.fromJson(Map<String, dynamic> json) =
      _$FriendshipImpl.fromJson;
  @override
  String get id;
  @override
  String get requesterId;
  @override
  String get addresseeId;
  @override
  FriendshipStatus get status;
  @override
  String? get message;
  @override
  DateTime? get acceptedAt;
  @override
  DateTime? get blockedAt;
  @override
  DateTime? get declinedAt;
  @override
  DateTime get createdAt;
  @override
  DateTime? get updatedAt; // User info (populated from join)
  @override
  User? get requester;
  @override
  User? get addressee;
  /// Create a copy of Friendship
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FriendshipImplCopyWith<_$FriendshipImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
FriendRequest _$FriendRequestFromJson(Map<String, dynamic> json) {
  return _FriendRequest.fromJson(json);
}
/// @nodoc
mixin _$FriendRequest {
  String get id => throw _privateConstructorUsedError;
  String get fromUserId => throw _privateConstructorUsedError;
  String get toUserId => throw _privateConstructorUsedError;
  String? get message => throw _privateConstructorUsedError;
  FriendshipStatus get status => throw _privateConstructorUsedError;
  DateTime get createdAt =>
      throw _privateConstructorUsedError; // User info (populated from join)
  User? get fromUser => throw _privateConstructorUsedError;
  User? get toUser => throw _privateConstructorUsedError;
  /// Serializes this FriendRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of FriendRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $FriendRequestCopyWith<FriendRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $FriendRequestCopyWith<$Res> {
  factory $FriendRequestCopyWith(
          FriendRequest value, $Res Function(FriendRequest) then) =
      _$FriendRequestCopyWithImpl<$Res, FriendRequest>;
  @useResult
  $Res call(
      {String id,
      String fromUserId,
      String toUserId,
      String? message,
      FriendshipStatus status,
      DateTime createdAt,
      User? fromUser,
      User? toUser});
  $UserCopyWith<$Res>? get fromUser;
  $UserCopyWith<$Res>? get toUser;
}
/// @nodoc
class _$FriendRequestCopyWithImpl<$Res, $Val extends FriendRequest>
    implements $FriendRequestCopyWith<$Res> {
  _$FriendRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of FriendRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? fromUserId = null,
    Object? toUserId = null,
    Object? message = freezed,
    Object? status = null,
    Object? createdAt = null,
    Object? fromUser = freezed,
    Object? toUser = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      fromUserId: null == fromUserId
          ? _value.fromUserId
          : fromUserId // ignore: cast_nullable_to_non_nullable
              as String,
      toUserId: null == toUserId
          ? _value.toUserId
          : toUserId // ignore: cast_nullable_to_non_nullable
              as String,
      message: freezed == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String?,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as FriendshipStatus,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      fromUser: freezed == fromUser
          ? _value.fromUser
          : fromUser // ignore: cast_nullable_to_non_nullable
              as User?,
      toUser: freezed == toUser
          ? _value.toUser
          : toUser // ignore: cast_nullable_to_non_nullable
              as User?,
    ) as $Val);
  }
  /// Create a copy of FriendRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get fromUser {
    if (_value.fromUser == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.fromUser!, (value) {
      return _then(_value.copyWith(fromUser: value) as $Val);
    });
  }
  /// Create a copy of FriendRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get toUser {
    if (_value.toUser == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.toUser!, (value) {
      return _then(_value.copyWith(toUser: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$FriendRequestImplCopyWith<$Res>
    implements $FriendRequestCopyWith<$Res> {
  factory _$$FriendRequestImplCopyWith(
          _$FriendRequestImpl value, $Res Function(_$FriendRequestImpl) then) =
      __$$FriendRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String fromUserId,
      String toUserId,
      String? message,
      FriendshipStatus status,
      DateTime createdAt,
      User? fromUser,
      User? toUser});
  @override
  $UserCopyWith<$Res>? get fromUser;
  @override
  $UserCopyWith<$Res>? get toUser;
}
/// @nodoc
class __$$FriendRequestImplCopyWithImpl<$Res>
    extends _$FriendRequestCopyWithImpl<$Res, _$FriendRequestImpl>
    implements _$$FriendRequestImplCopyWith<$Res> {
  __$$FriendRequestImplCopyWithImpl(
      _$FriendRequestImpl _value, $Res Function(_$FriendRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of FriendRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? fromUserId = null,
    Object? toUserId = null,
    Object? message = freezed,
    Object? status = null,
    Object? createdAt = null,
    Object? fromUser = freezed,
    Object? toUser = freezed,
  }) {
    return _then(_$FriendRequestImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      fromUserId: null == fromUserId
          ? _value.fromUserId
          : fromUserId // ignore: cast_nullable_to_non_nullable
              as String,
      toUserId: null == toUserId
          ? _value.toUserId
          : toUserId // ignore: cast_nullable_to_non_nullable
              as String,
      message: freezed == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String?,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as FriendshipStatus,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      fromUser: freezed == fromUser
          ? _value.fromUser
          : fromUser // ignore: cast_nullable_to_non_nullable
              as User?,
      toUser: freezed == toUser
          ? _value.toUser
          : toUser // ignore: cast_nullable_to_non_nullable
              as User?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$FriendRequestImpl implements _FriendRequest {
  const _$FriendRequestImpl(
      {required this.id,
      required this.fromUserId,
      required this.toUserId,
      this.message,
      this.status = FriendshipStatus.pending,
      required this.createdAt,
      this.fromUser,
      this.toUser});
  factory _$FriendRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$FriendRequestImplFromJson(json);
  @override
  final String id;
  @override
  final String fromUserId;
  @override
  final String toUserId;
  @override
  final String? message;
  @override
  @JsonKey()
  final FriendshipStatus status;
  @override
  final DateTime createdAt;
// User info (populated from join)
  @override
  final User? fromUser;
  @override
  final User? toUser;
  @override
  String toString() {
    return 'FriendRequest(id: $id, fromUserId: $fromUserId, toUserId: $toUserId, message: $message, status: $status, createdAt: $createdAt, fromUser: $fromUser, toUser: $toUser)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FriendRequestImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.fromUserId, fromUserId) ||
                other.fromUserId == fromUserId) &&
            (identical(other.toUserId, toUserId) ||
                other.toUserId == toUserId) &&
            (identical(other.message, message) || other.message == message) &&
            (identical(other.status, status) || other.status == status) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.fromUser, fromUser) ||
                other.fromUser == fromUser) &&
            (identical(other.toUser, toUser) || other.toUser == toUser));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, fromUserId, toUserId,
      message, status, createdAt, fromUser, toUser);
  /// Create a copy of FriendRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FriendRequestImplCopyWith<_$FriendRequestImpl> get copyWith =>
      __$$FriendRequestImplCopyWithImpl<_$FriendRequestImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$FriendRequestImplToJson(
      this,
    );
  }
}
abstract class _FriendRequest implements FriendRequest {
  const factory _FriendRequest(
      {required final String id,
      required final String fromUserId,
      required final String toUserId,
      final String? message,
      final FriendshipStatus status,
      required final DateTime createdAt,
      final User? fromUser,
      final User? toUser}) = _$FriendRequestImpl;
  factory _FriendRequest.fromJson(Map<String, dynamic> json) =
      _$FriendRequestImpl.fromJson;
  @override
  String get id;
  @override
  String get fromUserId;
  @override
  String get toUserId;
  @override
  String? get message;
  @override
  FriendshipStatus get status;
  @override
  DateTime get createdAt; // User info (populated from join)
  @override
  User? get fromUser;
  @override
  User? get toUser;
  /// Create a copy of FriendRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FriendRequestImplCopyWith<_$FriendRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
SendFriendRequestRequest _$SendFriendRequestRequestFromJson(
    Map<String, dynamic> json) {
  return _SendFriendRequestRequest.fromJson(json);
}
/// @nodoc
mixin _$SendFriendRequestRequest {
  String get toUserId => throw _privateConstructorUsedError;
  String? get message => throw _privateConstructorUsedError;
  /// Serializes this SendFriendRequestRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of SendFriendRequestRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $SendFriendRequestRequestCopyWith<SendFriendRequestRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $SendFriendRequestRequestCopyWith<$Res> {
  factory $SendFriendRequestRequestCopyWith(SendFriendRequestRequest value,
          $Res Function(SendFriendRequestRequest) then) =
      _$SendFriendRequestRequestCopyWithImpl<$Res, SendFriendRequestRequest>;
  @useResult
  $Res call({String toUserId, String? message});
}
/// @nodoc
class _$SendFriendRequestRequestCopyWithImpl<$Res,
        $Val extends SendFriendRequestRequest>
    implements $SendFriendRequestRequestCopyWith<$Res> {
  _$SendFriendRequestRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of SendFriendRequestRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? toUserId = null,
    Object? message = freezed,
  }) {
    return _then(_value.copyWith(
      toUserId: null == toUserId
          ? _value.toUserId
          : toUserId // ignore: cast_nullable_to_non_nullable
              as String,
      message: freezed == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$SendFriendRequestRequestImplCopyWith<$Res>
    implements $SendFriendRequestRequestCopyWith<$Res> {
  factory _$$SendFriendRequestRequestImplCopyWith(
          _$SendFriendRequestRequestImpl value,
          $Res Function(_$SendFriendRequestRequestImpl) then) =
      __$$SendFriendRequestRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String toUserId, String? message});
}
/// @nodoc
class __$$SendFriendRequestRequestImplCopyWithImpl<$Res>
    extends _$SendFriendRequestRequestCopyWithImpl<$Res,
        _$SendFriendRequestRequestImpl>
    implements _$$SendFriendRequestRequestImplCopyWith<$Res> {
  __$$SendFriendRequestRequestImplCopyWithImpl(
      _$SendFriendRequestRequestImpl _value,
      $Res Function(_$SendFriendRequestRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of SendFriendRequestRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? toUserId = null,
    Object? message = freezed,
  }) {
    return _then(_$SendFriendRequestRequestImpl(
      toUserId: null == toUserId
          ? _value.toUserId
          : toUserId // ignore: cast_nullable_to_non_nullable
              as String,
      message: freezed == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$SendFriendRequestRequestImpl implements _SendFriendRequestRequest {
  const _$SendFriendRequestRequestImpl({required this.toUserId, this.message});
  factory _$SendFriendRequestRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$SendFriendRequestRequestImplFromJson(json);
  @override
  final String toUserId;
  @override
  final String? message;
  @override
  String toString() {
    return 'SendFriendRequestRequest(toUserId: $toUserId, message: $message)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SendFriendRequestRequestImpl &&
            (identical(other.toUserId, toUserId) ||
                other.toUserId == toUserId) &&
            (identical(other.message, message) || other.message == message));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, toUserId, message);
  /// Create a copy of SendFriendRequestRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SendFriendRequestRequestImplCopyWith<_$SendFriendRequestRequestImpl>
      get copyWith => __$$SendFriendRequestRequestImplCopyWithImpl<
          _$SendFriendRequestRequestImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$SendFriendRequestRequestImplToJson(
      this,
    );
  }
}
abstract class _SendFriendRequestRequest implements SendFriendRequestRequest {
  const factory _SendFriendRequestRequest(
      {required final String toUserId,
      final String? message}) = _$SendFriendRequestRequestImpl;
  factory _SendFriendRequestRequest.fromJson(Map<String, dynamic> json) =
      _$SendFriendRequestRequestImpl.fromJson;
  @override
  String get toUserId;
  @override
  String? get message;
  /// Create a copy of SendFriendRequestRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SendFriendRequestRequestImplCopyWith<_$SendFriendRequestRequestImpl>
      get copyWith => throw _privateConstructorUsedError;
}
FriendshipResponse _$FriendshipResponseFromJson(Map<String, dynamic> json) {
  return _FriendshipResponse.fromJson(json);
}
/// @nodoc
mixin _$FriendshipResponse {
  String get friendshipId => throw _privateConstructorUsedError;
  FriendshipStatus get status => throw _privateConstructorUsedError;
  /// Serializes this FriendshipResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of FriendshipResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $FriendshipResponseCopyWith<FriendshipResponse> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $FriendshipResponseCopyWith<$Res> {
  factory $FriendshipResponseCopyWith(
          FriendshipResponse value, $Res Function(FriendshipResponse) then) =
      _$FriendshipResponseCopyWithImpl<$Res, FriendshipResponse>;
  @useResult
  $Res call({String friendshipId, FriendshipStatus status});
}
/// @nodoc
class _$FriendshipResponseCopyWithImpl<$Res, $Val extends FriendshipResponse>
    implements $FriendshipResponseCopyWith<$Res> {
  _$FriendshipResponseCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of FriendshipResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? friendshipId = null,
    Object? status = null,
  }) {
    return _then(_value.copyWith(
      friendshipId: null == friendshipId
          ? _value.friendshipId
          : friendshipId // ignore: cast_nullable_to_non_nullable
              as String,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as FriendshipStatus,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$FriendshipResponseImplCopyWith<$Res>
    implements $FriendshipResponseCopyWith<$Res> {
  factory _$$FriendshipResponseImplCopyWith(_$FriendshipResponseImpl value,
          $Res Function(_$FriendshipResponseImpl) then) =
      __$$FriendshipResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String friendshipId, FriendshipStatus status});
}
/// @nodoc
class __$$FriendshipResponseImplCopyWithImpl<$Res>
    extends _$FriendshipResponseCopyWithImpl<$Res, _$FriendshipResponseImpl>
    implements _$$FriendshipResponseImplCopyWith<$Res> {
  __$$FriendshipResponseImplCopyWithImpl(_$FriendshipResponseImpl _value,
      $Res Function(_$FriendshipResponseImpl) _then)
      : super(_value, _then);
  /// Create a copy of FriendshipResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? friendshipId = null,
    Object? status = null,
  }) {
    return _then(_$FriendshipResponseImpl(
      friendshipId: null == friendshipId
          ? _value.friendshipId
          : friendshipId // ignore: cast_nullable_to_non_nullable
              as String,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as FriendshipStatus,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$FriendshipResponseImpl implements _FriendshipResponse {
  const _$FriendshipResponseImpl(
      {required this.friendshipId, required this.status});
  factory _$FriendshipResponseImpl.fromJson(Map<String, dynamic> json) =>
      _$$FriendshipResponseImplFromJson(json);
  @override
  final String friendshipId;
  @override
  final FriendshipStatus status;
  @override
  String toString() {
    return 'FriendshipResponse(friendshipId: $friendshipId, status: $status)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FriendshipResponseImpl &&
            (identical(other.friendshipId, friendshipId) ||
                other.friendshipId == friendshipId) &&
            (identical(other.status, status) || other.status == status));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, friendshipId, status);
  /// Create a copy of FriendshipResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FriendshipResponseImplCopyWith<_$FriendshipResponseImpl> get copyWith =>
      __$$FriendshipResponseImplCopyWithImpl<_$FriendshipResponseImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$FriendshipResponseImplToJson(
      this,
    );
  }
}
abstract class _FriendshipResponse implements FriendshipResponse {
  const factory _FriendshipResponse(
      {required final String friendshipId,
      required final FriendshipStatus status}) = _$FriendshipResponseImpl;
  factory _FriendshipResponse.fromJson(Map<String, dynamic> json) =
      _$FriendshipResponseImpl.fromJson;
  @override
  String get friendshipId;
  @override
  FriendshipStatus get status;
  /// Create a copy of FriendshipResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FriendshipResponseImplCopyWith<_$FriendshipResponseImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
FriendsList _$FriendsListFromJson(Map<String, dynamic> json) {
  return _FriendsList.fromJson(json);
}
/// @nodoc
mixin _$FriendsList {
  List<User> get friends => throw _privateConstructorUsedError;
  int get totalCount => throw _privateConstructorUsedError;
  bool get hasMore => throw _privateConstructorUsedError;
  String? get nextCursor => throw _privateConstructorUsedError;
  /// Serializes this FriendsList to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of FriendsList
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $FriendsListCopyWith<FriendsList> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $FriendsListCopyWith<$Res> {
  factory $FriendsListCopyWith(
          FriendsList value, $Res Function(FriendsList) then) =
      _$FriendsListCopyWithImpl<$Res, FriendsList>;
  @useResult
  $Res call(
      {List<User> friends, int totalCount, bool hasMore, String? nextCursor});
}
/// @nodoc
class _$FriendsListCopyWithImpl<$Res, $Val extends FriendsList>
    implements $FriendsListCopyWith<$Res> {
  _$FriendsListCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of FriendsList
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? friends = null,
    Object? totalCount = null,
    Object? hasMore = null,
    Object? nextCursor = freezed,
  }) {
    return _then(_value.copyWith(
      friends: null == friends
          ? _value.friends
          : friends // ignore: cast_nullable_to_non_nullable
              as List<User>,
      totalCount: null == totalCount
          ? _value.totalCount
          : totalCount // ignore: cast_nullable_to_non_nullable
              as int,
      hasMore: null == hasMore
          ? _value.hasMore
          : hasMore // ignore: cast_nullable_to_non_nullable
              as bool,
      nextCursor: freezed == nextCursor
          ? _value.nextCursor
          : nextCursor // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$FriendsListImplCopyWith<$Res>
    implements $FriendsListCopyWith<$Res> {
  factory _$$FriendsListImplCopyWith(
          _$FriendsListImpl value, $Res Function(_$FriendsListImpl) then) =
      __$$FriendsListImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {List<User> friends, int totalCount, bool hasMore, String? nextCursor});
}
/// @nodoc
class __$$FriendsListImplCopyWithImpl<$Res>
    extends _$FriendsListCopyWithImpl<$Res, _$FriendsListImpl>
    implements _$$FriendsListImplCopyWith<$Res> {
  __$$FriendsListImplCopyWithImpl(
      _$FriendsListImpl _value, $Res Function(_$FriendsListImpl) _then)
      : super(_value, _then);
  /// Create a copy of FriendsList
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? friends = null,
    Object? totalCount = null,
    Object? hasMore = null,
    Object? nextCursor = freezed,
  }) {
    return _then(_$FriendsListImpl(
      friends: null == friends
          ? _value._friends
          : friends // ignore: cast_nullable_to_non_nullable
              as List<User>,
      totalCount: null == totalCount
          ? _value.totalCount
          : totalCount // ignore: cast_nullable_to_non_nullable
              as int,
      hasMore: null == hasMore
          ? _value.hasMore
          : hasMore // ignore: cast_nullable_to_non_nullable
              as bool,
      nextCursor: freezed == nextCursor
          ? _value.nextCursor
          : nextCursor // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$FriendsListImpl implements _FriendsList {
  const _$FriendsListImpl(
      {final List<User> friends = const [],
      this.totalCount = 0,
      this.hasMore = false,
      this.nextCursor})
      : _friends = friends;
  factory _$FriendsListImpl.fromJson(Map<String, dynamic> json) =>
      _$$FriendsListImplFromJson(json);
  final List<User> _friends;
  @override
  @JsonKey()
  List<User> get friends {
    if (_friends is EqualUnmodifiableListView) return _friends;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_friends);
  }
  @override
  @JsonKey()
  final int totalCount;
  @override
  @JsonKey()
  final bool hasMore;
  @override
  final String? nextCursor;
  @override
  String toString() {
    return 'FriendsList(friends: $friends, totalCount: $totalCount, hasMore: $hasMore, nextCursor: $nextCursor)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FriendsListImpl &&
            const DeepCollectionEquality().equals(other._friends, _friends) &&
            (identical(other.totalCount, totalCount) ||
                other.totalCount == totalCount) &&
            (identical(other.hasMore, hasMore) || other.hasMore == hasMore) &&
            (identical(other.nextCursor, nextCursor) ||
                other.nextCursor == nextCursor));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      const DeepCollectionEquality().hash(_friends),
      totalCount,
      hasMore,
      nextCursor);
  /// Create a copy of FriendsList
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FriendsListImplCopyWith<_$FriendsListImpl> get copyWith =>
      __$$FriendsListImplCopyWithImpl<_$FriendsListImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$FriendsListImplToJson(
      this,
    );
  }
}
abstract class _FriendsList implements FriendsList {
  const factory _FriendsList(
      {final List<User> friends,
      final int totalCount,
      final bool hasMore,
      final String? nextCursor}) = _$FriendsListImpl;
  factory _FriendsList.fromJson(Map<String, dynamic> json) =
      _$FriendsListImpl.fromJson;
  @override
  List<User> get friends;
  @override
  int get totalCount;
  @override
  bool get hasMore;
  @override
  String? get nextCursor;
  /// Create a copy of FriendsList
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FriendsListImplCopyWith<_$FriendsListImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
FriendRequestsList _$FriendRequestsListFromJson(Map<String, dynamic> json) {
  return _FriendRequestsList.fromJson(json);
}
/// @nodoc
mixin _$FriendRequestsList {
  List<FriendRequest> get requests => throw _privateConstructorUsedError;
  int get totalCount => throw _privateConstructorUsedError;
  bool get hasMore => throw _privateConstructorUsedError;
  String? get nextCursor => throw _privateConstructorUsedError;
  /// Serializes this FriendRequestsList to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of FriendRequestsList
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $FriendRequestsListCopyWith<FriendRequestsList> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $FriendRequestsListCopyWith<$Res> {
  factory $FriendRequestsListCopyWith(
          FriendRequestsList value, $Res Function(FriendRequestsList) then) =
      _$FriendRequestsListCopyWithImpl<$Res, FriendRequestsList>;
  @useResult
  $Res call(
      {List<FriendRequest> requests,
      int totalCount,
      bool hasMore,
      String? nextCursor});
}
/// @nodoc
class _$FriendRequestsListCopyWithImpl<$Res, $Val extends FriendRequestsList>
    implements $FriendRequestsListCopyWith<$Res> {
  _$FriendRequestsListCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of FriendRequestsList
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? requests = null,
    Object? totalCount = null,
    Object? hasMore = null,
    Object? nextCursor = freezed,
  }) {
    return _then(_value.copyWith(
      requests: null == requests
          ? _value.requests
          : requests // ignore: cast_nullable_to_non_nullable
              as List<FriendRequest>,
      totalCount: null == totalCount
          ? _value.totalCount
          : totalCount // ignore: cast_nullable_to_non_nullable
              as int,
      hasMore: null == hasMore
          ? _value.hasMore
          : hasMore // ignore: cast_nullable_to_non_nullable
              as bool,
      nextCursor: freezed == nextCursor
          ? _value.nextCursor
          : nextCursor // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$FriendRequestsListImplCopyWith<$Res>
    implements $FriendRequestsListCopyWith<$Res> {
  factory _$$FriendRequestsListImplCopyWith(_$FriendRequestsListImpl value,
          $Res Function(_$FriendRequestsListImpl) then) =
      __$$FriendRequestsListImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {List<FriendRequest> requests,
      int totalCount,
      bool hasMore,
      String? nextCursor});
}
/// @nodoc
class __$$FriendRequestsListImplCopyWithImpl<$Res>
    extends _$FriendRequestsListCopyWithImpl<$Res, _$FriendRequestsListImpl>
    implements _$$FriendRequestsListImplCopyWith<$Res> {
  __$$FriendRequestsListImplCopyWithImpl(_$FriendRequestsListImpl _value,
      $Res Function(_$FriendRequestsListImpl) _then)
      : super(_value, _then);
  /// Create a copy of FriendRequestsList
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? requests = null,
    Object? totalCount = null,
    Object? hasMore = null,
    Object? nextCursor = freezed,
  }) {
    return _then(_$FriendRequestsListImpl(
      requests: null == requests
          ? _value._requests
          : requests // ignore: cast_nullable_to_non_nullable
              as List<FriendRequest>,
      totalCount: null == totalCount
          ? _value.totalCount
          : totalCount // ignore: cast_nullable_to_non_nullable
              as int,
      hasMore: null == hasMore
          ? _value.hasMore
          : hasMore // ignore: cast_nullable_to_non_nullable
              as bool,
      nextCursor: freezed == nextCursor
          ? _value.nextCursor
          : nextCursor // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$FriendRequestsListImpl implements _FriendRequestsList {
  const _$FriendRequestsListImpl(
      {final List<FriendRequest> requests = const [],
      this.totalCount = 0,
      this.hasMore = false,
      this.nextCursor})
      : _requests = requests;
  factory _$FriendRequestsListImpl.fromJson(Map<String, dynamic> json) =>
      _$$FriendRequestsListImplFromJson(json);
  final List<FriendRequest> _requests;
  @override
  @JsonKey()
  List<FriendRequest> get requests {
    if (_requests is EqualUnmodifiableListView) return _requests;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_requests);
  }
  @override
  @JsonKey()
  final int totalCount;
  @override
  @JsonKey()
  final bool hasMore;
  @override
  final String? nextCursor;
  @override
  String toString() {
    return 'FriendRequestsList(requests: $requests, totalCount: $totalCount, hasMore: $hasMore, nextCursor: $nextCursor)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FriendRequestsListImpl &&
            const DeepCollectionEquality().equals(other._requests, _requests) &&
            (identical(other.totalCount, totalCount) ||
                other.totalCount == totalCount) &&
            (identical(other.hasMore, hasMore) || other.hasMore == hasMore) &&
            (identical(other.nextCursor, nextCursor) ||
                other.nextCursor == nextCursor));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      const DeepCollectionEquality().hash(_requests),
      totalCount,
      hasMore,
      nextCursor);
  /// Create a copy of FriendRequestsList
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FriendRequestsListImplCopyWith<_$FriendRequestsListImpl> get copyWith =>
      __$$FriendRequestsListImplCopyWithImpl<_$FriendRequestsListImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$FriendRequestsListImplToJson(
      this,
    );
  }
}
abstract class _FriendRequestsList implements FriendRequestsList {
  const factory _FriendRequestsList(
      {final List<FriendRequest> requests,
      final int totalCount,
      final bool hasMore,
      final String? nextCursor}) = _$FriendRequestsListImpl;
  factory _FriendRequestsList.fromJson(Map<String, dynamic> json) =
      _$FriendRequestsListImpl.fromJson;
  @override
  List<FriendRequest> get requests;
  @override
  int get totalCount;
  @override
  bool get hasMore;
  @override
  String? get nextCursor;
  /// Create a copy of FriendRequestsList
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FriendRequestsListImplCopyWith<_$FriendRequestsListImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
MutualFriends _$MutualFriendsFromJson(Map<String, dynamic> json) {
  return _MutualFriends.fromJson(json);
}
/// @nodoc
mixin _$MutualFriends {
  List<User> get friends => throw _privateConstructorUsedError;
  int get count => throw _privateConstructorUsedError;
  /// Serializes this MutualFriends to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of MutualFriends
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $MutualFriendsCopyWith<MutualFriends> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $MutualFriendsCopyWith<$Res> {
  factory $MutualFriendsCopyWith(
          MutualFriends value, $Res Function(MutualFriends) then) =
      _$MutualFriendsCopyWithImpl<$Res, MutualFriends>;
  @useResult
  $Res call({List<User> friends, int count});
}
/// @nodoc
class _$MutualFriendsCopyWithImpl<$Res, $Val extends MutualFriends>
    implements $MutualFriendsCopyWith<$Res> {
  _$MutualFriendsCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of MutualFriends
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? friends = null,
    Object? count = null,
  }) {
    return _then(_value.copyWith(
      friends: null == friends
          ? _value.friends
          : friends // ignore: cast_nullable_to_non_nullable
              as List<User>,
      count: null == count
          ? _value.count
          : count // ignore: cast_nullable_to_non_nullable
              as int,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$MutualFriendsImplCopyWith<$Res>
    implements $MutualFriendsCopyWith<$Res> {
  factory _$$MutualFriendsImplCopyWith(
          _$MutualFriendsImpl value, $Res Function(_$MutualFriendsImpl) then) =
      __$$MutualFriendsImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({List<User> friends, int count});
}
/// @nodoc
class __$$MutualFriendsImplCopyWithImpl<$Res>
    extends _$MutualFriendsCopyWithImpl<$Res, _$MutualFriendsImpl>
    implements _$$MutualFriendsImplCopyWith<$Res> {
  __$$MutualFriendsImplCopyWithImpl(
      _$MutualFriendsImpl _value, $Res Function(_$MutualFriendsImpl) _then)
      : super(_value, _then);
  /// Create a copy of MutualFriends
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? friends = null,
    Object? count = null,
  }) {
    return _then(_$MutualFriendsImpl(
      friends: null == friends
          ? _value._friends
          : friends // ignore: cast_nullable_to_non_nullable
              as List<User>,
      count: null == count
          ? _value.count
          : count // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$MutualFriendsImpl implements _MutualFriends {
  const _$MutualFriendsImpl(
      {final List<User> friends = const [], this.count = 0})
      : _friends = friends;
  factory _$MutualFriendsImpl.fromJson(Map<String, dynamic> json) =>
      _$$MutualFriendsImplFromJson(json);
  final List<User> _friends;
  @override
  @JsonKey()
  List<User> get friends {
    if (_friends is EqualUnmodifiableListView) return _friends;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_friends);
  }
  @override
  @JsonKey()
  final int count;
  @override
  String toString() {
    return 'MutualFriends(friends: $friends, count: $count)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MutualFriendsImpl &&
            const DeepCollectionEquality().equals(other._friends, _friends) &&
            (identical(other.count, count) || other.count == count));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, const DeepCollectionEquality().hash(_friends), count);
  /// Create a copy of MutualFriends
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MutualFriendsImplCopyWith<_$MutualFriendsImpl> get copyWith =>
      __$$MutualFriendsImplCopyWithImpl<_$MutualFriendsImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$MutualFriendsImplToJson(
      this,
    );
  }
}
abstract class _MutualFriends implements MutualFriends {
  const factory _MutualFriends({final List<User> friends, final int count}) =
      _$MutualFriendsImpl;
  factory _MutualFriends.fromJson(Map<String, dynamic> json) =
      _$MutualFriendsImpl.fromJson;
  @override
  List<User> get friends;
  @override
  int get count;
  /// Create a copy of MutualFriends
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MutualFriendsImplCopyWith<_$MutualFriendsImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
</file>

<file path="lib/core/models/friendship.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'friendship.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
_$FriendshipImpl _$$FriendshipImplFromJson(Map<String, dynamic> json) =>
    _$FriendshipImpl(
      id: json['id'] as String,
      requesterId: json['requesterId'] as String,
      addresseeId: json['addresseeId'] as String,
      status: $enumDecodeNullable(_$FriendshipStatusEnumMap, json['status']) ??
          FriendshipStatus.pending,
      message: json['message'] as String?,
      acceptedAt: json['acceptedAt'] == null
          ? null
          : DateTime.parse(json['acceptedAt'] as String),
      blockedAt: json['blockedAt'] == null
          ? null
          : DateTime.parse(json['blockedAt'] as String),
      declinedAt: json['declinedAt'] == null
          ? null
          : DateTime.parse(json['declinedAt'] as String),
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      requester: json['requester'] == null
          ? null
          : User.fromJson(json['requester'] as Map<String, dynamic>),
      addressee: json['addressee'] == null
          ? null
          : User.fromJson(json['addressee'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$$FriendshipImplToJson(_$FriendshipImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'requesterId': instance.requesterId,
      'addresseeId': instance.addresseeId,
      'status': _$FriendshipStatusEnumMap[instance.status]!,
      'message': instance.message,
      'acceptedAt': instance.acceptedAt?.toIso8601String(),
      'blockedAt': instance.blockedAt?.toIso8601String(),
      'declinedAt': instance.declinedAt?.toIso8601String(),
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'requester': instance.requester,
      'addressee': instance.addressee,
    };
const _$FriendshipStatusEnumMap = {
  FriendshipStatus.pending: 'pending',
  FriendshipStatus.accepted: 'accepted',
  FriendshipStatus.blocked: 'blocked',
  FriendshipStatus.declined: 'declined',
};
_$FriendRequestImpl _$$FriendRequestImplFromJson(Map<String, dynamic> json) =>
    _$FriendRequestImpl(
      id: json['id'] as String,
      fromUserId: json['fromUserId'] as String,
      toUserId: json['toUserId'] as String,
      message: json['message'] as String?,
      status: $enumDecodeNullable(_$FriendshipStatusEnumMap, json['status']) ??
          FriendshipStatus.pending,
      createdAt: DateTime.parse(json['createdAt'] as String),
      fromUser: json['fromUser'] == null
          ? null
          : User.fromJson(json['fromUser'] as Map<String, dynamic>),
      toUser: json['toUser'] == null
          ? null
          : User.fromJson(json['toUser'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$$FriendRequestImplToJson(_$FriendRequestImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'fromUserId': instance.fromUserId,
      'toUserId': instance.toUserId,
      'message': instance.message,
      'status': _$FriendshipStatusEnumMap[instance.status]!,
      'createdAt': instance.createdAt.toIso8601String(),
      'fromUser': instance.fromUser,
      'toUser': instance.toUser,
    };
_$SendFriendRequestRequestImpl _$$SendFriendRequestRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$SendFriendRequestRequestImpl(
      toUserId: json['toUserId'] as String,
      message: json['message'] as String?,
    );
Map<String, dynamic> _$$SendFriendRequestRequestImplToJson(
        _$SendFriendRequestRequestImpl instance) =>
    <String, dynamic>{
      'toUserId': instance.toUserId,
      'message': instance.message,
    };
_$FriendshipResponseImpl _$$FriendshipResponseImplFromJson(
        Map<String, dynamic> json) =>
    _$FriendshipResponseImpl(
      friendshipId: json['friendshipId'] as String,
      status: $enumDecode(_$FriendshipStatusEnumMap, json['status']),
    );
Map<String, dynamic> _$$FriendshipResponseImplToJson(
        _$FriendshipResponseImpl instance) =>
    <String, dynamic>{
      'friendshipId': instance.friendshipId,
      'status': _$FriendshipStatusEnumMap[instance.status]!,
    };
_$FriendsListImpl _$$FriendsListImplFromJson(Map<String, dynamic> json) =>
    _$FriendsListImpl(
      friends: (json['friends'] as List<dynamic>?)
              ?.map((e) => User.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      totalCount: (json['totalCount'] as num?)?.toInt() ?? 0,
      hasMore: json['hasMore'] as bool? ?? false,
      nextCursor: json['nextCursor'] as String?,
    );
Map<String, dynamic> _$$FriendsListImplToJson(_$FriendsListImpl instance) =>
    <String, dynamic>{
      'friends': instance.friends,
      'totalCount': instance.totalCount,
      'hasMore': instance.hasMore,
      'nextCursor': instance.nextCursor,
    };
_$FriendRequestsListImpl _$$FriendRequestsListImplFromJson(
        Map<String, dynamic> json) =>
    _$FriendRequestsListImpl(
      requests: (json['requests'] as List<dynamic>?)
              ?.map((e) => FriendRequest.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      totalCount: (json['totalCount'] as num?)?.toInt() ?? 0,
      hasMore: json['hasMore'] as bool? ?? false,
      nextCursor: json['nextCursor'] as String?,
    );
Map<String, dynamic> _$$FriendRequestsListImplToJson(
        _$FriendRequestsListImpl instance) =>
    <String, dynamic>{
      'requests': instance.requests,
      'totalCount': instance.totalCount,
      'hasMore': instance.hasMore,
      'nextCursor': instance.nextCursor,
    };
_$MutualFriendsImpl _$$MutualFriendsImplFromJson(Map<String, dynamic> json) =>
    _$MutualFriendsImpl(
      friends: (json['friends'] as List<dynamic>?)
              ?.map((e) => User.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      count: (json['count'] as num?)?.toInt() ?? 0,
    );
Map<String, dynamic> _$$MutualFriendsImplToJson(_$MutualFriendsImpl instance) =>
    <String, dynamic>{
      'friends': instance.friends,
      'count': instance.count,
    };
</file>

<file path="lib/core/models/message.dart">
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:plant_social/core/models/user.dart';
part 'message.freezed.dart';
part 'message.g.dart';
enum MessageType {
  text,
  image,
  video,
  audio,
  file,
  location,
  plant_identification, // Phase 2
  plant_care_tip, // Phase 2
}
enum MessageStatus {
  sending,
  sent,
  delivered,
  read,
  failed,
}
@freezed
class Message with _$Message {
  const factory Message({
    required String id,
    required String senderId,
    required String receiverId,
    required String content,
    @Default(MessageType.text) MessageType type,
    @Default(MessageStatus.sending) MessageStatus status,
    String? mediaUrl,
    String? thumbnailUrl,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt, // For disappearing messages
    String? replyToMessageId,
    @Default(false) bool isEdited,
    DateTime? editedAt,
    required DateTime createdAt,
    DateTime? updatedAt,
    // Sender info (populated from join)
    User? sender,
    // Plant-specific fields for Phase 2
    String? plantId,
    Map<String, dynamic>? plantData,
  }) = _Message;
  factory Message.fromJson(Map<String, dynamic> json) => _$MessageFromJson(json);
}
@freezed
class Conversation with _$Conversation {
  const factory Conversation({
    required String id,
    required String userId,
    required String otherUserId,
    Message? lastMessage,
    @Default(0) int unreadCount,
    @Default(false) bool isMuted,
    @Default(false) bool isArchived,
    @Default(false) bool isBlocked,
    DateTime? lastReadAt,
    required DateTime createdAt,
    DateTime? updatedAt,
    // Other user info (populated from join)
    User? otherUser,
  }) = _Conversation;
  factory Conversation.fromJson(Map<String, dynamic> json) => _$ConversationFromJson(json);
}
@freezed
class SendMessageRequest with _$SendMessageRequest {
  const factory SendMessageRequest({
    required String receiverId,
    required String content,
    @Default(MessageType.text) MessageType type,
    String? mediaUrl,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    String? replyToMessageId,
    String? plantId,
    Map<String, dynamic>? plantData,
  }) = _SendMessageRequest;
  factory SendMessageRequest.fromJson(Map<String, dynamic> json) => _$SendMessageRequestFromJson(json);
}
@freezed
class MessageReaction with _$MessageReaction {
  const factory MessageReaction({
    required String id,
    required String messageId,
    required String userId,
    required String emoji,
    required DateTime createdAt,
    // User info (populated from join)
    User? user,
  }) = _MessageReaction;
  factory MessageReaction.fromJson(Map<String, dynamic> json) => _$MessageReactionFromJson(json);
}
</file>

<file path="lib/core/models/message.freezed.dart">
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark
part of 'message.dart';
// **************************************************************************
// FreezedGenerator
// **************************************************************************
T _$identity<T>(T value) => value;
final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');
Message _$MessageFromJson(Map<String, dynamic> json) {
  return _Message.fromJson(json);
}
/// @nodoc
mixin _$Message {
  String get id => throw _privateConstructorUsedError;
  String get senderId => throw _privateConstructorUsedError;
  String get receiverId => throw _privateConstructorUsedError;
  String get content => throw _privateConstructorUsedError;
  MessageType get type => throw _privateConstructorUsedError;
  MessageStatus get status => throw _privateConstructorUsedError;
  String? get mediaUrl => throw _privateConstructorUsedError;
  String? get thumbnailUrl => throw _privateConstructorUsedError;
  Map<String, dynamic>? get metadata => throw _privateConstructorUsedError;
  DateTime? get expiresAt =>
      throw _privateConstructorUsedError; // For disappearing messages
  String? get replyToMessageId => throw _privateConstructorUsedError;
  bool get isEdited => throw _privateConstructorUsedError;
  DateTime? get editedAt => throw _privateConstructorUsedError;
  DateTime get createdAt => throw _privateConstructorUsedError;
  DateTime? get updatedAt =>
      throw _privateConstructorUsedError; // Sender info (populated from join)
  User? get sender =>
      throw _privateConstructorUsedError; // Plant-specific fields for Phase 2
  String? get plantId => throw _privateConstructorUsedError;
  Map<String, dynamic>? get plantData => throw _privateConstructorUsedError;
  /// Serializes this Message to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of Message
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $MessageCopyWith<Message> get copyWith => throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $MessageCopyWith<$Res> {
  factory $MessageCopyWith(Message value, $Res Function(Message) then) =
      _$MessageCopyWithImpl<$Res, Message>;
  @useResult
  $Res call(
      {String id,
      String senderId,
      String receiverId,
      String content,
      MessageType type,
      MessageStatus status,
      String? mediaUrl,
      String? thumbnailUrl,
      Map<String, dynamic>? metadata,
      DateTime? expiresAt,
      String? replyToMessageId,
      bool isEdited,
      DateTime? editedAt,
      DateTime createdAt,
      DateTime? updatedAt,
      User? sender,
      String? plantId,
      Map<String, dynamic>? plantData});
  $UserCopyWith<$Res>? get sender;
}
/// @nodoc
class _$MessageCopyWithImpl<$Res, $Val extends Message>
    implements $MessageCopyWith<$Res> {
  _$MessageCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of Message
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? senderId = null,
    Object? receiverId = null,
    Object? content = null,
    Object? type = null,
    Object? status = null,
    Object? mediaUrl = freezed,
    Object? thumbnailUrl = freezed,
    Object? metadata = freezed,
    Object? expiresAt = freezed,
    Object? replyToMessageId = freezed,
    Object? isEdited = null,
    Object? editedAt = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? sender = freezed,
    Object? plantId = freezed,
    Object? plantData = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      senderId: null == senderId
          ? _value.senderId
          : senderId // ignore: cast_nullable_to_non_nullable
              as String,
      receiverId: null == receiverId
          ? _value.receiverId
          : receiverId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as MessageType,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as MessageStatus,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      thumbnailUrl: freezed == thumbnailUrl
          ? _value.thumbnailUrl
          : thumbnailUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value.metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      replyToMessageId: freezed == replyToMessageId
          ? _value.replyToMessageId
          : replyToMessageId // ignore: cast_nullable_to_non_nullable
              as String?,
      isEdited: null == isEdited
          ? _value.isEdited
          : isEdited // ignore: cast_nullable_to_non_nullable
              as bool,
      editedAt: freezed == editedAt
          ? _value.editedAt
          : editedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      sender: freezed == sender
          ? _value.sender
          : sender // ignore: cast_nullable_to_non_nullable
              as User?,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value.plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
    ) as $Val);
  }
  /// Create a copy of Message
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get sender {
    if (_value.sender == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.sender!, (value) {
      return _then(_value.copyWith(sender: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$MessageImplCopyWith<$Res> implements $MessageCopyWith<$Res> {
  factory _$$MessageImplCopyWith(
          _$MessageImpl value, $Res Function(_$MessageImpl) then) =
      __$$MessageImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String senderId,
      String receiverId,
      String content,
      MessageType type,
      MessageStatus status,
      String? mediaUrl,
      String? thumbnailUrl,
      Map<String, dynamic>? metadata,
      DateTime? expiresAt,
      String? replyToMessageId,
      bool isEdited,
      DateTime? editedAt,
      DateTime createdAt,
      DateTime? updatedAt,
      User? sender,
      String? plantId,
      Map<String, dynamic>? plantData});
  @override
  $UserCopyWith<$Res>? get sender;
}
/// @nodoc
class __$$MessageImplCopyWithImpl<$Res>
    extends _$MessageCopyWithImpl<$Res, _$MessageImpl>
    implements _$$MessageImplCopyWith<$Res> {
  __$$MessageImplCopyWithImpl(
      _$MessageImpl _value, $Res Function(_$MessageImpl) _then)
      : super(_value, _then);
  /// Create a copy of Message
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? senderId = null,
    Object? receiverId = null,
    Object? content = null,
    Object? type = null,
    Object? status = null,
    Object? mediaUrl = freezed,
    Object? thumbnailUrl = freezed,
    Object? metadata = freezed,
    Object? expiresAt = freezed,
    Object? replyToMessageId = freezed,
    Object? isEdited = null,
    Object? editedAt = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? sender = freezed,
    Object? plantId = freezed,
    Object? plantData = freezed,
  }) {
    return _then(_$MessageImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      senderId: null == senderId
          ? _value.senderId
          : senderId // ignore: cast_nullable_to_non_nullable
              as String,
      receiverId: null == receiverId
          ? _value.receiverId
          : receiverId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as MessageType,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as MessageStatus,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      thumbnailUrl: freezed == thumbnailUrl
          ? _value.thumbnailUrl
          : thumbnailUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value._metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      replyToMessageId: freezed == replyToMessageId
          ? _value.replyToMessageId
          : replyToMessageId // ignore: cast_nullable_to_non_nullable
              as String?,
      isEdited: null == isEdited
          ? _value.isEdited
          : isEdited // ignore: cast_nullable_to_non_nullable
              as bool,
      editedAt: freezed == editedAt
          ? _value.editedAt
          : editedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      sender: freezed == sender
          ? _value.sender
          : sender // ignore: cast_nullable_to_non_nullable
              as User?,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value._plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$MessageImpl implements _Message {
  const _$MessageImpl(
      {required this.id,
      required this.senderId,
      required this.receiverId,
      required this.content,
      this.type = MessageType.text,
      this.status = MessageStatus.sending,
      this.mediaUrl,
      this.thumbnailUrl,
      final Map<String, dynamic>? metadata,
      this.expiresAt,
      this.replyToMessageId,
      this.isEdited = false,
      this.editedAt,
      required this.createdAt,
      this.updatedAt,
      this.sender,
      this.plantId,
      final Map<String, dynamic>? plantData})
      : _metadata = metadata,
        _plantData = plantData;
  factory _$MessageImpl.fromJson(Map<String, dynamic> json) =>
      _$$MessageImplFromJson(json);
  @override
  final String id;
  @override
  final String senderId;
  @override
  final String receiverId;
  @override
  final String content;
  @override
  @JsonKey()
  final MessageType type;
  @override
  @JsonKey()
  final MessageStatus status;
  @override
  final String? mediaUrl;
  @override
  final String? thumbnailUrl;
  final Map<String, dynamic>? _metadata;
  @override
  Map<String, dynamic>? get metadata {
    final value = _metadata;
    if (value == null) return null;
    if (_metadata is EqualUnmodifiableMapView) return _metadata;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  @override
  final DateTime? expiresAt;
// For disappearing messages
  @override
  final String? replyToMessageId;
  @override
  @JsonKey()
  final bool isEdited;
  @override
  final DateTime? editedAt;
  @override
  final DateTime createdAt;
  @override
  final DateTime? updatedAt;
// Sender info (populated from join)
  @override
  final User? sender;
// Plant-specific fields for Phase 2
  @override
  final String? plantId;
  final Map<String, dynamic>? _plantData;
  @override
  Map<String, dynamic>? get plantData {
    final value = _plantData;
    if (value == null) return null;
    if (_plantData is EqualUnmodifiableMapView) return _plantData;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  @override
  String toString() {
    return 'Message(id: $id, senderId: $senderId, receiverId: $receiverId, content: $content, type: $type, status: $status, mediaUrl: $mediaUrl, thumbnailUrl: $thumbnailUrl, metadata: $metadata, expiresAt: $expiresAt, replyToMessageId: $replyToMessageId, isEdited: $isEdited, editedAt: $editedAt, createdAt: $createdAt, updatedAt: $updatedAt, sender: $sender, plantId: $plantId, plantData: $plantData)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MessageImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.senderId, senderId) ||
                other.senderId == senderId) &&
            (identical(other.receiverId, receiverId) ||
                other.receiverId == receiverId) &&
            (identical(other.content, content) || other.content == content) &&
            (identical(other.type, type) || other.type == type) &&
            (identical(other.status, status) || other.status == status) &&
            (identical(other.mediaUrl, mediaUrl) ||
                other.mediaUrl == mediaUrl) &&
            (identical(other.thumbnailUrl, thumbnailUrl) ||
                other.thumbnailUrl == thumbnailUrl) &&
            const DeepCollectionEquality().equals(other._metadata, _metadata) &&
            (identical(other.expiresAt, expiresAt) ||
                other.expiresAt == expiresAt) &&
            (identical(other.replyToMessageId, replyToMessageId) ||
                other.replyToMessageId == replyToMessageId) &&
            (identical(other.isEdited, isEdited) ||
                other.isEdited == isEdited) &&
            (identical(other.editedAt, editedAt) ||
                other.editedAt == editedAt) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.updatedAt, updatedAt) ||
                other.updatedAt == updatedAt) &&
            (identical(other.sender, sender) || other.sender == sender) &&
            (identical(other.plantId, plantId) || other.plantId == plantId) &&
            const DeepCollectionEquality()
                .equals(other._plantData, _plantData));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      senderId,
      receiverId,
      content,
      type,
      status,
      mediaUrl,
      thumbnailUrl,
      const DeepCollectionEquality().hash(_metadata),
      expiresAt,
      replyToMessageId,
      isEdited,
      editedAt,
      createdAt,
      updatedAt,
      sender,
      plantId,
      const DeepCollectionEquality().hash(_plantData));
  /// Create a copy of Message
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MessageImplCopyWith<_$MessageImpl> get copyWith =>
      __$$MessageImplCopyWithImpl<_$MessageImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$MessageImplToJson(
      this,
    );
  }
}
abstract class _Message implements Message {
  const factory _Message(
      {required final String id,
      required final String senderId,
      required final String receiverId,
      required final String content,
      final MessageType type,
      final MessageStatus status,
      final String? mediaUrl,
      final String? thumbnailUrl,
      final Map<String, dynamic>? metadata,
      final DateTime? expiresAt,
      final String? replyToMessageId,
      final bool isEdited,
      final DateTime? editedAt,
      required final DateTime createdAt,
      final DateTime? updatedAt,
      final User? sender,
      final String? plantId,
      final Map<String, dynamic>? plantData}) = _$MessageImpl;
  factory _Message.fromJson(Map<String, dynamic> json) = _$MessageImpl.fromJson;
  @override
  String get id;
  @override
  String get senderId;
  @override
  String get receiverId;
  @override
  String get content;
  @override
  MessageType get type;
  @override
  MessageStatus get status;
  @override
  String? get mediaUrl;
  @override
  String? get thumbnailUrl;
  @override
  Map<String, dynamic>? get metadata;
  @override
  DateTime? get expiresAt; // For disappearing messages
  @override
  String? get replyToMessageId;
  @override
  bool get isEdited;
  @override
  DateTime? get editedAt;
  @override
  DateTime get createdAt;
  @override
  DateTime? get updatedAt; // Sender info (populated from join)
  @override
  User? get sender; // Plant-specific fields for Phase 2
  @override
  String? get plantId;
  @override
  Map<String, dynamic>? get plantData;
  /// Create a copy of Message
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MessageImplCopyWith<_$MessageImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
Conversation _$ConversationFromJson(Map<String, dynamic> json) {
  return _Conversation.fromJson(json);
}
/// @nodoc
mixin _$Conversation {
  String get id => throw _privateConstructorUsedError;
  String get userId => throw _privateConstructorUsedError;
  String get otherUserId => throw _privateConstructorUsedError;
  Message? get lastMessage => throw _privateConstructorUsedError;
  int get unreadCount => throw _privateConstructorUsedError;
  bool get isMuted => throw _privateConstructorUsedError;
  bool get isArchived => throw _privateConstructorUsedError;
  bool get isBlocked => throw _privateConstructorUsedError;
  DateTime? get lastReadAt => throw _privateConstructorUsedError;
  DateTime get createdAt => throw _privateConstructorUsedError;
  DateTime? get updatedAt =>
      throw _privateConstructorUsedError; // Other user info (populated from join)
  User? get otherUser => throw _privateConstructorUsedError;
  /// Serializes this Conversation to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of Conversation
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $ConversationCopyWith<Conversation> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $ConversationCopyWith<$Res> {
  factory $ConversationCopyWith(
          Conversation value, $Res Function(Conversation) then) =
      _$ConversationCopyWithImpl<$Res, Conversation>;
  @useResult
  $Res call(
      {String id,
      String userId,
      String otherUserId,
      Message? lastMessage,
      int unreadCount,
      bool isMuted,
      bool isArchived,
      bool isBlocked,
      DateTime? lastReadAt,
      DateTime createdAt,
      DateTime? updatedAt,
      User? otherUser});
  $MessageCopyWith<$Res>? get lastMessage;
  $UserCopyWith<$Res>? get otherUser;
}
/// @nodoc
class _$ConversationCopyWithImpl<$Res, $Val extends Conversation>
    implements $ConversationCopyWith<$Res> {
  _$ConversationCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of Conversation
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? userId = null,
    Object? otherUserId = null,
    Object? lastMessage = freezed,
    Object? unreadCount = null,
    Object? isMuted = null,
    Object? isArchived = null,
    Object? isBlocked = null,
    Object? lastReadAt = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? otherUser = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      otherUserId: null == otherUserId
          ? _value.otherUserId
          : otherUserId // ignore: cast_nullable_to_non_nullable
              as String,
      lastMessage: freezed == lastMessage
          ? _value.lastMessage
          : lastMessage // ignore: cast_nullable_to_non_nullable
              as Message?,
      unreadCount: null == unreadCount
          ? _value.unreadCount
          : unreadCount // ignore: cast_nullable_to_non_nullable
              as int,
      isMuted: null == isMuted
          ? _value.isMuted
          : isMuted // ignore: cast_nullable_to_non_nullable
              as bool,
      isArchived: null == isArchived
          ? _value.isArchived
          : isArchived // ignore: cast_nullable_to_non_nullable
              as bool,
      isBlocked: null == isBlocked
          ? _value.isBlocked
          : isBlocked // ignore: cast_nullable_to_non_nullable
              as bool,
      lastReadAt: freezed == lastReadAt
          ? _value.lastReadAt
          : lastReadAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      otherUser: freezed == otherUser
          ? _value.otherUser
          : otherUser // ignore: cast_nullable_to_non_nullable
              as User?,
    ) as $Val);
  }
  /// Create a copy of Conversation
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $MessageCopyWith<$Res>? get lastMessage {
    if (_value.lastMessage == null) {
      return null;
    }
    return $MessageCopyWith<$Res>(_value.lastMessage!, (value) {
      return _then(_value.copyWith(lastMessage: value) as $Val);
    });
  }
  /// Create a copy of Conversation
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get otherUser {
    if (_value.otherUser == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.otherUser!, (value) {
      return _then(_value.copyWith(otherUser: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$ConversationImplCopyWith<$Res>
    implements $ConversationCopyWith<$Res> {
  factory _$$ConversationImplCopyWith(
          _$ConversationImpl value, $Res Function(_$ConversationImpl) then) =
      __$$ConversationImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String userId,
      String otherUserId,
      Message? lastMessage,
      int unreadCount,
      bool isMuted,
      bool isArchived,
      bool isBlocked,
      DateTime? lastReadAt,
      DateTime createdAt,
      DateTime? updatedAt,
      User? otherUser});
  @override
  $MessageCopyWith<$Res>? get lastMessage;
  @override
  $UserCopyWith<$Res>? get otherUser;
}
/// @nodoc
class __$$ConversationImplCopyWithImpl<$Res>
    extends _$ConversationCopyWithImpl<$Res, _$ConversationImpl>
    implements _$$ConversationImplCopyWith<$Res> {
  __$$ConversationImplCopyWithImpl(
      _$ConversationImpl _value, $Res Function(_$ConversationImpl) _then)
      : super(_value, _then);
  /// Create a copy of Conversation
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? userId = null,
    Object? otherUserId = null,
    Object? lastMessage = freezed,
    Object? unreadCount = null,
    Object? isMuted = null,
    Object? isArchived = null,
    Object? isBlocked = null,
    Object? lastReadAt = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? otherUser = freezed,
  }) {
    return _then(_$ConversationImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      otherUserId: null == otherUserId
          ? _value.otherUserId
          : otherUserId // ignore: cast_nullable_to_non_nullable
              as String,
      lastMessage: freezed == lastMessage
          ? _value.lastMessage
          : lastMessage // ignore: cast_nullable_to_non_nullable
              as Message?,
      unreadCount: null == unreadCount
          ? _value.unreadCount
          : unreadCount // ignore: cast_nullable_to_non_nullable
              as int,
      isMuted: null == isMuted
          ? _value.isMuted
          : isMuted // ignore: cast_nullable_to_non_nullable
              as bool,
      isArchived: null == isArchived
          ? _value.isArchived
          : isArchived // ignore: cast_nullable_to_non_nullable
              as bool,
      isBlocked: null == isBlocked
          ? _value.isBlocked
          : isBlocked // ignore: cast_nullable_to_non_nullable
              as bool,
      lastReadAt: freezed == lastReadAt
          ? _value.lastReadAt
          : lastReadAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      otherUser: freezed == otherUser
          ? _value.otherUser
          : otherUser // ignore: cast_nullable_to_non_nullable
              as User?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$ConversationImpl implements _Conversation {
  const _$ConversationImpl(
      {required this.id,
      required this.userId,
      required this.otherUserId,
      this.lastMessage,
      this.unreadCount = 0,
      this.isMuted = false,
      this.isArchived = false,
      this.isBlocked = false,
      this.lastReadAt,
      required this.createdAt,
      this.updatedAt,
      this.otherUser});
  factory _$ConversationImpl.fromJson(Map<String, dynamic> json) =>
      _$$ConversationImplFromJson(json);
  @override
  final String id;
  @override
  final String userId;
  @override
  final String otherUserId;
  @override
  final Message? lastMessage;
  @override
  @JsonKey()
  final int unreadCount;
  @override
  @JsonKey()
  final bool isMuted;
  @override
  @JsonKey()
  final bool isArchived;
  @override
  @JsonKey()
  final bool isBlocked;
  @override
  final DateTime? lastReadAt;
  @override
  final DateTime createdAt;
  @override
  final DateTime? updatedAt;
// Other user info (populated from join)
  @override
  final User? otherUser;
  @override
  String toString() {
    return 'Conversation(id: $id, userId: $userId, otherUserId: $otherUserId, lastMessage: $lastMessage, unreadCount: $unreadCount, isMuted: $isMuted, isArchived: $isArchived, isBlocked: $isBlocked, lastReadAt: $lastReadAt, createdAt: $createdAt, updatedAt: $updatedAt, otherUser: $otherUser)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ConversationImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.otherUserId, otherUserId) ||
                other.otherUserId == otherUserId) &&
            (identical(other.lastMessage, lastMessage) ||
                other.lastMessage == lastMessage) &&
            (identical(other.unreadCount, unreadCount) ||
                other.unreadCount == unreadCount) &&
            (identical(other.isMuted, isMuted) || other.isMuted == isMuted) &&
            (identical(other.isArchived, isArchived) ||
                other.isArchived == isArchived) &&
            (identical(other.isBlocked, isBlocked) ||
                other.isBlocked == isBlocked) &&
            (identical(other.lastReadAt, lastReadAt) ||
                other.lastReadAt == lastReadAt) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.updatedAt, updatedAt) ||
                other.updatedAt == updatedAt) &&
            (identical(other.otherUser, otherUser) ||
                other.otherUser == otherUser));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      userId,
      otherUserId,
      lastMessage,
      unreadCount,
      isMuted,
      isArchived,
      isBlocked,
      lastReadAt,
      createdAt,
      updatedAt,
      otherUser);
  /// Create a copy of Conversation
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ConversationImplCopyWith<_$ConversationImpl> get copyWith =>
      __$$ConversationImplCopyWithImpl<_$ConversationImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$ConversationImplToJson(
      this,
    );
  }
}
abstract class _Conversation implements Conversation {
  const factory _Conversation(
      {required final String id,
      required final String userId,
      required final String otherUserId,
      final Message? lastMessage,
      final int unreadCount,
      final bool isMuted,
      final bool isArchived,
      final bool isBlocked,
      final DateTime? lastReadAt,
      required final DateTime createdAt,
      final DateTime? updatedAt,
      final User? otherUser}) = _$ConversationImpl;
  factory _Conversation.fromJson(Map<String, dynamic> json) =
      _$ConversationImpl.fromJson;
  @override
  String get id;
  @override
  String get userId;
  @override
  String get otherUserId;
  @override
  Message? get lastMessage;
  @override
  int get unreadCount;
  @override
  bool get isMuted;
  @override
  bool get isArchived;
  @override
  bool get isBlocked;
  @override
  DateTime? get lastReadAt;
  @override
  DateTime get createdAt;
  @override
  DateTime? get updatedAt; // Other user info (populated from join)
  @override
  User? get otherUser;
  /// Create a copy of Conversation
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ConversationImplCopyWith<_$ConversationImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
SendMessageRequest _$SendMessageRequestFromJson(Map<String, dynamic> json) {
  return _SendMessageRequest.fromJson(json);
}
/// @nodoc
mixin _$SendMessageRequest {
  String get receiverId => throw _privateConstructorUsedError;
  String get content => throw _privateConstructorUsedError;
  MessageType get type => throw _privateConstructorUsedError;
  String? get mediaUrl => throw _privateConstructorUsedError;
  Map<String, dynamic>? get metadata => throw _privateConstructorUsedError;
  DateTime? get expiresAt => throw _privateConstructorUsedError;
  String? get replyToMessageId => throw _privateConstructorUsedError;
  String? get plantId => throw _privateConstructorUsedError;
  Map<String, dynamic>? get plantData => throw _privateConstructorUsedError;
  /// Serializes this SendMessageRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of SendMessageRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $SendMessageRequestCopyWith<SendMessageRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $SendMessageRequestCopyWith<$Res> {
  factory $SendMessageRequestCopyWith(
          SendMessageRequest value, $Res Function(SendMessageRequest) then) =
      _$SendMessageRequestCopyWithImpl<$Res, SendMessageRequest>;
  @useResult
  $Res call(
      {String receiverId,
      String content,
      MessageType type,
      String? mediaUrl,
      Map<String, dynamic>? metadata,
      DateTime? expiresAt,
      String? replyToMessageId,
      String? plantId,
      Map<String, dynamic>? plantData});
}
/// @nodoc
class _$SendMessageRequestCopyWithImpl<$Res, $Val extends SendMessageRequest>
    implements $SendMessageRequestCopyWith<$Res> {
  _$SendMessageRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of SendMessageRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? receiverId = null,
    Object? content = null,
    Object? type = null,
    Object? mediaUrl = freezed,
    Object? metadata = freezed,
    Object? expiresAt = freezed,
    Object? replyToMessageId = freezed,
    Object? plantId = freezed,
    Object? plantData = freezed,
  }) {
    return _then(_value.copyWith(
      receiverId: null == receiverId
          ? _value.receiverId
          : receiverId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as MessageType,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value.metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      replyToMessageId: freezed == replyToMessageId
          ? _value.replyToMessageId
          : replyToMessageId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value.plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$SendMessageRequestImplCopyWith<$Res>
    implements $SendMessageRequestCopyWith<$Res> {
  factory _$$SendMessageRequestImplCopyWith(_$SendMessageRequestImpl value,
          $Res Function(_$SendMessageRequestImpl) then) =
      __$$SendMessageRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String receiverId,
      String content,
      MessageType type,
      String? mediaUrl,
      Map<String, dynamic>? metadata,
      DateTime? expiresAt,
      String? replyToMessageId,
      String? plantId,
      Map<String, dynamic>? plantData});
}
/// @nodoc
class __$$SendMessageRequestImplCopyWithImpl<$Res>
    extends _$SendMessageRequestCopyWithImpl<$Res, _$SendMessageRequestImpl>
    implements _$$SendMessageRequestImplCopyWith<$Res> {
  __$$SendMessageRequestImplCopyWithImpl(_$SendMessageRequestImpl _value,
      $Res Function(_$SendMessageRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of SendMessageRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? receiverId = null,
    Object? content = null,
    Object? type = null,
    Object? mediaUrl = freezed,
    Object? metadata = freezed,
    Object? expiresAt = freezed,
    Object? replyToMessageId = freezed,
    Object? plantId = freezed,
    Object? plantData = freezed,
  }) {
    return _then(_$SendMessageRequestImpl(
      receiverId: null == receiverId
          ? _value.receiverId
          : receiverId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as MessageType,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value._metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      replyToMessageId: freezed == replyToMessageId
          ? _value.replyToMessageId
          : replyToMessageId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value._plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$SendMessageRequestImpl implements _SendMessageRequest {
  const _$SendMessageRequestImpl(
      {required this.receiverId,
      required this.content,
      this.type = MessageType.text,
      this.mediaUrl,
      final Map<String, dynamic>? metadata,
      this.expiresAt,
      this.replyToMessageId,
      this.plantId,
      final Map<String, dynamic>? plantData})
      : _metadata = metadata,
        _plantData = plantData;
  factory _$SendMessageRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$SendMessageRequestImplFromJson(json);
  @override
  final String receiverId;
  @override
  final String content;
  @override
  @JsonKey()
  final MessageType type;
  @override
  final String? mediaUrl;
  final Map<String, dynamic>? _metadata;
  @override
  Map<String, dynamic>? get metadata {
    final value = _metadata;
    if (value == null) return null;
    if (_metadata is EqualUnmodifiableMapView) return _metadata;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  @override
  final DateTime? expiresAt;
  @override
  final String? replyToMessageId;
  @override
  final String? plantId;
  final Map<String, dynamic>? _plantData;
  @override
  Map<String, dynamic>? get plantData {
    final value = _plantData;
    if (value == null) return null;
    if (_plantData is EqualUnmodifiableMapView) return _plantData;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  @override
  String toString() {
    return 'SendMessageRequest(receiverId: $receiverId, content: $content, type: $type, mediaUrl: $mediaUrl, metadata: $metadata, expiresAt: $expiresAt, replyToMessageId: $replyToMessageId, plantId: $plantId, plantData: $plantData)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SendMessageRequestImpl &&
            (identical(other.receiverId, receiverId) ||
                other.receiverId == receiverId) &&
            (identical(other.content, content) || other.content == content) &&
            (identical(other.type, type) || other.type == type) &&
            (identical(other.mediaUrl, mediaUrl) ||
                other.mediaUrl == mediaUrl) &&
            const DeepCollectionEquality().equals(other._metadata, _metadata) &&
            (identical(other.expiresAt, expiresAt) ||
                other.expiresAt == expiresAt) &&
            (identical(other.replyToMessageId, replyToMessageId) ||
                other.replyToMessageId == replyToMessageId) &&
            (identical(other.plantId, plantId) || other.plantId == plantId) &&
            const DeepCollectionEquality()
                .equals(other._plantData, _plantData));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      receiverId,
      content,
      type,
      mediaUrl,
      const DeepCollectionEquality().hash(_metadata),
      expiresAt,
      replyToMessageId,
      plantId,
      const DeepCollectionEquality().hash(_plantData));
  /// Create a copy of SendMessageRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SendMessageRequestImplCopyWith<_$SendMessageRequestImpl> get copyWith =>
      __$$SendMessageRequestImplCopyWithImpl<_$SendMessageRequestImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$SendMessageRequestImplToJson(
      this,
    );
  }
}
abstract class _SendMessageRequest implements SendMessageRequest {
  const factory _SendMessageRequest(
      {required final String receiverId,
      required final String content,
      final MessageType type,
      final String? mediaUrl,
      final Map<String, dynamic>? metadata,
      final DateTime? expiresAt,
      final String? replyToMessageId,
      final String? plantId,
      final Map<String, dynamic>? plantData}) = _$SendMessageRequestImpl;
  factory _SendMessageRequest.fromJson(Map<String, dynamic> json) =
      _$SendMessageRequestImpl.fromJson;
  @override
  String get receiverId;
  @override
  String get content;
  @override
  MessageType get type;
  @override
  String? get mediaUrl;
  @override
  Map<String, dynamic>? get metadata;
  @override
  DateTime? get expiresAt;
  @override
  String? get replyToMessageId;
  @override
  String? get plantId;
  @override
  Map<String, dynamic>? get plantData;
  /// Create a copy of SendMessageRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SendMessageRequestImplCopyWith<_$SendMessageRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
MessageReaction _$MessageReactionFromJson(Map<String, dynamic> json) {
  return _MessageReaction.fromJson(json);
}
/// @nodoc
mixin _$MessageReaction {
  String get id => throw _privateConstructorUsedError;
  String get messageId => throw _privateConstructorUsedError;
  String get userId => throw _privateConstructorUsedError;
  String get emoji => throw _privateConstructorUsedError;
  DateTime get createdAt =>
      throw _privateConstructorUsedError; // User info (populated from join)
  User? get user => throw _privateConstructorUsedError;
  /// Serializes this MessageReaction to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of MessageReaction
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $MessageReactionCopyWith<MessageReaction> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $MessageReactionCopyWith<$Res> {
  factory $MessageReactionCopyWith(
          MessageReaction value, $Res Function(MessageReaction) then) =
      _$MessageReactionCopyWithImpl<$Res, MessageReaction>;
  @useResult
  $Res call(
      {String id,
      String messageId,
      String userId,
      String emoji,
      DateTime createdAt,
      User? user});
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class _$MessageReactionCopyWithImpl<$Res, $Val extends MessageReaction>
    implements $MessageReactionCopyWith<$Res> {
  _$MessageReactionCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of MessageReaction
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? messageId = null,
    Object? userId = null,
    Object? emoji = null,
    Object? createdAt = null,
    Object? user = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      messageId: null == messageId
          ? _value.messageId
          : messageId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      emoji: null == emoji
          ? _value.emoji
          : emoji // ignore: cast_nullable_to_non_nullable
              as String,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
    ) as $Val);
  }
  /// Create a copy of MessageReaction
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get user {
    if (_value.user == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.user!, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$MessageReactionImplCopyWith<$Res>
    implements $MessageReactionCopyWith<$Res> {
  factory _$$MessageReactionImplCopyWith(_$MessageReactionImpl value,
          $Res Function(_$MessageReactionImpl) then) =
      __$$MessageReactionImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String messageId,
      String userId,
      String emoji,
      DateTime createdAt,
      User? user});
  @override
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class __$$MessageReactionImplCopyWithImpl<$Res>
    extends _$MessageReactionCopyWithImpl<$Res, _$MessageReactionImpl>
    implements _$$MessageReactionImplCopyWith<$Res> {
  __$$MessageReactionImplCopyWithImpl(
      _$MessageReactionImpl _value, $Res Function(_$MessageReactionImpl) _then)
      : super(_value, _then);
  /// Create a copy of MessageReaction
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? messageId = null,
    Object? userId = null,
    Object? emoji = null,
    Object? createdAt = null,
    Object? user = freezed,
  }) {
    return _then(_$MessageReactionImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      messageId: null == messageId
          ? _value.messageId
          : messageId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      emoji: null == emoji
          ? _value.emoji
          : emoji // ignore: cast_nullable_to_non_nullable
              as String,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$MessageReactionImpl implements _MessageReaction {
  const _$MessageReactionImpl(
      {required this.id,
      required this.messageId,
      required this.userId,
      required this.emoji,
      required this.createdAt,
      this.user});
  factory _$MessageReactionImpl.fromJson(Map<String, dynamic> json) =>
      _$$MessageReactionImplFromJson(json);
  @override
  final String id;
  @override
  final String messageId;
  @override
  final String userId;
  @override
  final String emoji;
  @override
  final DateTime createdAt;
// User info (populated from join)
  @override
  final User? user;
  @override
  String toString() {
    return 'MessageReaction(id: $id, messageId: $messageId, userId: $userId, emoji: $emoji, createdAt: $createdAt, user: $user)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MessageReactionImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.messageId, messageId) ||
                other.messageId == messageId) &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.emoji, emoji) || other.emoji == emoji) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.user, user) || other.user == user));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode =>
      Object.hash(runtimeType, id, messageId, userId, emoji, createdAt, user);
  /// Create a copy of MessageReaction
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MessageReactionImplCopyWith<_$MessageReactionImpl> get copyWith =>
      __$$MessageReactionImplCopyWithImpl<_$MessageReactionImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$MessageReactionImplToJson(
      this,
    );
  }
}
abstract class _MessageReaction implements MessageReaction {
  const factory _MessageReaction(
      {required final String id,
      required final String messageId,
      required final String userId,
      required final String emoji,
      required final DateTime createdAt,
      final User? user}) = _$MessageReactionImpl;
  factory _MessageReaction.fromJson(Map<String, dynamic> json) =
      _$MessageReactionImpl.fromJson;
  @override
  String get id;
  @override
  String get messageId;
  @override
  String get userId;
  @override
  String get emoji;
  @override
  DateTime get createdAt; // User info (populated from join)
  @override
  User? get user;
  /// Create a copy of MessageReaction
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MessageReactionImplCopyWith<_$MessageReactionImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
</file>

<file path="lib/core/models/message.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'message.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
_$MessageImpl _$$MessageImplFromJson(Map<String, dynamic> json) =>
    _$MessageImpl(
      id: json['id'] as String,
      senderId: json['senderId'] as String,
      receiverId: json['receiverId'] as String,
      content: json['content'] as String,
      type: $enumDecodeNullable(_$MessageTypeEnumMap, json['type']) ??
          MessageType.text,
      status: $enumDecodeNullable(_$MessageStatusEnumMap, json['status']) ??
          MessageStatus.sending,
      mediaUrl: json['mediaUrl'] as String?,
      thumbnailUrl: json['thumbnailUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
      expiresAt: json['expiresAt'] == null
          ? null
          : DateTime.parse(json['expiresAt'] as String),
      replyToMessageId: json['replyToMessageId'] as String?,
      isEdited: json['isEdited'] as bool? ?? false,
      editedAt: json['editedAt'] == null
          ? null
          : DateTime.parse(json['editedAt'] as String),
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      sender: json['sender'] == null
          ? null
          : User.fromJson(json['sender'] as Map<String, dynamic>),
      plantId: json['plantId'] as String?,
      plantData: json['plantData'] as Map<String, dynamic>?,
    );
Map<String, dynamic> _$$MessageImplToJson(_$MessageImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'senderId': instance.senderId,
      'receiverId': instance.receiverId,
      'content': instance.content,
      'type': _$MessageTypeEnumMap[instance.type]!,
      'status': _$MessageStatusEnumMap[instance.status]!,
      'mediaUrl': instance.mediaUrl,
      'thumbnailUrl': instance.thumbnailUrl,
      'metadata': instance.metadata,
      'expiresAt': instance.expiresAt?.toIso8601String(),
      'replyToMessageId': instance.replyToMessageId,
      'isEdited': instance.isEdited,
      'editedAt': instance.editedAt?.toIso8601String(),
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'sender': instance.sender,
      'plantId': instance.plantId,
      'plantData': instance.plantData,
    };
const _$MessageTypeEnumMap = {
  MessageType.text: 'text',
  MessageType.image: 'image',
  MessageType.video: 'video',
  MessageType.audio: 'audio',
  MessageType.file: 'file',
  MessageType.location: 'location',
  MessageType.plant_identification: 'plant_identification',
  MessageType.plant_care_tip: 'plant_care_tip',
};
const _$MessageStatusEnumMap = {
  MessageStatus.sending: 'sending',
  MessageStatus.sent: 'sent',
  MessageStatus.delivered: 'delivered',
  MessageStatus.read: 'read',
  MessageStatus.failed: 'failed',
};
_$ConversationImpl _$$ConversationImplFromJson(Map<String, dynamic> json) =>
    _$ConversationImpl(
      id: json['id'] as String,
      userId: json['userId'] as String,
      otherUserId: json['otherUserId'] as String,
      lastMessage: json['lastMessage'] == null
          ? null
          : Message.fromJson(json['lastMessage'] as Map<String, dynamic>),
      unreadCount: (json['unreadCount'] as num?)?.toInt() ?? 0,
      isMuted: json['isMuted'] as bool? ?? false,
      isArchived: json['isArchived'] as bool? ?? false,
      isBlocked: json['isBlocked'] as bool? ?? false,
      lastReadAt: json['lastReadAt'] == null
          ? null
          : DateTime.parse(json['lastReadAt'] as String),
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      otherUser: json['otherUser'] == null
          ? null
          : User.fromJson(json['otherUser'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$$ConversationImplToJson(_$ConversationImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'otherUserId': instance.otherUserId,
      'lastMessage': instance.lastMessage,
      'unreadCount': instance.unreadCount,
      'isMuted': instance.isMuted,
      'isArchived': instance.isArchived,
      'isBlocked': instance.isBlocked,
      'lastReadAt': instance.lastReadAt?.toIso8601String(),
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'otherUser': instance.otherUser,
    };
_$SendMessageRequestImpl _$$SendMessageRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$SendMessageRequestImpl(
      receiverId: json['receiverId'] as String,
      content: json['content'] as String,
      type: $enumDecodeNullable(_$MessageTypeEnumMap, json['type']) ??
          MessageType.text,
      mediaUrl: json['mediaUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
      expiresAt: json['expiresAt'] == null
          ? null
          : DateTime.parse(json['expiresAt'] as String),
      replyToMessageId: json['replyToMessageId'] as String?,
      plantId: json['plantId'] as String?,
      plantData: json['plantData'] as Map<String, dynamic>?,
    );
Map<String, dynamic> _$$SendMessageRequestImplToJson(
        _$SendMessageRequestImpl instance) =>
    <String, dynamic>{
      'receiverId': instance.receiverId,
      'content': instance.content,
      'type': _$MessageTypeEnumMap[instance.type]!,
      'mediaUrl': instance.mediaUrl,
      'metadata': instance.metadata,
      'expiresAt': instance.expiresAt?.toIso8601String(),
      'replyToMessageId': instance.replyToMessageId,
      'plantId': instance.plantId,
      'plantData': instance.plantData,
    };
_$MessageReactionImpl _$$MessageReactionImplFromJson(
        Map<String, dynamic> json) =>
    _$MessageReactionImpl(
      id: json['id'] as String,
      messageId: json['messageId'] as String,
      userId: json['userId'] as String,
      emoji: json['emoji'] as String,
      createdAt: DateTime.parse(json['createdAt'] as String),
      user: json['user'] == null
          ? null
          : User.fromJson(json['user'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$$MessageReactionImplToJson(
        _$MessageReactionImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'messageId': instance.messageId,
      'userId': instance.userId,
      'emoji': instance.emoji,
      'createdAt': instance.createdAt.toIso8601String(),
      'user': instance.user,
    };
</file>

<file path="lib/core/models/story.dart">
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:plant_social/core/models/user.dart';
part 'story.freezed.dart';
part 'story.g.dart';
enum StoryType {
  image,
  video,
  text,
  plant_progress, // Phase 2
  plant_care_tip, // Phase 2
  plant_identification, // Phase 2
}
enum StoryPrivacyLevel {
  public,
  friends,
  close_friends,
  private,
}
@freezed
class Story with _$Story {
  const factory Story({
    required String id,
    required String userId,
    required String content,
    @Default(StoryType.image) StoryType type,
    @Default(StoryPrivacyLevel.public) StoryPrivacyLevel privacyLevel,
    String? mediaUrl,
    String? thumbnailUrl,
    Map<String, dynamic>? metadata,
    @Default([]) List<String> tags,
    String? location,
    @Default(0) int viewsCount,
    @Default(0) int likesCount,
    @Default(0) int commentsCount,
    DateTime? expiresAt,
    @Default(false) bool isArchived,
    required DateTime createdAt,
    DateTime? updatedAt,
    // User info (populated from join)
    User? user,
    // Viewer's interaction status
    @Default(false) bool hasViewed,
    @Default(false) bool hasLiked,
    // Plant-specific fields for Phase 2
    String? plantId,
    Map<String, dynamic>? plantData,
    String? careStage, // 'seedling', 'growing', 'flowering', 'fruiting'
    List<String>? careTips,
  }) = _Story;
  factory Story.fromJson(Map<String, dynamic> json) => _$StoryFromJson(json);
}
@freezed
class StoryView with _$StoryView {
  const factory StoryView({
    required String id,
    required String storyId,
    required String userId,
    required DateTime viewedAt,
    // User info (populated from join)
    User? user,
  }) = _StoryView;
  factory StoryView.fromJson(Map<String, dynamic> json) => _$StoryViewFromJson(json);
}
@freezed
class StoryLike with _$StoryLike {
  const factory StoryLike({
    required String id,
    required String storyId,
    required String userId,
    required DateTime createdAt,
    // User info (populated from join)
    User? user,
  }) = _StoryLike;
  factory StoryLike.fromJson(Map<String, dynamic> json) => _$StoryLikeFromJson(json);
}
@freezed
class StoryComment with _$StoryComment {
  const factory StoryComment({
    required String id,
    required String storyId,
    required String userId,
    required String content,
    String? parentCommentId,
    @Default(0) int likesCount,
    @Default(false) bool hasLiked,
    required DateTime createdAt,
    DateTime? updatedAt,
    // User info (populated from join)
    User? user,
    // Replies (if it's a parent comment)
    @Default([]) List<StoryComment> replies,
  }) = _StoryComment;
  factory StoryComment.fromJson(Map<String, dynamic> json) => _$StoryCommentFromJson(json);
}
@freezed
class CreateStoryRequest with _$CreateStoryRequest {
  const factory CreateStoryRequest({
    required String content,
    @Default(StoryType.image) StoryType type,
    @Default(StoryPrivacyLevel.public) StoryPrivacyLevel privacyLevel,
    String? mediaUrl,
    Map<String, dynamic>? metadata,
    List<String>? tags,
    String? location,
    DateTime? expiresAt,
    String? plantId,
    Map<String, dynamic>? plantData,
    String? careStage,
    List<String>? careTips,
  }) = _CreateStoryRequest;
  factory CreateStoryRequest.fromJson(Map<String, dynamic> json) => _$CreateStoryRequestFromJson(json);
}
@freezed
class StoryFeed with _$StoryFeed {
  const factory StoryFeed({
    required String userId,
    required User user,
    @Default([]) List<Story> stories,
    @Default(false) bool hasUnviewedStories,
  }) = _StoryFeed;
  factory StoryFeed.fromJson(Map<String, dynamic> json) => _$StoryFeedFromJson(json);
}
</file>

<file path="lib/core/models/story.freezed.dart">
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark
part of 'story.dart';
// **************************************************************************
// FreezedGenerator
// **************************************************************************
T _$identity<T>(T value) => value;
final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');
Story _$StoryFromJson(Map<String, dynamic> json) {
  return _Story.fromJson(json);
}
/// @nodoc
mixin _$Story {
  String get id => throw _privateConstructorUsedError;
  String get userId => throw _privateConstructorUsedError;
  String get content => throw _privateConstructorUsedError;
  StoryType get type => throw _privateConstructorUsedError;
  StoryPrivacyLevel get privacyLevel => throw _privateConstructorUsedError;
  String? get mediaUrl => throw _privateConstructorUsedError;
  String? get thumbnailUrl => throw _privateConstructorUsedError;
  Map<String, dynamic>? get metadata => throw _privateConstructorUsedError;
  List<String> get tags => throw _privateConstructorUsedError;
  String? get location => throw _privateConstructorUsedError;
  int get viewsCount => throw _privateConstructorUsedError;
  int get likesCount => throw _privateConstructorUsedError;
  int get commentsCount => throw _privateConstructorUsedError;
  DateTime? get expiresAt => throw _privateConstructorUsedError;
  bool get isArchived => throw _privateConstructorUsedError;
  DateTime get createdAt => throw _privateConstructorUsedError;
  DateTime? get updatedAt =>
      throw _privateConstructorUsedError; // User info (populated from join)
  User? get user =>
      throw _privateConstructorUsedError; // Viewer's interaction status
  bool get hasViewed => throw _privateConstructorUsedError;
  bool get hasLiked =>
      throw _privateConstructorUsedError; // Plant-specific fields for Phase 2
  String? get plantId => throw _privateConstructorUsedError;
  Map<String, dynamic>? get plantData => throw _privateConstructorUsedError;
  String? get careStage =>
      throw _privateConstructorUsedError; // 'seedling', 'growing', 'flowering', 'fruiting'
  List<String>? get careTips => throw _privateConstructorUsedError;
  /// Serializes this Story to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of Story
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $StoryCopyWith<Story> get copyWith => throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $StoryCopyWith<$Res> {
  factory $StoryCopyWith(Story value, $Res Function(Story) then) =
      _$StoryCopyWithImpl<$Res, Story>;
  @useResult
  $Res call(
      {String id,
      String userId,
      String content,
      StoryType type,
      StoryPrivacyLevel privacyLevel,
      String? mediaUrl,
      String? thumbnailUrl,
      Map<String, dynamic>? metadata,
      List<String> tags,
      String? location,
      int viewsCount,
      int likesCount,
      int commentsCount,
      DateTime? expiresAt,
      bool isArchived,
      DateTime createdAt,
      DateTime? updatedAt,
      User? user,
      bool hasViewed,
      bool hasLiked,
      String? plantId,
      Map<String, dynamic>? plantData,
      String? careStage,
      List<String>? careTips});
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class _$StoryCopyWithImpl<$Res, $Val extends Story>
    implements $StoryCopyWith<$Res> {
  _$StoryCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of Story
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? userId = null,
    Object? content = null,
    Object? type = null,
    Object? privacyLevel = null,
    Object? mediaUrl = freezed,
    Object? thumbnailUrl = freezed,
    Object? metadata = freezed,
    Object? tags = null,
    Object? location = freezed,
    Object? viewsCount = null,
    Object? likesCount = null,
    Object? commentsCount = null,
    Object? expiresAt = freezed,
    Object? isArchived = null,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? user = freezed,
    Object? hasViewed = null,
    Object? hasLiked = null,
    Object? plantId = freezed,
    Object? plantData = freezed,
    Object? careStage = freezed,
    Object? careTips = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as StoryType,
      privacyLevel: null == privacyLevel
          ? _value.privacyLevel
          : privacyLevel // ignore: cast_nullable_to_non_nullable
              as StoryPrivacyLevel,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      thumbnailUrl: freezed == thumbnailUrl
          ? _value.thumbnailUrl
          : thumbnailUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value.metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      tags: null == tags
          ? _value.tags
          : tags // ignore: cast_nullable_to_non_nullable
              as List<String>,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      viewsCount: null == viewsCount
          ? _value.viewsCount
          : viewsCount // ignore: cast_nullable_to_non_nullable
              as int,
      likesCount: null == likesCount
          ? _value.likesCount
          : likesCount // ignore: cast_nullable_to_non_nullable
              as int,
      commentsCount: null == commentsCount
          ? _value.commentsCount
          : commentsCount // ignore: cast_nullable_to_non_nullable
              as int,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      isArchived: null == isArchived
          ? _value.isArchived
          : isArchived // ignore: cast_nullable_to_non_nullable
              as bool,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
      hasViewed: null == hasViewed
          ? _value.hasViewed
          : hasViewed // ignore: cast_nullable_to_non_nullable
              as bool,
      hasLiked: null == hasLiked
          ? _value.hasLiked
          : hasLiked // ignore: cast_nullable_to_non_nullable
              as bool,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value.plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      careStage: freezed == careStage
          ? _value.careStage
          : careStage // ignore: cast_nullable_to_non_nullable
              as String?,
      careTips: freezed == careTips
          ? _value.careTips
          : careTips // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ) as $Val);
  }
  /// Create a copy of Story
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get user {
    if (_value.user == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.user!, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$StoryImplCopyWith<$Res> implements $StoryCopyWith<$Res> {
  factory _$$StoryImplCopyWith(
          _$StoryImpl value, $Res Function(_$StoryImpl) then) =
      __$$StoryImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String userId,
      String content,
      StoryType type,
      StoryPrivacyLevel privacyLevel,
      String? mediaUrl,
      String? thumbnailUrl,
      Map<String, dynamic>? metadata,
      List<String> tags,
      String? location,
      int viewsCount,
      int likesCount,
      int commentsCount,
      DateTime? expiresAt,
      bool isArchived,
      DateTime createdAt,
      DateTime? updatedAt,
      User? user,
      bool hasViewed,
      bool hasLiked,
      String? plantId,
      Map<String, dynamic>? plantData,
      String? careStage,
      List<String>? careTips});
  @override
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class __$$StoryImplCopyWithImpl<$Res>
    extends _$StoryCopyWithImpl<$Res, _$StoryImpl>
    implements _$$StoryImplCopyWith<$Res> {
  __$$StoryImplCopyWithImpl(
      _$StoryImpl _value, $Res Function(_$StoryImpl) _then)
      : super(_value, _then);
  /// Create a copy of Story
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? userId = null,
    Object? content = null,
    Object? type = null,
    Object? privacyLevel = null,
    Object? mediaUrl = freezed,
    Object? thumbnailUrl = freezed,
    Object? metadata = freezed,
    Object? tags = null,
    Object? location = freezed,
    Object? viewsCount = null,
    Object? likesCount = null,
    Object? commentsCount = null,
    Object? expiresAt = freezed,
    Object? isArchived = null,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? user = freezed,
    Object? hasViewed = null,
    Object? hasLiked = null,
    Object? plantId = freezed,
    Object? plantData = freezed,
    Object? careStage = freezed,
    Object? careTips = freezed,
  }) {
    return _then(_$StoryImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as StoryType,
      privacyLevel: null == privacyLevel
          ? _value.privacyLevel
          : privacyLevel // ignore: cast_nullable_to_non_nullable
              as StoryPrivacyLevel,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      thumbnailUrl: freezed == thumbnailUrl
          ? _value.thumbnailUrl
          : thumbnailUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value._metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      tags: null == tags
          ? _value._tags
          : tags // ignore: cast_nullable_to_non_nullable
              as List<String>,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      viewsCount: null == viewsCount
          ? _value.viewsCount
          : viewsCount // ignore: cast_nullable_to_non_nullable
              as int,
      likesCount: null == likesCount
          ? _value.likesCount
          : likesCount // ignore: cast_nullable_to_non_nullable
              as int,
      commentsCount: null == commentsCount
          ? _value.commentsCount
          : commentsCount // ignore: cast_nullable_to_non_nullable
              as int,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      isArchived: null == isArchived
          ? _value.isArchived
          : isArchived // ignore: cast_nullable_to_non_nullable
              as bool,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
      hasViewed: null == hasViewed
          ? _value.hasViewed
          : hasViewed // ignore: cast_nullable_to_non_nullable
              as bool,
      hasLiked: null == hasLiked
          ? _value.hasLiked
          : hasLiked // ignore: cast_nullable_to_non_nullable
              as bool,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value._plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      careStage: freezed == careStage
          ? _value.careStage
          : careStage // ignore: cast_nullable_to_non_nullable
              as String?,
      careTips: freezed == careTips
          ? _value._careTips
          : careTips // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$StoryImpl implements _Story {
  const _$StoryImpl(
      {required this.id,
      required this.userId,
      required this.content,
      this.type = StoryType.image,
      this.privacyLevel = StoryPrivacyLevel.public,
      this.mediaUrl,
      this.thumbnailUrl,
      final Map<String, dynamic>? metadata,
      final List<String> tags = const [],
      this.location,
      this.viewsCount = 0,
      this.likesCount = 0,
      this.commentsCount = 0,
      this.expiresAt,
      this.isArchived = false,
      required this.createdAt,
      this.updatedAt,
      this.user,
      this.hasViewed = false,
      this.hasLiked = false,
      this.plantId,
      final Map<String, dynamic>? plantData,
      this.careStage,
      final List<String>? careTips})
      : _metadata = metadata,
        _tags = tags,
        _plantData = plantData,
        _careTips = careTips;
  factory _$StoryImpl.fromJson(Map<String, dynamic> json) =>
      _$$StoryImplFromJson(json);
  @override
  final String id;
  @override
  final String userId;
  @override
  final String content;
  @override
  @JsonKey()
  final StoryType type;
  @override
  @JsonKey()
  final StoryPrivacyLevel privacyLevel;
  @override
  final String? mediaUrl;
  @override
  final String? thumbnailUrl;
  final Map<String, dynamic>? _metadata;
  @override
  Map<String, dynamic>? get metadata {
    final value = _metadata;
    if (value == null) return null;
    if (_metadata is EqualUnmodifiableMapView) return _metadata;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  final List<String> _tags;
  @override
  @JsonKey()
  List<String> get tags {
    if (_tags is EqualUnmodifiableListView) return _tags;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_tags);
  }
  @override
  final String? location;
  @override
  @JsonKey()
  final int viewsCount;
  @override
  @JsonKey()
  final int likesCount;
  @override
  @JsonKey()
  final int commentsCount;
  @override
  final DateTime? expiresAt;
  @override
  @JsonKey()
  final bool isArchived;
  @override
  final DateTime createdAt;
  @override
  final DateTime? updatedAt;
// User info (populated from join)
  @override
  final User? user;
// Viewer's interaction status
  @override
  @JsonKey()
  final bool hasViewed;
  @override
  @JsonKey()
  final bool hasLiked;
// Plant-specific fields for Phase 2
  @override
  final String? plantId;
  final Map<String, dynamic>? _plantData;
  @override
  Map<String, dynamic>? get plantData {
    final value = _plantData;
    if (value == null) return null;
    if (_plantData is EqualUnmodifiableMapView) return _plantData;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  @override
  final String? careStage;
// 'seedling', 'growing', 'flowering', 'fruiting'
  final List<String>? _careTips;
// 'seedling', 'growing', 'flowering', 'fruiting'
  @override
  List<String>? get careTips {
    final value = _careTips;
    if (value == null) return null;
    if (_careTips is EqualUnmodifiableListView) return _careTips;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }
  @override
  String toString() {
    return 'Story(id: $id, userId: $userId, content: $content, type: $type, privacyLevel: $privacyLevel, mediaUrl: $mediaUrl, thumbnailUrl: $thumbnailUrl, metadata: $metadata, tags: $tags, location: $location, viewsCount: $viewsCount, likesCount: $likesCount, commentsCount: $commentsCount, expiresAt: $expiresAt, isArchived: $isArchived, createdAt: $createdAt, updatedAt: $updatedAt, user: $user, hasViewed: $hasViewed, hasLiked: $hasLiked, plantId: $plantId, plantData: $plantData, careStage: $careStage, careTips: $careTips)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StoryImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.content, content) || other.content == content) &&
            (identical(other.type, type) || other.type == type) &&
            (identical(other.privacyLevel, privacyLevel) ||
                other.privacyLevel == privacyLevel) &&
            (identical(other.mediaUrl, mediaUrl) ||
                other.mediaUrl == mediaUrl) &&
            (identical(other.thumbnailUrl, thumbnailUrl) ||
                other.thumbnailUrl == thumbnailUrl) &&
            const DeepCollectionEquality().equals(other._metadata, _metadata) &&
            const DeepCollectionEquality().equals(other._tags, _tags) &&
            (identical(other.location, location) ||
                other.location == location) &&
            (identical(other.viewsCount, viewsCount) ||
                other.viewsCount == viewsCount) &&
            (identical(other.likesCount, likesCount) ||
                other.likesCount == likesCount) &&
            (identical(other.commentsCount, commentsCount) ||
                other.commentsCount == commentsCount) &&
            (identical(other.expiresAt, expiresAt) ||
                other.expiresAt == expiresAt) &&
            (identical(other.isArchived, isArchived) ||
                other.isArchived == isArchived) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.updatedAt, updatedAt) ||
                other.updatedAt == updatedAt) &&
            (identical(other.user, user) || other.user == user) &&
            (identical(other.hasViewed, hasViewed) ||
                other.hasViewed == hasViewed) &&
            (identical(other.hasLiked, hasLiked) ||
                other.hasLiked == hasLiked) &&
            (identical(other.plantId, plantId) || other.plantId == plantId) &&
            const DeepCollectionEquality()
                .equals(other._plantData, _plantData) &&
            (identical(other.careStage, careStage) ||
                other.careStage == careStage) &&
            const DeepCollectionEquality().equals(other._careTips, _careTips));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        userId,
        content,
        type,
        privacyLevel,
        mediaUrl,
        thumbnailUrl,
        const DeepCollectionEquality().hash(_metadata),
        const DeepCollectionEquality().hash(_tags),
        location,
        viewsCount,
        likesCount,
        commentsCount,
        expiresAt,
        isArchived,
        createdAt,
        updatedAt,
        user,
        hasViewed,
        hasLiked,
        plantId,
        const DeepCollectionEquality().hash(_plantData),
        careStage,
        const DeepCollectionEquality().hash(_careTips)
      ]);
  /// Create a copy of Story
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$StoryImplCopyWith<_$StoryImpl> get copyWith =>
      __$$StoryImplCopyWithImpl<_$StoryImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$StoryImplToJson(
      this,
    );
  }
}
abstract class _Story implements Story {
  const factory _Story(
      {required final String id,
      required final String userId,
      required final String content,
      final StoryType type,
      final StoryPrivacyLevel privacyLevel,
      final String? mediaUrl,
      final String? thumbnailUrl,
      final Map<String, dynamic>? metadata,
      final List<String> tags,
      final String? location,
      final int viewsCount,
      final int likesCount,
      final int commentsCount,
      final DateTime? expiresAt,
      final bool isArchived,
      required final DateTime createdAt,
      final DateTime? updatedAt,
      final User? user,
      final bool hasViewed,
      final bool hasLiked,
      final String? plantId,
      final Map<String, dynamic>? plantData,
      final String? careStage,
      final List<String>? careTips}) = _$StoryImpl;
  factory _Story.fromJson(Map<String, dynamic> json) = _$StoryImpl.fromJson;
  @override
  String get id;
  @override
  String get userId;
  @override
  String get content;
  @override
  StoryType get type;
  @override
  StoryPrivacyLevel get privacyLevel;
  @override
  String? get mediaUrl;
  @override
  String? get thumbnailUrl;
  @override
  Map<String, dynamic>? get metadata;
  @override
  List<String> get tags;
  @override
  String? get location;
  @override
  int get viewsCount;
  @override
  int get likesCount;
  @override
  int get commentsCount;
  @override
  DateTime? get expiresAt;
  @override
  bool get isArchived;
  @override
  DateTime get createdAt;
  @override
  DateTime? get updatedAt; // User info (populated from join)
  @override
  User? get user; // Viewer's interaction status
  @override
  bool get hasViewed;
  @override
  bool get hasLiked; // Plant-specific fields for Phase 2
  @override
  String? get plantId;
  @override
  Map<String, dynamic>? get plantData;
  @override
  String? get careStage; // 'seedling', 'growing', 'flowering', 'fruiting'
  @override
  List<String>? get careTips;
  /// Create a copy of Story
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$StoryImplCopyWith<_$StoryImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
StoryView _$StoryViewFromJson(Map<String, dynamic> json) {
  return _StoryView.fromJson(json);
}
/// @nodoc
mixin _$StoryView {
  String get id => throw _privateConstructorUsedError;
  String get storyId => throw _privateConstructorUsedError;
  String get userId => throw _privateConstructorUsedError;
  DateTime get viewedAt =>
      throw _privateConstructorUsedError; // User info (populated from join)
  User? get user => throw _privateConstructorUsedError;
  /// Serializes this StoryView to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of StoryView
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $StoryViewCopyWith<StoryView> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $StoryViewCopyWith<$Res> {
  factory $StoryViewCopyWith(StoryView value, $Res Function(StoryView) then) =
      _$StoryViewCopyWithImpl<$Res, StoryView>;
  @useResult
  $Res call(
      {String id,
      String storyId,
      String userId,
      DateTime viewedAt,
      User? user});
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class _$StoryViewCopyWithImpl<$Res, $Val extends StoryView>
    implements $StoryViewCopyWith<$Res> {
  _$StoryViewCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of StoryView
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? storyId = null,
    Object? userId = null,
    Object? viewedAt = null,
    Object? user = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      storyId: null == storyId
          ? _value.storyId
          : storyId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      viewedAt: null == viewedAt
          ? _value.viewedAt
          : viewedAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
    ) as $Val);
  }
  /// Create a copy of StoryView
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get user {
    if (_value.user == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.user!, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$StoryViewImplCopyWith<$Res>
    implements $StoryViewCopyWith<$Res> {
  factory _$$StoryViewImplCopyWith(
          _$StoryViewImpl value, $Res Function(_$StoryViewImpl) then) =
      __$$StoryViewImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String storyId,
      String userId,
      DateTime viewedAt,
      User? user});
  @override
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class __$$StoryViewImplCopyWithImpl<$Res>
    extends _$StoryViewCopyWithImpl<$Res, _$StoryViewImpl>
    implements _$$StoryViewImplCopyWith<$Res> {
  __$$StoryViewImplCopyWithImpl(
      _$StoryViewImpl _value, $Res Function(_$StoryViewImpl) _then)
      : super(_value, _then);
  /// Create a copy of StoryView
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? storyId = null,
    Object? userId = null,
    Object? viewedAt = null,
    Object? user = freezed,
  }) {
    return _then(_$StoryViewImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      storyId: null == storyId
          ? _value.storyId
          : storyId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      viewedAt: null == viewedAt
          ? _value.viewedAt
          : viewedAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$StoryViewImpl implements _StoryView {
  const _$StoryViewImpl(
      {required this.id,
      required this.storyId,
      required this.userId,
      required this.viewedAt,
      this.user});
  factory _$StoryViewImpl.fromJson(Map<String, dynamic> json) =>
      _$$StoryViewImplFromJson(json);
  @override
  final String id;
  @override
  final String storyId;
  @override
  final String userId;
  @override
  final DateTime viewedAt;
// User info (populated from join)
  @override
  final User? user;
  @override
  String toString() {
    return 'StoryView(id: $id, storyId: $storyId, userId: $userId, viewedAt: $viewedAt, user: $user)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StoryViewImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.storyId, storyId) || other.storyId == storyId) &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.viewedAt, viewedAt) ||
                other.viewedAt == viewedAt) &&
            (identical(other.user, user) || other.user == user));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode =>
      Object.hash(runtimeType, id, storyId, userId, viewedAt, user);
  /// Create a copy of StoryView
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$StoryViewImplCopyWith<_$StoryViewImpl> get copyWith =>
      __$$StoryViewImplCopyWithImpl<_$StoryViewImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$StoryViewImplToJson(
      this,
    );
  }
}
abstract class _StoryView implements StoryView {
  const factory _StoryView(
      {required final String id,
      required final String storyId,
      required final String userId,
      required final DateTime viewedAt,
      final User? user}) = _$StoryViewImpl;
  factory _StoryView.fromJson(Map<String, dynamic> json) =
      _$StoryViewImpl.fromJson;
  @override
  String get id;
  @override
  String get storyId;
  @override
  String get userId;
  @override
  DateTime get viewedAt; // User info (populated from join)
  @override
  User? get user;
  /// Create a copy of StoryView
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$StoryViewImplCopyWith<_$StoryViewImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
StoryLike _$StoryLikeFromJson(Map<String, dynamic> json) {
  return _StoryLike.fromJson(json);
}
/// @nodoc
mixin _$StoryLike {
  String get id => throw _privateConstructorUsedError;
  String get storyId => throw _privateConstructorUsedError;
  String get userId => throw _privateConstructorUsedError;
  DateTime get createdAt =>
      throw _privateConstructorUsedError; // User info (populated from join)
  User? get user => throw _privateConstructorUsedError;
  /// Serializes this StoryLike to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of StoryLike
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $StoryLikeCopyWith<StoryLike> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $StoryLikeCopyWith<$Res> {
  factory $StoryLikeCopyWith(StoryLike value, $Res Function(StoryLike) then) =
      _$StoryLikeCopyWithImpl<$Res, StoryLike>;
  @useResult
  $Res call(
      {String id,
      String storyId,
      String userId,
      DateTime createdAt,
      User? user});
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class _$StoryLikeCopyWithImpl<$Res, $Val extends StoryLike>
    implements $StoryLikeCopyWith<$Res> {
  _$StoryLikeCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of StoryLike
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? storyId = null,
    Object? userId = null,
    Object? createdAt = null,
    Object? user = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      storyId: null == storyId
          ? _value.storyId
          : storyId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
    ) as $Val);
  }
  /// Create a copy of StoryLike
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get user {
    if (_value.user == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.user!, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$StoryLikeImplCopyWith<$Res>
    implements $StoryLikeCopyWith<$Res> {
  factory _$$StoryLikeImplCopyWith(
          _$StoryLikeImpl value, $Res Function(_$StoryLikeImpl) then) =
      __$$StoryLikeImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String storyId,
      String userId,
      DateTime createdAt,
      User? user});
  @override
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class __$$StoryLikeImplCopyWithImpl<$Res>
    extends _$StoryLikeCopyWithImpl<$Res, _$StoryLikeImpl>
    implements _$$StoryLikeImplCopyWith<$Res> {
  __$$StoryLikeImplCopyWithImpl(
      _$StoryLikeImpl _value, $Res Function(_$StoryLikeImpl) _then)
      : super(_value, _then);
  /// Create a copy of StoryLike
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? storyId = null,
    Object? userId = null,
    Object? createdAt = null,
    Object? user = freezed,
  }) {
    return _then(_$StoryLikeImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      storyId: null == storyId
          ? _value.storyId
          : storyId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$StoryLikeImpl implements _StoryLike {
  const _$StoryLikeImpl(
      {required this.id,
      required this.storyId,
      required this.userId,
      required this.createdAt,
      this.user});
  factory _$StoryLikeImpl.fromJson(Map<String, dynamic> json) =>
      _$$StoryLikeImplFromJson(json);
  @override
  final String id;
  @override
  final String storyId;
  @override
  final String userId;
  @override
  final DateTime createdAt;
// User info (populated from join)
  @override
  final User? user;
  @override
  String toString() {
    return 'StoryLike(id: $id, storyId: $storyId, userId: $userId, createdAt: $createdAt, user: $user)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StoryLikeImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.storyId, storyId) || other.storyId == storyId) &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.user, user) || other.user == user));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode =>
      Object.hash(runtimeType, id, storyId, userId, createdAt, user);
  /// Create a copy of StoryLike
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$StoryLikeImplCopyWith<_$StoryLikeImpl> get copyWith =>
      __$$StoryLikeImplCopyWithImpl<_$StoryLikeImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$StoryLikeImplToJson(
      this,
    );
  }
}
abstract class _StoryLike implements StoryLike {
  const factory _StoryLike(
      {required final String id,
      required final String storyId,
      required final String userId,
      required final DateTime createdAt,
      final User? user}) = _$StoryLikeImpl;
  factory _StoryLike.fromJson(Map<String, dynamic> json) =
      _$StoryLikeImpl.fromJson;
  @override
  String get id;
  @override
  String get storyId;
  @override
  String get userId;
  @override
  DateTime get createdAt; // User info (populated from join)
  @override
  User? get user;
  /// Create a copy of StoryLike
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$StoryLikeImplCopyWith<_$StoryLikeImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
StoryComment _$StoryCommentFromJson(Map<String, dynamic> json) {
  return _StoryComment.fromJson(json);
}
/// @nodoc
mixin _$StoryComment {
  String get id => throw _privateConstructorUsedError;
  String get storyId => throw _privateConstructorUsedError;
  String get userId => throw _privateConstructorUsedError;
  String get content => throw _privateConstructorUsedError;
  String? get parentCommentId => throw _privateConstructorUsedError;
  int get likesCount => throw _privateConstructorUsedError;
  bool get hasLiked => throw _privateConstructorUsedError;
  DateTime get createdAt => throw _privateConstructorUsedError;
  DateTime? get updatedAt =>
      throw _privateConstructorUsedError; // User info (populated from join)
  User? get user =>
      throw _privateConstructorUsedError; // Replies (if it's a parent comment)
  List<StoryComment> get replies => throw _privateConstructorUsedError;
  /// Serializes this StoryComment to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of StoryComment
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $StoryCommentCopyWith<StoryComment> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $StoryCommentCopyWith<$Res> {
  factory $StoryCommentCopyWith(
          StoryComment value, $Res Function(StoryComment) then) =
      _$StoryCommentCopyWithImpl<$Res, StoryComment>;
  @useResult
  $Res call(
      {String id,
      String storyId,
      String userId,
      String content,
      String? parentCommentId,
      int likesCount,
      bool hasLiked,
      DateTime createdAt,
      DateTime? updatedAt,
      User? user,
      List<StoryComment> replies});
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class _$StoryCommentCopyWithImpl<$Res, $Val extends StoryComment>
    implements $StoryCommentCopyWith<$Res> {
  _$StoryCommentCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of StoryComment
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? storyId = null,
    Object? userId = null,
    Object? content = null,
    Object? parentCommentId = freezed,
    Object? likesCount = null,
    Object? hasLiked = null,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? user = freezed,
    Object? replies = null,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      storyId: null == storyId
          ? _value.storyId
          : storyId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      parentCommentId: freezed == parentCommentId
          ? _value.parentCommentId
          : parentCommentId // ignore: cast_nullable_to_non_nullable
              as String?,
      likesCount: null == likesCount
          ? _value.likesCount
          : likesCount // ignore: cast_nullable_to_non_nullable
              as int,
      hasLiked: null == hasLiked
          ? _value.hasLiked
          : hasLiked // ignore: cast_nullable_to_non_nullable
              as bool,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
      replies: null == replies
          ? _value.replies
          : replies // ignore: cast_nullable_to_non_nullable
              as List<StoryComment>,
    ) as $Val);
  }
  /// Create a copy of StoryComment
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res>? get user {
    if (_value.user == null) {
      return null;
    }
    return $UserCopyWith<$Res>(_value.user!, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$StoryCommentImplCopyWith<$Res>
    implements $StoryCommentCopyWith<$Res> {
  factory _$$StoryCommentImplCopyWith(
          _$StoryCommentImpl value, $Res Function(_$StoryCommentImpl) then) =
      __$$StoryCommentImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String storyId,
      String userId,
      String content,
      String? parentCommentId,
      int likesCount,
      bool hasLiked,
      DateTime createdAt,
      DateTime? updatedAt,
      User? user,
      List<StoryComment> replies});
  @override
  $UserCopyWith<$Res>? get user;
}
/// @nodoc
class __$$StoryCommentImplCopyWithImpl<$Res>
    extends _$StoryCommentCopyWithImpl<$Res, _$StoryCommentImpl>
    implements _$$StoryCommentImplCopyWith<$Res> {
  __$$StoryCommentImplCopyWithImpl(
      _$StoryCommentImpl _value, $Res Function(_$StoryCommentImpl) _then)
      : super(_value, _then);
  /// Create a copy of StoryComment
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? storyId = null,
    Object? userId = null,
    Object? content = null,
    Object? parentCommentId = freezed,
    Object? likesCount = null,
    Object? hasLiked = null,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? user = freezed,
    Object? replies = null,
  }) {
    return _then(_$StoryCommentImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      storyId: null == storyId
          ? _value.storyId
          : storyId // ignore: cast_nullable_to_non_nullable
              as String,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      parentCommentId: freezed == parentCommentId
          ? _value.parentCommentId
          : parentCommentId // ignore: cast_nullable_to_non_nullable
              as String?,
      likesCount: null == likesCount
          ? _value.likesCount
          : likesCount // ignore: cast_nullable_to_non_nullable
              as int,
      hasLiked: null == hasLiked
          ? _value.hasLiked
          : hasLiked // ignore: cast_nullable_to_non_nullable
              as bool,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      user: freezed == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User?,
      replies: null == replies
          ? _value._replies
          : replies // ignore: cast_nullable_to_non_nullable
              as List<StoryComment>,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$StoryCommentImpl implements _StoryComment {
  const _$StoryCommentImpl(
      {required this.id,
      required this.storyId,
      required this.userId,
      required this.content,
      this.parentCommentId,
      this.likesCount = 0,
      this.hasLiked = false,
      required this.createdAt,
      this.updatedAt,
      this.user,
      final List<StoryComment> replies = const []})
      : _replies = replies;
  factory _$StoryCommentImpl.fromJson(Map<String, dynamic> json) =>
      _$$StoryCommentImplFromJson(json);
  @override
  final String id;
  @override
  final String storyId;
  @override
  final String userId;
  @override
  final String content;
  @override
  final String? parentCommentId;
  @override
  @JsonKey()
  final int likesCount;
  @override
  @JsonKey()
  final bool hasLiked;
  @override
  final DateTime createdAt;
  @override
  final DateTime? updatedAt;
// User info (populated from join)
  @override
  final User? user;
// Replies (if it's a parent comment)
  final List<StoryComment> _replies;
// Replies (if it's a parent comment)
  @override
  @JsonKey()
  List<StoryComment> get replies {
    if (_replies is EqualUnmodifiableListView) return _replies;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_replies);
  }
  @override
  String toString() {
    return 'StoryComment(id: $id, storyId: $storyId, userId: $userId, content: $content, parentCommentId: $parentCommentId, likesCount: $likesCount, hasLiked: $hasLiked, createdAt: $createdAt, updatedAt: $updatedAt, user: $user, replies: $replies)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StoryCommentImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.storyId, storyId) || other.storyId == storyId) &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.content, content) || other.content == content) &&
            (identical(other.parentCommentId, parentCommentId) ||
                other.parentCommentId == parentCommentId) &&
            (identical(other.likesCount, likesCount) ||
                other.likesCount == likesCount) &&
            (identical(other.hasLiked, hasLiked) ||
                other.hasLiked == hasLiked) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.updatedAt, updatedAt) ||
                other.updatedAt == updatedAt) &&
            (identical(other.user, user) || other.user == user) &&
            const DeepCollectionEquality().equals(other._replies, _replies));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      storyId,
      userId,
      content,
      parentCommentId,
      likesCount,
      hasLiked,
      createdAt,
      updatedAt,
      user,
      const DeepCollectionEquality().hash(_replies));
  /// Create a copy of StoryComment
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$StoryCommentImplCopyWith<_$StoryCommentImpl> get copyWith =>
      __$$StoryCommentImplCopyWithImpl<_$StoryCommentImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$StoryCommentImplToJson(
      this,
    );
  }
}
abstract class _StoryComment implements StoryComment {
  const factory _StoryComment(
      {required final String id,
      required final String storyId,
      required final String userId,
      required final String content,
      final String? parentCommentId,
      final int likesCount,
      final bool hasLiked,
      required final DateTime createdAt,
      final DateTime? updatedAt,
      final User? user,
      final List<StoryComment> replies}) = _$StoryCommentImpl;
  factory _StoryComment.fromJson(Map<String, dynamic> json) =
      _$StoryCommentImpl.fromJson;
  @override
  String get id;
  @override
  String get storyId;
  @override
  String get userId;
  @override
  String get content;
  @override
  String? get parentCommentId;
  @override
  int get likesCount;
  @override
  bool get hasLiked;
  @override
  DateTime get createdAt;
  @override
  DateTime? get updatedAt; // User info (populated from join)
  @override
  User? get user; // Replies (if it's a parent comment)
  @override
  List<StoryComment> get replies;
  /// Create a copy of StoryComment
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$StoryCommentImplCopyWith<_$StoryCommentImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
CreateStoryRequest _$CreateStoryRequestFromJson(Map<String, dynamic> json) {
  return _CreateStoryRequest.fromJson(json);
}
/// @nodoc
mixin _$CreateStoryRequest {
  String get content => throw _privateConstructorUsedError;
  StoryType get type => throw _privateConstructorUsedError;
  StoryPrivacyLevel get privacyLevel => throw _privateConstructorUsedError;
  String? get mediaUrl => throw _privateConstructorUsedError;
  Map<String, dynamic>? get metadata => throw _privateConstructorUsedError;
  List<String>? get tags => throw _privateConstructorUsedError;
  String? get location => throw _privateConstructorUsedError;
  DateTime? get expiresAt => throw _privateConstructorUsedError;
  String? get plantId => throw _privateConstructorUsedError;
  Map<String, dynamic>? get plantData => throw _privateConstructorUsedError;
  String? get careStage => throw _privateConstructorUsedError;
  List<String>? get careTips => throw _privateConstructorUsedError;
  /// Serializes this CreateStoryRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of CreateStoryRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $CreateStoryRequestCopyWith<CreateStoryRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $CreateStoryRequestCopyWith<$Res> {
  factory $CreateStoryRequestCopyWith(
          CreateStoryRequest value, $Res Function(CreateStoryRequest) then) =
      _$CreateStoryRequestCopyWithImpl<$Res, CreateStoryRequest>;
  @useResult
  $Res call(
      {String content,
      StoryType type,
      StoryPrivacyLevel privacyLevel,
      String? mediaUrl,
      Map<String, dynamic>? metadata,
      List<String>? tags,
      String? location,
      DateTime? expiresAt,
      String? plantId,
      Map<String, dynamic>? plantData,
      String? careStage,
      List<String>? careTips});
}
/// @nodoc
class _$CreateStoryRequestCopyWithImpl<$Res, $Val extends CreateStoryRequest>
    implements $CreateStoryRequestCopyWith<$Res> {
  _$CreateStoryRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of CreateStoryRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? content = null,
    Object? type = null,
    Object? privacyLevel = null,
    Object? mediaUrl = freezed,
    Object? metadata = freezed,
    Object? tags = freezed,
    Object? location = freezed,
    Object? expiresAt = freezed,
    Object? plantId = freezed,
    Object? plantData = freezed,
    Object? careStage = freezed,
    Object? careTips = freezed,
  }) {
    return _then(_value.copyWith(
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as StoryType,
      privacyLevel: null == privacyLevel
          ? _value.privacyLevel
          : privacyLevel // ignore: cast_nullable_to_non_nullable
              as StoryPrivacyLevel,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value.metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      tags: freezed == tags
          ? _value.tags
          : tags // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value.plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      careStage: freezed == careStage
          ? _value.careStage
          : careStage // ignore: cast_nullable_to_non_nullable
              as String?,
      careTips: freezed == careTips
          ? _value.careTips
          : careTips // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$CreateStoryRequestImplCopyWith<$Res>
    implements $CreateStoryRequestCopyWith<$Res> {
  factory _$$CreateStoryRequestImplCopyWith(_$CreateStoryRequestImpl value,
          $Res Function(_$CreateStoryRequestImpl) then) =
      __$$CreateStoryRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String content,
      StoryType type,
      StoryPrivacyLevel privacyLevel,
      String? mediaUrl,
      Map<String, dynamic>? metadata,
      List<String>? tags,
      String? location,
      DateTime? expiresAt,
      String? plantId,
      Map<String, dynamic>? plantData,
      String? careStage,
      List<String>? careTips});
}
/// @nodoc
class __$$CreateStoryRequestImplCopyWithImpl<$Res>
    extends _$CreateStoryRequestCopyWithImpl<$Res, _$CreateStoryRequestImpl>
    implements _$$CreateStoryRequestImplCopyWith<$Res> {
  __$$CreateStoryRequestImplCopyWithImpl(_$CreateStoryRequestImpl _value,
      $Res Function(_$CreateStoryRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of CreateStoryRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? content = null,
    Object? type = null,
    Object? privacyLevel = null,
    Object? mediaUrl = freezed,
    Object? metadata = freezed,
    Object? tags = freezed,
    Object? location = freezed,
    Object? expiresAt = freezed,
    Object? plantId = freezed,
    Object? plantData = freezed,
    Object? careStage = freezed,
    Object? careTips = freezed,
  }) {
    return _then(_$CreateStoryRequestImpl(
      content: null == content
          ? _value.content
          : content // ignore: cast_nullable_to_non_nullable
              as String,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as StoryType,
      privacyLevel: null == privacyLevel
          ? _value.privacyLevel
          : privacyLevel // ignore: cast_nullable_to_non_nullable
              as StoryPrivacyLevel,
      mediaUrl: freezed == mediaUrl
          ? _value.mediaUrl
          : mediaUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      metadata: freezed == metadata
          ? _value._metadata
          : metadata // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      tags: freezed == tags
          ? _value._tags
          : tags // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      expiresAt: freezed == expiresAt
          ? _value.expiresAt
          : expiresAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      plantId: freezed == plantId
          ? _value.plantId
          : plantId // ignore: cast_nullable_to_non_nullable
              as String?,
      plantData: freezed == plantData
          ? _value._plantData
          : plantData // ignore: cast_nullable_to_non_nullable
              as Map<String, dynamic>?,
      careStage: freezed == careStage
          ? _value.careStage
          : careStage // ignore: cast_nullable_to_non_nullable
              as String?,
      careTips: freezed == careTips
          ? _value._careTips
          : careTips // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$CreateStoryRequestImpl implements _CreateStoryRequest {
  const _$CreateStoryRequestImpl(
      {required this.content,
      this.type = StoryType.image,
      this.privacyLevel = StoryPrivacyLevel.public,
      this.mediaUrl,
      final Map<String, dynamic>? metadata,
      final List<String>? tags,
      this.location,
      this.expiresAt,
      this.plantId,
      final Map<String, dynamic>? plantData,
      this.careStage,
      final List<String>? careTips})
      : _metadata = metadata,
        _tags = tags,
        _plantData = plantData,
        _careTips = careTips;
  factory _$CreateStoryRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$CreateStoryRequestImplFromJson(json);
  @override
  final String content;
  @override
  @JsonKey()
  final StoryType type;
  @override
  @JsonKey()
  final StoryPrivacyLevel privacyLevel;
  @override
  final String? mediaUrl;
  final Map<String, dynamic>? _metadata;
  @override
  Map<String, dynamic>? get metadata {
    final value = _metadata;
    if (value == null) return null;
    if (_metadata is EqualUnmodifiableMapView) return _metadata;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  final List<String>? _tags;
  @override
  List<String>? get tags {
    final value = _tags;
    if (value == null) return null;
    if (_tags is EqualUnmodifiableListView) return _tags;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }
  @override
  final String? location;
  @override
  final DateTime? expiresAt;
  @override
  final String? plantId;
  final Map<String, dynamic>? _plantData;
  @override
  Map<String, dynamic>? get plantData {
    final value = _plantData;
    if (value == null) return null;
    if (_plantData is EqualUnmodifiableMapView) return _plantData;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableMapView(value);
  }
  @override
  final String? careStage;
  final List<String>? _careTips;
  @override
  List<String>? get careTips {
    final value = _careTips;
    if (value == null) return null;
    if (_careTips is EqualUnmodifiableListView) return _careTips;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }
  @override
  String toString() {
    return 'CreateStoryRequest(content: $content, type: $type, privacyLevel: $privacyLevel, mediaUrl: $mediaUrl, metadata: $metadata, tags: $tags, location: $location, expiresAt: $expiresAt, plantId: $plantId, plantData: $plantData, careStage: $careStage, careTips: $careTips)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateStoryRequestImpl &&
            (identical(other.content, content) || other.content == content) &&
            (identical(other.type, type) || other.type == type) &&
            (identical(other.privacyLevel, privacyLevel) ||
                other.privacyLevel == privacyLevel) &&
            (identical(other.mediaUrl, mediaUrl) ||
                other.mediaUrl == mediaUrl) &&
            const DeepCollectionEquality().equals(other._metadata, _metadata) &&
            const DeepCollectionEquality().equals(other._tags, _tags) &&
            (identical(other.location, location) ||
                other.location == location) &&
            (identical(other.expiresAt, expiresAt) ||
                other.expiresAt == expiresAt) &&
            (identical(other.plantId, plantId) || other.plantId == plantId) &&
            const DeepCollectionEquality()
                .equals(other._plantData, _plantData) &&
            (identical(other.careStage, careStage) ||
                other.careStage == careStage) &&
            const DeepCollectionEquality().equals(other._careTips, _careTips));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      content,
      type,
      privacyLevel,
      mediaUrl,
      const DeepCollectionEquality().hash(_metadata),
      const DeepCollectionEquality().hash(_tags),
      location,
      expiresAt,
      plantId,
      const DeepCollectionEquality().hash(_plantData),
      careStage,
      const DeepCollectionEquality().hash(_careTips));
  /// Create a copy of CreateStoryRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CreateStoryRequestImplCopyWith<_$CreateStoryRequestImpl> get copyWith =>
      __$$CreateStoryRequestImplCopyWithImpl<_$CreateStoryRequestImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$CreateStoryRequestImplToJson(
      this,
    );
  }
}
abstract class _CreateStoryRequest implements CreateStoryRequest {
  const factory _CreateStoryRequest(
      {required final String content,
      final StoryType type,
      final StoryPrivacyLevel privacyLevel,
      final String? mediaUrl,
      final Map<String, dynamic>? metadata,
      final List<String>? tags,
      final String? location,
      final DateTime? expiresAt,
      final String? plantId,
      final Map<String, dynamic>? plantData,
      final String? careStage,
      final List<String>? careTips}) = _$CreateStoryRequestImpl;
  factory _CreateStoryRequest.fromJson(Map<String, dynamic> json) =
      _$CreateStoryRequestImpl.fromJson;
  @override
  String get content;
  @override
  StoryType get type;
  @override
  StoryPrivacyLevel get privacyLevel;
  @override
  String? get mediaUrl;
  @override
  Map<String, dynamic>? get metadata;
  @override
  List<String>? get tags;
  @override
  String? get location;
  @override
  DateTime? get expiresAt;
  @override
  String? get plantId;
  @override
  Map<String, dynamic>? get plantData;
  @override
  String? get careStage;
  @override
  List<String>? get careTips;
  /// Create a copy of CreateStoryRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CreateStoryRequestImplCopyWith<_$CreateStoryRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
StoryFeed _$StoryFeedFromJson(Map<String, dynamic> json) {
  return _StoryFeed.fromJson(json);
}
/// @nodoc
mixin _$StoryFeed {
  String get userId => throw _privateConstructorUsedError;
  User get user => throw _privateConstructorUsedError;
  List<Story> get stories => throw _privateConstructorUsedError;
  bool get hasUnviewedStories => throw _privateConstructorUsedError;
  /// Serializes this StoryFeed to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of StoryFeed
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $StoryFeedCopyWith<StoryFeed> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $StoryFeedCopyWith<$Res> {
  factory $StoryFeedCopyWith(StoryFeed value, $Res Function(StoryFeed) then) =
      _$StoryFeedCopyWithImpl<$Res, StoryFeed>;
  @useResult
  $Res call(
      {String userId, User user, List<Story> stories, bool hasUnviewedStories});
  $UserCopyWith<$Res> get user;
}
/// @nodoc
class _$StoryFeedCopyWithImpl<$Res, $Val extends StoryFeed>
    implements $StoryFeedCopyWith<$Res> {
  _$StoryFeedCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of StoryFeed
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? user = null,
    Object? stories = null,
    Object? hasUnviewedStories = null,
  }) {
    return _then(_value.copyWith(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      user: null == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User,
      stories: null == stories
          ? _value.stories
          : stories // ignore: cast_nullable_to_non_nullable
              as List<Story>,
      hasUnviewedStories: null == hasUnviewedStories
          ? _value.hasUnviewedStories
          : hasUnviewedStories // ignore: cast_nullable_to_non_nullable
              as bool,
    ) as $Val);
  }
  /// Create a copy of StoryFeed
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res> get user {
    return $UserCopyWith<$Res>(_value.user, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$StoryFeedImplCopyWith<$Res>
    implements $StoryFeedCopyWith<$Res> {
  factory _$$StoryFeedImplCopyWith(
          _$StoryFeedImpl value, $Res Function(_$StoryFeedImpl) then) =
      __$$StoryFeedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String userId, User user, List<Story> stories, bool hasUnviewedStories});
  @override
  $UserCopyWith<$Res> get user;
}
/// @nodoc
class __$$StoryFeedImplCopyWithImpl<$Res>
    extends _$StoryFeedCopyWithImpl<$Res, _$StoryFeedImpl>
    implements _$$StoryFeedImplCopyWith<$Res> {
  __$$StoryFeedImplCopyWithImpl(
      _$StoryFeedImpl _value, $Res Function(_$StoryFeedImpl) _then)
      : super(_value, _then);
  /// Create a copy of StoryFeed
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? user = null,
    Object? stories = null,
    Object? hasUnviewedStories = null,
  }) {
    return _then(_$StoryFeedImpl(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
      user: null == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User,
      stories: null == stories
          ? _value._stories
          : stories // ignore: cast_nullable_to_non_nullable
              as List<Story>,
      hasUnviewedStories: null == hasUnviewedStories
          ? _value.hasUnviewedStories
          : hasUnviewedStories // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$StoryFeedImpl implements _StoryFeed {
  const _$StoryFeedImpl(
      {required this.userId,
      required this.user,
      final List<Story> stories = const [],
      this.hasUnviewedStories = false})
      : _stories = stories;
  factory _$StoryFeedImpl.fromJson(Map<String, dynamic> json) =>
      _$$StoryFeedImplFromJson(json);
  @override
  final String userId;
  @override
  final User user;
  final List<Story> _stories;
  @override
  @JsonKey()
  List<Story> get stories {
    if (_stories is EqualUnmodifiableListView) return _stories;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_stories);
  }
  @override
  @JsonKey()
  final bool hasUnviewedStories;
  @override
  String toString() {
    return 'StoryFeed(userId: $userId, user: $user, stories: $stories, hasUnviewedStories: $hasUnviewedStories)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StoryFeedImpl &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.user, user) || other.user == user) &&
            const DeepCollectionEquality().equals(other._stories, _stories) &&
            (identical(other.hasUnviewedStories, hasUnviewedStories) ||
                other.hasUnviewedStories == hasUnviewedStories));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, userId, user,
      const DeepCollectionEquality().hash(_stories), hasUnviewedStories);
  /// Create a copy of StoryFeed
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$StoryFeedImplCopyWith<_$StoryFeedImpl> get copyWith =>
      __$$StoryFeedImplCopyWithImpl<_$StoryFeedImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$StoryFeedImplToJson(
      this,
    );
  }
}
abstract class _StoryFeed implements StoryFeed {
  const factory _StoryFeed(
      {required final String userId,
      required final User user,
      final List<Story> stories,
      final bool hasUnviewedStories}) = _$StoryFeedImpl;
  factory _StoryFeed.fromJson(Map<String, dynamic> json) =
      _$StoryFeedImpl.fromJson;
  @override
  String get userId;
  @override
  User get user;
  @override
  List<Story> get stories;
  @override
  bool get hasUnviewedStories;
  /// Create a copy of StoryFeed
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$StoryFeedImplCopyWith<_$StoryFeedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
</file>

<file path="lib/core/models/story.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'story.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
_$StoryImpl _$$StoryImplFromJson(Map<String, dynamic> json) => _$StoryImpl(
      id: json['id'] as String,
      userId: json['userId'] as String,
      content: json['content'] as String,
      type: $enumDecodeNullable(_$StoryTypeEnumMap, json['type']) ??
          StoryType.image,
      privacyLevel: $enumDecodeNullable(
              _$StoryPrivacyLevelEnumMap, json['privacyLevel']) ??
          StoryPrivacyLevel.public,
      mediaUrl: json['mediaUrl'] as String?,
      thumbnailUrl: json['thumbnailUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
      tags:
          (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList() ??
              const [],
      location: json['location'] as String?,
      viewsCount: (json['viewsCount'] as num?)?.toInt() ?? 0,
      likesCount: (json['likesCount'] as num?)?.toInt() ?? 0,
      commentsCount: (json['commentsCount'] as num?)?.toInt() ?? 0,
      expiresAt: json['expiresAt'] == null
          ? null
          : DateTime.parse(json['expiresAt'] as String),
      isArchived: json['isArchived'] as bool? ?? false,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      user: json['user'] == null
          ? null
          : User.fromJson(json['user'] as Map<String, dynamic>),
      hasViewed: json['hasViewed'] as bool? ?? false,
      hasLiked: json['hasLiked'] as bool? ?? false,
      plantId: json['plantId'] as String?,
      plantData: json['plantData'] as Map<String, dynamic>?,
      careStage: json['careStage'] as String?,
      careTips: (json['careTips'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
    );
Map<String, dynamic> _$$StoryImplToJson(_$StoryImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'content': instance.content,
      'type': _$StoryTypeEnumMap[instance.type]!,
      'privacyLevel': _$StoryPrivacyLevelEnumMap[instance.privacyLevel]!,
      'mediaUrl': instance.mediaUrl,
      'thumbnailUrl': instance.thumbnailUrl,
      'metadata': instance.metadata,
      'tags': instance.tags,
      'location': instance.location,
      'viewsCount': instance.viewsCount,
      'likesCount': instance.likesCount,
      'commentsCount': instance.commentsCount,
      'expiresAt': instance.expiresAt?.toIso8601String(),
      'isArchived': instance.isArchived,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'user': instance.user,
      'hasViewed': instance.hasViewed,
      'hasLiked': instance.hasLiked,
      'plantId': instance.plantId,
      'plantData': instance.plantData,
      'careStage': instance.careStage,
      'careTips': instance.careTips,
    };
const _$StoryTypeEnumMap = {
  StoryType.image: 'image',
  StoryType.video: 'video',
  StoryType.text: 'text',
  StoryType.plant_progress: 'plant_progress',
  StoryType.plant_care_tip: 'plant_care_tip',
  StoryType.plant_identification: 'plant_identification',
};
const _$StoryPrivacyLevelEnumMap = {
  StoryPrivacyLevel.public: 'public',
  StoryPrivacyLevel.friends: 'friends',
  StoryPrivacyLevel.close_friends: 'close_friends',
  StoryPrivacyLevel.private: 'private',
};
_$StoryViewImpl _$$StoryViewImplFromJson(Map<String, dynamic> json) =>
    _$StoryViewImpl(
      id: json['id'] as String,
      storyId: json['storyId'] as String,
      userId: json['userId'] as String,
      viewedAt: DateTime.parse(json['viewedAt'] as String),
      user: json['user'] == null
          ? null
          : User.fromJson(json['user'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$$StoryViewImplToJson(_$StoryViewImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'storyId': instance.storyId,
      'userId': instance.userId,
      'viewedAt': instance.viewedAt.toIso8601String(),
      'user': instance.user,
    };
_$StoryLikeImpl _$$StoryLikeImplFromJson(Map<String, dynamic> json) =>
    _$StoryLikeImpl(
      id: json['id'] as String,
      storyId: json['storyId'] as String,
      userId: json['userId'] as String,
      createdAt: DateTime.parse(json['createdAt'] as String),
      user: json['user'] == null
          ? null
          : User.fromJson(json['user'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$$StoryLikeImplToJson(_$StoryLikeImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'storyId': instance.storyId,
      'userId': instance.userId,
      'createdAt': instance.createdAt.toIso8601String(),
      'user': instance.user,
    };
_$StoryCommentImpl _$$StoryCommentImplFromJson(Map<String, dynamic> json) =>
    _$StoryCommentImpl(
      id: json['id'] as String,
      storyId: json['storyId'] as String,
      userId: json['userId'] as String,
      content: json['content'] as String,
      parentCommentId: json['parentCommentId'] as String?,
      likesCount: (json['likesCount'] as num?)?.toInt() ?? 0,
      hasLiked: json['hasLiked'] as bool? ?? false,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      user: json['user'] == null
          ? null
          : User.fromJson(json['user'] as Map<String, dynamic>),
      replies: (json['replies'] as List<dynamic>?)
              ?.map((e) => StoryComment.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
    );
Map<String, dynamic> _$$StoryCommentImplToJson(_$StoryCommentImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'storyId': instance.storyId,
      'userId': instance.userId,
      'content': instance.content,
      'parentCommentId': instance.parentCommentId,
      'likesCount': instance.likesCount,
      'hasLiked': instance.hasLiked,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'user': instance.user,
      'replies': instance.replies,
    };
_$CreateStoryRequestImpl _$$CreateStoryRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$CreateStoryRequestImpl(
      content: json['content'] as String,
      type: $enumDecodeNullable(_$StoryTypeEnumMap, json['type']) ??
          StoryType.image,
      privacyLevel: $enumDecodeNullable(
              _$StoryPrivacyLevelEnumMap, json['privacyLevel']) ??
          StoryPrivacyLevel.public,
      mediaUrl: json['mediaUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
      tags: (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList(),
      location: json['location'] as String?,
      expiresAt: json['expiresAt'] == null
          ? null
          : DateTime.parse(json['expiresAt'] as String),
      plantId: json['plantId'] as String?,
      plantData: json['plantData'] as Map<String, dynamic>?,
      careStage: json['careStage'] as String?,
      careTips: (json['careTips'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
    );
Map<String, dynamic> _$$CreateStoryRequestImplToJson(
        _$CreateStoryRequestImpl instance) =>
    <String, dynamic>{
      'content': instance.content,
      'type': _$StoryTypeEnumMap[instance.type]!,
      'privacyLevel': _$StoryPrivacyLevelEnumMap[instance.privacyLevel]!,
      'mediaUrl': instance.mediaUrl,
      'metadata': instance.metadata,
      'tags': instance.tags,
      'location': instance.location,
      'expiresAt': instance.expiresAt?.toIso8601String(),
      'plantId': instance.plantId,
      'plantData': instance.plantData,
      'careStage': instance.careStage,
      'careTips': instance.careTips,
    };
_$StoryFeedImpl _$$StoryFeedImplFromJson(Map<String, dynamic> json) =>
    _$StoryFeedImpl(
      userId: json['userId'] as String,
      user: User.fromJson(json['user'] as Map<String, dynamic>),
      stories: (json['stories'] as List<dynamic>?)
              ?.map((e) => Story.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      hasUnviewedStories: json['hasUnviewedStories'] as bool? ?? false,
    );
Map<String, dynamic> _$$StoryFeedImplToJson(_$StoryFeedImpl instance) =>
    <String, dynamic>{
      'userId': instance.userId,
      'user': instance.user,
      'stories': instance.stories,
      'hasUnviewedStories': instance.hasUnviewedStories,
    };
</file>

<file path="lib/core/models/user.dart">
import 'package:json_annotation/json_annotation.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
part 'user.g.dart';
part 'user.freezed.dart';
@freezed
class User with _$User {
  const factory User({
    required String id,
    required String email,
    required String username,
    String? displayName,
    String? bio,
    String? profilePictureUrl,
    String? location,
    DateTime? dateOfBirth,
    @Default(false) bool isPrivate,
    @Default(0) int followersCount,
    @Default(0) int followingCount,
    @Default(0) int postsCount,
    @Default(true) bool isActive,
    @Default(false) bool isVerified,
    DateTime? lastSeen,
    required DateTime createdAt,
    DateTime? updatedAt,
    // Plant-specific fields for Phase 2
    @Default([]) List<String> plantInterests,
    String? experienceLevel, // 'beginner', 'intermediate', 'expert'
    @Default([]) List<String> favoriteGenres,
    String? gardenType, // 'indoor', 'outdoor', 'balcony', 'greenhouse'
    String? climate, // 'tropical', 'temperate', 'arid', 'continental'
  }) = _User;
  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}
@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required User user,
    @Default(false) bool isFollowing,
    @Default(false) bool isFollowedBy,
    @Default(false) bool isBlocked,
    @Default(false) bool hasBlockedMe,
    String? friendshipStatus, // 'none', 'pending', 'accepted', 'blocked'
  }) = _UserProfile;
  factory UserProfile.fromJson(Map<String, dynamic> json) => _$UserProfileFromJson(json);
}
@freezed
class UserSearchResult with _$UserSearchResult {
  const factory UserSearchResult({
    required String id,
    required String username,
    String? fullName,
    String? profilePictureUrl,
    @Default(false) bool isVerified,
    @Default(false) bool isFollowing,
    String? mutualFriendsCount,
  }) = _UserSearchResult;
  factory UserSearchResult.fromJson(Map<String, dynamic> json) => _$UserSearchResultFromJson(json);
}
@freezed
class UpdateUserRequest with _$UpdateUserRequest {
  const factory UpdateUserRequest({
    String? fullName,
    String? bio,
    String? location,
    DateTime? dateOfBirth,
    bool? isPrivate,
    List<String>? plantInterests,
    String? experienceLevel,
    List<String>? favoriteGenres,
    String? gardenType,
    String? climate,
  }) = _UpdateUserRequest;
  factory UpdateUserRequest.fromJson(Map<String, dynamic> json) => _$UpdateUserRequestFromJson(json);
}
// Extension methods for User
extension UserExtension on User {
  String get name => displayName ?? username;
  String get initials {
    if (displayName?.isNotEmpty == true) {
      final parts = displayName!.split(' ');
      if (parts.length >= 2) {
        return '${parts[0][0]}${parts[1][0]}'.toUpperCase();
      }
      return displayName![0].toUpperCase();
    }
    return username[0].toUpperCase();
  }
  bool get hasProfilePicture => profilePictureUrl?.isNotEmpty == true;
  bool get isOnline {
    if (lastSeen == null) return false;
    final now = DateTime.now();
    final difference = now.difference(lastSeen!);
    return difference.inMinutes < 5; // Consider online if last seen within 5 minutes
  }
  String get lastSeenText {
    if (lastSeen == null) return 'Never';
    final now = DateTime.now();
    final difference = now.difference(lastSeen!);
    if (difference.inMinutes < 1) {
      return 'Just now';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes}m ago';
    } else if (difference.inHours < 24) {
      return '${difference.inHours}h ago';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d ago';
    } else {
      return 'Long time ago';
    }
  }
  String get experienceLevelDisplay {
    switch (experienceLevel?.toLowerCase()) {
      case 'beginner':
        return '🌱 Beginner';
      case 'intermediate':
        return '🌿 Intermediate';
      case 'expert':
        return '🌳 Expert';
      default:
        return '🌱 New to plants';
    }
  }
  String get gardenTypeDisplay {
    switch (gardenType?.toLowerCase()) {
      case 'indoor':
        return '🏠 Indoor Garden';
      case 'outdoor':
        return '🌳 Outdoor Garden';
      case 'balcony':
        return '🪴 Balcony Garden';
      case 'greenhouse':
        return '🏡 Greenhouse';
      default:
        return '🌱 Garden';
    }
  }
}
</file>

<file path="lib/core/models/user.freezed.dart">
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark
part of 'user.dart';
// **************************************************************************
// FreezedGenerator
// **************************************************************************
T _$identity<T>(T value) => value;
final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');
User _$UserFromJson(Map<String, dynamic> json) {
  return _User.fromJson(json);
}
/// @nodoc
mixin _$User {
  String get id => throw _privateConstructorUsedError;
  String get email => throw _privateConstructorUsedError;
  String get username => throw _privateConstructorUsedError;
  String? get displayName => throw _privateConstructorUsedError;
  String? get bio => throw _privateConstructorUsedError;
  String? get profilePictureUrl => throw _privateConstructorUsedError;
  String? get location => throw _privateConstructorUsedError;
  DateTime? get dateOfBirth => throw _privateConstructorUsedError;
  bool get isPrivate => throw _privateConstructorUsedError;
  int get followersCount => throw _privateConstructorUsedError;
  int get followingCount => throw _privateConstructorUsedError;
  int get postsCount => throw _privateConstructorUsedError;
  bool get isActive => throw _privateConstructorUsedError;
  bool get isVerified => throw _privateConstructorUsedError;
  DateTime? get lastSeen => throw _privateConstructorUsedError;
  DateTime get createdAt => throw _privateConstructorUsedError;
  DateTime? get updatedAt =>
      throw _privateConstructorUsedError; // Plant-specific fields for Phase 2
  List<String> get plantInterests => throw _privateConstructorUsedError;
  String? get experienceLevel =>
      throw _privateConstructorUsedError; // 'beginner', 'intermediate', 'expert'
  List<String> get favoriteGenres => throw _privateConstructorUsedError;
  String? get gardenType =>
      throw _privateConstructorUsedError; // 'indoor', 'outdoor', 'balcony', 'greenhouse'
  String? get climate => throw _privateConstructorUsedError;
  /// Serializes this User to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $UserCopyWith<User> get copyWith => throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $UserCopyWith<$Res> {
  factory $UserCopyWith(User value, $Res Function(User) then) =
      _$UserCopyWithImpl<$Res, User>;
  @useResult
  $Res call(
      {String id,
      String email,
      String username,
      String? displayName,
      String? bio,
      String? profilePictureUrl,
      String? location,
      DateTime? dateOfBirth,
      bool isPrivate,
      int followersCount,
      int followingCount,
      int postsCount,
      bool isActive,
      bool isVerified,
      DateTime? lastSeen,
      DateTime createdAt,
      DateTime? updatedAt,
      List<String> plantInterests,
      String? experienceLevel,
      List<String> favoriteGenres,
      String? gardenType,
      String? climate});
}
/// @nodoc
class _$UserCopyWithImpl<$Res, $Val extends User>
    implements $UserCopyWith<$Res> {
  _$UserCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? email = null,
    Object? username = null,
    Object? displayName = freezed,
    Object? bio = freezed,
    Object? profilePictureUrl = freezed,
    Object? location = freezed,
    Object? dateOfBirth = freezed,
    Object? isPrivate = null,
    Object? followersCount = null,
    Object? followingCount = null,
    Object? postsCount = null,
    Object? isActive = null,
    Object? isVerified = null,
    Object? lastSeen = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? plantInterests = null,
    Object? experienceLevel = freezed,
    Object? favoriteGenres = null,
    Object? gardenType = freezed,
    Object? climate = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      displayName: freezed == displayName
          ? _value.displayName
          : displayName // ignore: cast_nullable_to_non_nullable
              as String?,
      bio: freezed == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String?,
      profilePictureUrl: freezed == profilePictureUrl
          ? _value.profilePictureUrl
          : profilePictureUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      dateOfBirth: freezed == dateOfBirth
          ? _value.dateOfBirth
          : dateOfBirth // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      isPrivate: null == isPrivate
          ? _value.isPrivate
          : isPrivate // ignore: cast_nullable_to_non_nullable
              as bool,
      followersCount: null == followersCount
          ? _value.followersCount
          : followersCount // ignore: cast_nullable_to_non_nullable
              as int,
      followingCount: null == followingCount
          ? _value.followingCount
          : followingCount // ignore: cast_nullable_to_non_nullable
              as int,
      postsCount: null == postsCount
          ? _value.postsCount
          : postsCount // ignore: cast_nullable_to_non_nullable
              as int,
      isActive: null == isActive
          ? _value.isActive
          : isActive // ignore: cast_nullable_to_non_nullable
              as bool,
      isVerified: null == isVerified
          ? _value.isVerified
          : isVerified // ignore: cast_nullable_to_non_nullable
              as bool,
      lastSeen: freezed == lastSeen
          ? _value.lastSeen
          : lastSeen // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      plantInterests: null == plantInterests
          ? _value.plantInterests
          : plantInterests // ignore: cast_nullable_to_non_nullable
              as List<String>,
      experienceLevel: freezed == experienceLevel
          ? _value.experienceLevel
          : experienceLevel // ignore: cast_nullable_to_non_nullable
              as String?,
      favoriteGenres: null == favoriteGenres
          ? _value.favoriteGenres
          : favoriteGenres // ignore: cast_nullable_to_non_nullable
              as List<String>,
      gardenType: freezed == gardenType
          ? _value.gardenType
          : gardenType // ignore: cast_nullable_to_non_nullable
              as String?,
      climate: freezed == climate
          ? _value.climate
          : climate // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$UserImplCopyWith<$Res> implements $UserCopyWith<$Res> {
  factory _$$UserImplCopyWith(
          _$UserImpl value, $Res Function(_$UserImpl) then) =
      __$$UserImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String email,
      String username,
      String? displayName,
      String? bio,
      String? profilePictureUrl,
      String? location,
      DateTime? dateOfBirth,
      bool isPrivate,
      int followersCount,
      int followingCount,
      int postsCount,
      bool isActive,
      bool isVerified,
      DateTime? lastSeen,
      DateTime createdAt,
      DateTime? updatedAt,
      List<String> plantInterests,
      String? experienceLevel,
      List<String> favoriteGenres,
      String? gardenType,
      String? climate});
}
/// @nodoc
class __$$UserImplCopyWithImpl<$Res>
    extends _$UserCopyWithImpl<$Res, _$UserImpl>
    implements _$$UserImplCopyWith<$Res> {
  __$$UserImplCopyWithImpl(_$UserImpl _value, $Res Function(_$UserImpl) _then)
      : super(_value, _then);
  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? email = null,
    Object? username = null,
    Object? displayName = freezed,
    Object? bio = freezed,
    Object? profilePictureUrl = freezed,
    Object? location = freezed,
    Object? dateOfBirth = freezed,
    Object? isPrivate = null,
    Object? followersCount = null,
    Object? followingCount = null,
    Object? postsCount = null,
    Object? isActive = null,
    Object? isVerified = null,
    Object? lastSeen = freezed,
    Object? createdAt = null,
    Object? updatedAt = freezed,
    Object? plantInterests = null,
    Object? experienceLevel = freezed,
    Object? favoriteGenres = null,
    Object? gardenType = freezed,
    Object? climate = freezed,
  }) {
    return _then(_$UserImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      displayName: freezed == displayName
          ? _value.displayName
          : displayName // ignore: cast_nullable_to_non_nullable
              as String?,
      bio: freezed == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String?,
      profilePictureUrl: freezed == profilePictureUrl
          ? _value.profilePictureUrl
          : profilePictureUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      dateOfBirth: freezed == dateOfBirth
          ? _value.dateOfBirth
          : dateOfBirth // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      isPrivate: null == isPrivate
          ? _value.isPrivate
          : isPrivate // ignore: cast_nullable_to_non_nullable
              as bool,
      followersCount: null == followersCount
          ? _value.followersCount
          : followersCount // ignore: cast_nullable_to_non_nullable
              as int,
      followingCount: null == followingCount
          ? _value.followingCount
          : followingCount // ignore: cast_nullable_to_non_nullable
              as int,
      postsCount: null == postsCount
          ? _value.postsCount
          : postsCount // ignore: cast_nullable_to_non_nullable
              as int,
      isActive: null == isActive
          ? _value.isActive
          : isActive // ignore: cast_nullable_to_non_nullable
              as bool,
      isVerified: null == isVerified
          ? _value.isVerified
          : isVerified // ignore: cast_nullable_to_non_nullable
              as bool,
      lastSeen: freezed == lastSeen
          ? _value.lastSeen
          : lastSeen // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      createdAt: null == createdAt
          ? _value.createdAt
          : createdAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      updatedAt: freezed == updatedAt
          ? _value.updatedAt
          : updatedAt // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      plantInterests: null == plantInterests
          ? _value._plantInterests
          : plantInterests // ignore: cast_nullable_to_non_nullable
              as List<String>,
      experienceLevel: freezed == experienceLevel
          ? _value.experienceLevel
          : experienceLevel // ignore: cast_nullable_to_non_nullable
              as String?,
      favoriteGenres: null == favoriteGenres
          ? _value._favoriteGenres
          : favoriteGenres // ignore: cast_nullable_to_non_nullable
              as List<String>,
      gardenType: freezed == gardenType
          ? _value.gardenType
          : gardenType // ignore: cast_nullable_to_non_nullable
              as String?,
      climate: freezed == climate
          ? _value.climate
          : climate // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$UserImpl implements _User {
  const _$UserImpl(
      {required this.id,
      required this.email,
      required this.username,
      this.displayName,
      this.bio,
      this.profilePictureUrl,
      this.location,
      this.dateOfBirth,
      this.isPrivate = false,
      this.followersCount = 0,
      this.followingCount = 0,
      this.postsCount = 0,
      this.isActive = true,
      this.isVerified = false,
      this.lastSeen,
      required this.createdAt,
      this.updatedAt,
      final List<String> plantInterests = const [],
      this.experienceLevel,
      final List<String> favoriteGenres = const [],
      this.gardenType,
      this.climate})
      : _plantInterests = plantInterests,
        _favoriteGenres = favoriteGenres;
  factory _$UserImpl.fromJson(Map<String, dynamic> json) =>
      _$$UserImplFromJson(json);
  @override
  final String id;
  @override
  final String email;
  @override
  final String username;
  @override
  final String? displayName;
  @override
  final String? bio;
  @override
  final String? profilePictureUrl;
  @override
  final String? location;
  @override
  final DateTime? dateOfBirth;
  @override
  @JsonKey()
  final bool isPrivate;
  @override
  @JsonKey()
  final int followersCount;
  @override
  @JsonKey()
  final int followingCount;
  @override
  @JsonKey()
  final int postsCount;
  @override
  @JsonKey()
  final bool isActive;
  @override
  @JsonKey()
  final bool isVerified;
  @override
  final DateTime? lastSeen;
  @override
  final DateTime createdAt;
  @override
  final DateTime? updatedAt;
// Plant-specific fields for Phase 2
  final List<String> _plantInterests;
// Plant-specific fields for Phase 2
  @override
  @JsonKey()
  List<String> get plantInterests {
    if (_plantInterests is EqualUnmodifiableListView) return _plantInterests;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_plantInterests);
  }
  @override
  final String? experienceLevel;
// 'beginner', 'intermediate', 'expert'
  final List<String> _favoriteGenres;
// 'beginner', 'intermediate', 'expert'
  @override
  @JsonKey()
  List<String> get favoriteGenres {
    if (_favoriteGenres is EqualUnmodifiableListView) return _favoriteGenres;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_favoriteGenres);
  }
  @override
  final String? gardenType;
// 'indoor', 'outdoor', 'balcony', 'greenhouse'
  @override
  final String? climate;
  @override
  String toString() {
    return 'User(id: $id, email: $email, username: $username, displayName: $displayName, bio: $bio, profilePictureUrl: $profilePictureUrl, location: $location, dateOfBirth: $dateOfBirth, isPrivate: $isPrivate, followersCount: $followersCount, followingCount: $followingCount, postsCount: $postsCount, isActive: $isActive, isVerified: $isVerified, lastSeen: $lastSeen, createdAt: $createdAt, updatedAt: $updatedAt, plantInterests: $plantInterests, experienceLevel: $experienceLevel, favoriteGenres: $favoriteGenres, gardenType: $gardenType, climate: $climate)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UserImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.email, email) || other.email == email) &&
            (identical(other.username, username) ||
                other.username == username) &&
            (identical(other.displayName, displayName) ||
                other.displayName == displayName) &&
            (identical(other.bio, bio) || other.bio == bio) &&
            (identical(other.profilePictureUrl, profilePictureUrl) ||
                other.profilePictureUrl == profilePictureUrl) &&
            (identical(other.location, location) ||
                other.location == location) &&
            (identical(other.dateOfBirth, dateOfBirth) ||
                other.dateOfBirth == dateOfBirth) &&
            (identical(other.isPrivate, isPrivate) ||
                other.isPrivate == isPrivate) &&
            (identical(other.followersCount, followersCount) ||
                other.followersCount == followersCount) &&
            (identical(other.followingCount, followingCount) ||
                other.followingCount == followingCount) &&
            (identical(other.postsCount, postsCount) ||
                other.postsCount == postsCount) &&
            (identical(other.isActive, isActive) ||
                other.isActive == isActive) &&
            (identical(other.isVerified, isVerified) ||
                other.isVerified == isVerified) &&
            (identical(other.lastSeen, lastSeen) ||
                other.lastSeen == lastSeen) &&
            (identical(other.createdAt, createdAt) ||
                other.createdAt == createdAt) &&
            (identical(other.updatedAt, updatedAt) ||
                other.updatedAt == updatedAt) &&
            const DeepCollectionEquality()
                .equals(other._plantInterests, _plantInterests) &&
            (identical(other.experienceLevel, experienceLevel) ||
                other.experienceLevel == experienceLevel) &&
            const DeepCollectionEquality()
                .equals(other._favoriteGenres, _favoriteGenres) &&
            (identical(other.gardenType, gardenType) ||
                other.gardenType == gardenType) &&
            (identical(other.climate, climate) || other.climate == climate));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        id,
        email,
        username,
        displayName,
        bio,
        profilePictureUrl,
        location,
        dateOfBirth,
        isPrivate,
        followersCount,
        followingCount,
        postsCount,
        isActive,
        isVerified,
        lastSeen,
        createdAt,
        updatedAt,
        const DeepCollectionEquality().hash(_plantInterests),
        experienceLevel,
        const DeepCollectionEquality().hash(_favoriteGenres),
        gardenType,
        climate
      ]);
  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$UserImplCopyWith<_$UserImpl> get copyWith =>
      __$$UserImplCopyWithImpl<_$UserImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$UserImplToJson(
      this,
    );
  }
}
abstract class _User implements User {
  const factory _User(
      {required final String id,
      required final String email,
      required final String username,
      final String? displayName,
      final String? bio,
      final String? profilePictureUrl,
      final String? location,
      final DateTime? dateOfBirth,
      final bool isPrivate,
      final int followersCount,
      final int followingCount,
      final int postsCount,
      final bool isActive,
      final bool isVerified,
      final DateTime? lastSeen,
      required final DateTime createdAt,
      final DateTime? updatedAt,
      final List<String> plantInterests,
      final String? experienceLevel,
      final List<String> favoriteGenres,
      final String? gardenType,
      final String? climate}) = _$UserImpl;
  factory _User.fromJson(Map<String, dynamic> json) = _$UserImpl.fromJson;
  @override
  String get id;
  @override
  String get email;
  @override
  String get username;
  @override
  String? get displayName;
  @override
  String? get bio;
  @override
  String? get profilePictureUrl;
  @override
  String? get location;
  @override
  DateTime? get dateOfBirth;
  @override
  bool get isPrivate;
  @override
  int get followersCount;
  @override
  int get followingCount;
  @override
  int get postsCount;
  @override
  bool get isActive;
  @override
  bool get isVerified;
  @override
  DateTime? get lastSeen;
  @override
  DateTime get createdAt;
  @override
  DateTime? get updatedAt; // Plant-specific fields for Phase 2
  @override
  List<String> get plantInterests;
  @override
  String? get experienceLevel; // 'beginner', 'intermediate', 'expert'
  @override
  List<String> get favoriteGenres;
  @override
  String? get gardenType; // 'indoor', 'outdoor', 'balcony', 'greenhouse'
  @override
  String? get climate;
  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$UserImplCopyWith<_$UserImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
UserProfile _$UserProfileFromJson(Map<String, dynamic> json) {
  return _UserProfile.fromJson(json);
}
/// @nodoc
mixin _$UserProfile {
  User get user => throw _privateConstructorUsedError;
  bool get isFollowing => throw _privateConstructorUsedError;
  bool get isFollowedBy => throw _privateConstructorUsedError;
  bool get isBlocked => throw _privateConstructorUsedError;
  bool get hasBlockedMe => throw _privateConstructorUsedError;
  String? get friendshipStatus => throw _privateConstructorUsedError;
  /// Serializes this UserProfile to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of UserProfile
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $UserProfileCopyWith<UserProfile> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $UserProfileCopyWith<$Res> {
  factory $UserProfileCopyWith(
          UserProfile value, $Res Function(UserProfile) then) =
      _$UserProfileCopyWithImpl<$Res, UserProfile>;
  @useResult
  $Res call(
      {User user,
      bool isFollowing,
      bool isFollowedBy,
      bool isBlocked,
      bool hasBlockedMe,
      String? friendshipStatus});
  $UserCopyWith<$Res> get user;
}
/// @nodoc
class _$UserProfileCopyWithImpl<$Res, $Val extends UserProfile>
    implements $UserProfileCopyWith<$Res> {
  _$UserProfileCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of UserProfile
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? user = null,
    Object? isFollowing = null,
    Object? isFollowedBy = null,
    Object? isBlocked = null,
    Object? hasBlockedMe = null,
    Object? friendshipStatus = freezed,
  }) {
    return _then(_value.copyWith(
      user: null == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User,
      isFollowing: null == isFollowing
          ? _value.isFollowing
          : isFollowing // ignore: cast_nullable_to_non_nullable
              as bool,
      isFollowedBy: null == isFollowedBy
          ? _value.isFollowedBy
          : isFollowedBy // ignore: cast_nullable_to_non_nullable
              as bool,
      isBlocked: null == isBlocked
          ? _value.isBlocked
          : isBlocked // ignore: cast_nullable_to_non_nullable
              as bool,
      hasBlockedMe: null == hasBlockedMe
          ? _value.hasBlockedMe
          : hasBlockedMe // ignore: cast_nullable_to_non_nullable
              as bool,
      friendshipStatus: freezed == friendshipStatus
          ? _value.friendshipStatus
          : friendshipStatus // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
  /// Create a copy of UserProfile
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res> get user {
    return $UserCopyWith<$Res>(_value.user, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$UserProfileImplCopyWith<$Res>
    implements $UserProfileCopyWith<$Res> {
  factory _$$UserProfileImplCopyWith(
          _$UserProfileImpl value, $Res Function(_$UserProfileImpl) then) =
      __$$UserProfileImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {User user,
      bool isFollowing,
      bool isFollowedBy,
      bool isBlocked,
      bool hasBlockedMe,
      String? friendshipStatus});
  @override
  $UserCopyWith<$Res> get user;
}
/// @nodoc
class __$$UserProfileImplCopyWithImpl<$Res>
    extends _$UserProfileCopyWithImpl<$Res, _$UserProfileImpl>
    implements _$$UserProfileImplCopyWith<$Res> {
  __$$UserProfileImplCopyWithImpl(
      _$UserProfileImpl _value, $Res Function(_$UserProfileImpl) _then)
      : super(_value, _then);
  /// Create a copy of UserProfile
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? user = null,
    Object? isFollowing = null,
    Object? isFollowedBy = null,
    Object? isBlocked = null,
    Object? hasBlockedMe = null,
    Object? friendshipStatus = freezed,
  }) {
    return _then(_$UserProfileImpl(
      user: null == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User,
      isFollowing: null == isFollowing
          ? _value.isFollowing
          : isFollowing // ignore: cast_nullable_to_non_nullable
              as bool,
      isFollowedBy: null == isFollowedBy
          ? _value.isFollowedBy
          : isFollowedBy // ignore: cast_nullable_to_non_nullable
              as bool,
      isBlocked: null == isBlocked
          ? _value.isBlocked
          : isBlocked // ignore: cast_nullable_to_non_nullable
              as bool,
      hasBlockedMe: null == hasBlockedMe
          ? _value.hasBlockedMe
          : hasBlockedMe // ignore: cast_nullable_to_non_nullable
              as bool,
      friendshipStatus: freezed == friendshipStatus
          ? _value.friendshipStatus
          : friendshipStatus // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$UserProfileImpl implements _UserProfile {
  const _$UserProfileImpl(
      {required this.user,
      this.isFollowing = false,
      this.isFollowedBy = false,
      this.isBlocked = false,
      this.hasBlockedMe = false,
      this.friendshipStatus});
  factory _$UserProfileImpl.fromJson(Map<String, dynamic> json) =>
      _$$UserProfileImplFromJson(json);
  @override
  final User user;
  @override
  @JsonKey()
  final bool isFollowing;
  @override
  @JsonKey()
  final bool isFollowedBy;
  @override
  @JsonKey()
  final bool isBlocked;
  @override
  @JsonKey()
  final bool hasBlockedMe;
  @override
  final String? friendshipStatus;
  @override
  String toString() {
    return 'UserProfile(user: $user, isFollowing: $isFollowing, isFollowedBy: $isFollowedBy, isBlocked: $isBlocked, hasBlockedMe: $hasBlockedMe, friendshipStatus: $friendshipStatus)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UserProfileImpl &&
            (identical(other.user, user) || other.user == user) &&
            (identical(other.isFollowing, isFollowing) ||
                other.isFollowing == isFollowing) &&
            (identical(other.isFollowedBy, isFollowedBy) ||
                other.isFollowedBy == isFollowedBy) &&
            (identical(other.isBlocked, isBlocked) ||
                other.isBlocked == isBlocked) &&
            (identical(other.hasBlockedMe, hasBlockedMe) ||
                other.hasBlockedMe == hasBlockedMe) &&
            (identical(other.friendshipStatus, friendshipStatus) ||
                other.friendshipStatus == friendshipStatus));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, user, isFollowing, isFollowedBy,
      isBlocked, hasBlockedMe, friendshipStatus);
  /// Create a copy of UserProfile
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$UserProfileImplCopyWith<_$UserProfileImpl> get copyWith =>
      __$$UserProfileImplCopyWithImpl<_$UserProfileImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$UserProfileImplToJson(
      this,
    );
  }
}
abstract class _UserProfile implements UserProfile {
  const factory _UserProfile(
      {required final User user,
      final bool isFollowing,
      final bool isFollowedBy,
      final bool isBlocked,
      final bool hasBlockedMe,
      final String? friendshipStatus}) = _$UserProfileImpl;
  factory _UserProfile.fromJson(Map<String, dynamic> json) =
      _$UserProfileImpl.fromJson;
  @override
  User get user;
  @override
  bool get isFollowing;
  @override
  bool get isFollowedBy;
  @override
  bool get isBlocked;
  @override
  bool get hasBlockedMe;
  @override
  String? get friendshipStatus;
  /// Create a copy of UserProfile
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$UserProfileImplCopyWith<_$UserProfileImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
UserSearchResult _$UserSearchResultFromJson(Map<String, dynamic> json) {
  return _UserSearchResult.fromJson(json);
}
/// @nodoc
mixin _$UserSearchResult {
  String get id => throw _privateConstructorUsedError;
  String get username => throw _privateConstructorUsedError;
  String? get fullName => throw _privateConstructorUsedError;
  String? get profilePictureUrl => throw _privateConstructorUsedError;
  bool get isVerified => throw _privateConstructorUsedError;
  bool get isFollowing => throw _privateConstructorUsedError;
  String? get mutualFriendsCount => throw _privateConstructorUsedError;
  /// Serializes this UserSearchResult to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of UserSearchResult
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $UserSearchResultCopyWith<UserSearchResult> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $UserSearchResultCopyWith<$Res> {
  factory $UserSearchResultCopyWith(
          UserSearchResult value, $Res Function(UserSearchResult) then) =
      _$UserSearchResultCopyWithImpl<$Res, UserSearchResult>;
  @useResult
  $Res call(
      {String id,
      String username,
      String? fullName,
      String? profilePictureUrl,
      bool isVerified,
      bool isFollowing,
      String? mutualFriendsCount});
}
/// @nodoc
class _$UserSearchResultCopyWithImpl<$Res, $Val extends UserSearchResult>
    implements $UserSearchResultCopyWith<$Res> {
  _$UserSearchResultCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of UserSearchResult
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? username = null,
    Object? fullName = freezed,
    Object? profilePictureUrl = freezed,
    Object? isVerified = null,
    Object? isFollowing = null,
    Object? mutualFriendsCount = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      fullName: freezed == fullName
          ? _value.fullName
          : fullName // ignore: cast_nullable_to_non_nullable
              as String?,
      profilePictureUrl: freezed == profilePictureUrl
          ? _value.profilePictureUrl
          : profilePictureUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      isVerified: null == isVerified
          ? _value.isVerified
          : isVerified // ignore: cast_nullable_to_non_nullable
              as bool,
      isFollowing: null == isFollowing
          ? _value.isFollowing
          : isFollowing // ignore: cast_nullable_to_non_nullable
              as bool,
      mutualFriendsCount: freezed == mutualFriendsCount
          ? _value.mutualFriendsCount
          : mutualFriendsCount // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$UserSearchResultImplCopyWith<$Res>
    implements $UserSearchResultCopyWith<$Res> {
  factory _$$UserSearchResultImplCopyWith(_$UserSearchResultImpl value,
          $Res Function(_$UserSearchResultImpl) then) =
      __$$UserSearchResultImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String username,
      String? fullName,
      String? profilePictureUrl,
      bool isVerified,
      bool isFollowing,
      String? mutualFriendsCount});
}
/// @nodoc
class __$$UserSearchResultImplCopyWithImpl<$Res>
    extends _$UserSearchResultCopyWithImpl<$Res, _$UserSearchResultImpl>
    implements _$$UserSearchResultImplCopyWith<$Res> {
  __$$UserSearchResultImplCopyWithImpl(_$UserSearchResultImpl _value,
      $Res Function(_$UserSearchResultImpl) _then)
      : super(_value, _then);
  /// Create a copy of UserSearchResult
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? username = null,
    Object? fullName = freezed,
    Object? profilePictureUrl = freezed,
    Object? isVerified = null,
    Object? isFollowing = null,
    Object? mutualFriendsCount = freezed,
  }) {
    return _then(_$UserSearchResultImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      fullName: freezed == fullName
          ? _value.fullName
          : fullName // ignore: cast_nullable_to_non_nullable
              as String?,
      profilePictureUrl: freezed == profilePictureUrl
          ? _value.profilePictureUrl
          : profilePictureUrl // ignore: cast_nullable_to_non_nullable
              as String?,
      isVerified: null == isVerified
          ? _value.isVerified
          : isVerified // ignore: cast_nullable_to_non_nullable
              as bool,
      isFollowing: null == isFollowing
          ? _value.isFollowing
          : isFollowing // ignore: cast_nullable_to_non_nullable
              as bool,
      mutualFriendsCount: freezed == mutualFriendsCount
          ? _value.mutualFriendsCount
          : mutualFriendsCount // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$UserSearchResultImpl implements _UserSearchResult {
  const _$UserSearchResultImpl(
      {required this.id,
      required this.username,
      this.fullName,
      this.profilePictureUrl,
      this.isVerified = false,
      this.isFollowing = false,
      this.mutualFriendsCount});
  factory _$UserSearchResultImpl.fromJson(Map<String, dynamic> json) =>
      _$$UserSearchResultImplFromJson(json);
  @override
  final String id;
  @override
  final String username;
  @override
  final String? fullName;
  @override
  final String? profilePictureUrl;
  @override
  @JsonKey()
  final bool isVerified;
  @override
  @JsonKey()
  final bool isFollowing;
  @override
  final String? mutualFriendsCount;
  @override
  String toString() {
    return 'UserSearchResult(id: $id, username: $username, fullName: $fullName, profilePictureUrl: $profilePictureUrl, isVerified: $isVerified, isFollowing: $isFollowing, mutualFriendsCount: $mutualFriendsCount)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UserSearchResultImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.username, username) ||
                other.username == username) &&
            (identical(other.fullName, fullName) ||
                other.fullName == fullName) &&
            (identical(other.profilePictureUrl, profilePictureUrl) ||
                other.profilePictureUrl == profilePictureUrl) &&
            (identical(other.isVerified, isVerified) ||
                other.isVerified == isVerified) &&
            (identical(other.isFollowing, isFollowing) ||
                other.isFollowing == isFollowing) &&
            (identical(other.mutualFriendsCount, mutualFriendsCount) ||
                other.mutualFriendsCount == mutualFriendsCount));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, username, fullName,
      profilePictureUrl, isVerified, isFollowing, mutualFriendsCount);
  /// Create a copy of UserSearchResult
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$UserSearchResultImplCopyWith<_$UserSearchResultImpl> get copyWith =>
      __$$UserSearchResultImplCopyWithImpl<_$UserSearchResultImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$UserSearchResultImplToJson(
      this,
    );
  }
}
abstract class _UserSearchResult implements UserSearchResult {
  const factory _UserSearchResult(
      {required final String id,
      required final String username,
      final String? fullName,
      final String? profilePictureUrl,
      final bool isVerified,
      final bool isFollowing,
      final String? mutualFriendsCount}) = _$UserSearchResultImpl;
  factory _UserSearchResult.fromJson(Map<String, dynamic> json) =
      _$UserSearchResultImpl.fromJson;
  @override
  String get id;
  @override
  String get username;
  @override
  String? get fullName;
  @override
  String? get profilePictureUrl;
  @override
  bool get isVerified;
  @override
  bool get isFollowing;
  @override
  String? get mutualFriendsCount;
  /// Create a copy of UserSearchResult
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$UserSearchResultImplCopyWith<_$UserSearchResultImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
UpdateUserRequest _$UpdateUserRequestFromJson(Map<String, dynamic> json) {
  return _UpdateUserRequest.fromJson(json);
}
/// @nodoc
mixin _$UpdateUserRequest {
  String? get fullName => throw _privateConstructorUsedError;
  String? get bio => throw _privateConstructorUsedError;
  String? get location => throw _privateConstructorUsedError;
  DateTime? get dateOfBirth => throw _privateConstructorUsedError;
  bool? get isPrivate => throw _privateConstructorUsedError;
  List<String>? get plantInterests => throw _privateConstructorUsedError;
  String? get experienceLevel => throw _privateConstructorUsedError;
  List<String>? get favoriteGenres => throw _privateConstructorUsedError;
  String? get gardenType => throw _privateConstructorUsedError;
  String? get climate => throw _privateConstructorUsedError;
  /// Serializes this UpdateUserRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of UpdateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $UpdateUserRequestCopyWith<UpdateUserRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $UpdateUserRequestCopyWith<$Res> {
  factory $UpdateUserRequestCopyWith(
          UpdateUserRequest value, $Res Function(UpdateUserRequest) then) =
      _$UpdateUserRequestCopyWithImpl<$Res, UpdateUserRequest>;
  @useResult
  $Res call(
      {String? fullName,
      String? bio,
      String? location,
      DateTime? dateOfBirth,
      bool? isPrivate,
      List<String>? plantInterests,
      String? experienceLevel,
      List<String>? favoriteGenres,
      String? gardenType,
      String? climate});
}
/// @nodoc
class _$UpdateUserRequestCopyWithImpl<$Res, $Val extends UpdateUserRequest>
    implements $UpdateUserRequestCopyWith<$Res> {
  _$UpdateUserRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of UpdateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? fullName = freezed,
    Object? bio = freezed,
    Object? location = freezed,
    Object? dateOfBirth = freezed,
    Object? isPrivate = freezed,
    Object? plantInterests = freezed,
    Object? experienceLevel = freezed,
    Object? favoriteGenres = freezed,
    Object? gardenType = freezed,
    Object? climate = freezed,
  }) {
    return _then(_value.copyWith(
      fullName: freezed == fullName
          ? _value.fullName
          : fullName // ignore: cast_nullable_to_non_nullable
              as String?,
      bio: freezed == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String?,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      dateOfBirth: freezed == dateOfBirth
          ? _value.dateOfBirth
          : dateOfBirth // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      isPrivate: freezed == isPrivate
          ? _value.isPrivate
          : isPrivate // ignore: cast_nullable_to_non_nullable
              as bool?,
      plantInterests: freezed == plantInterests
          ? _value.plantInterests
          : plantInterests // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      experienceLevel: freezed == experienceLevel
          ? _value.experienceLevel
          : experienceLevel // ignore: cast_nullable_to_non_nullable
              as String?,
      favoriteGenres: freezed == favoriteGenres
          ? _value.favoriteGenres
          : favoriteGenres // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      gardenType: freezed == gardenType
          ? _value.gardenType
          : gardenType // ignore: cast_nullable_to_non_nullable
              as String?,
      climate: freezed == climate
          ? _value.climate
          : climate // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$UpdateUserRequestImplCopyWith<$Res>
    implements $UpdateUserRequestCopyWith<$Res> {
  factory _$$UpdateUserRequestImplCopyWith(_$UpdateUserRequestImpl value,
          $Res Function(_$UpdateUserRequestImpl) then) =
      __$$UpdateUserRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String? fullName,
      String? bio,
      String? location,
      DateTime? dateOfBirth,
      bool? isPrivate,
      List<String>? plantInterests,
      String? experienceLevel,
      List<String>? favoriteGenres,
      String? gardenType,
      String? climate});
}
/// @nodoc
class __$$UpdateUserRequestImplCopyWithImpl<$Res>
    extends _$UpdateUserRequestCopyWithImpl<$Res, _$UpdateUserRequestImpl>
    implements _$$UpdateUserRequestImplCopyWith<$Res> {
  __$$UpdateUserRequestImplCopyWithImpl(_$UpdateUserRequestImpl _value,
      $Res Function(_$UpdateUserRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of UpdateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? fullName = freezed,
    Object? bio = freezed,
    Object? location = freezed,
    Object? dateOfBirth = freezed,
    Object? isPrivate = freezed,
    Object? plantInterests = freezed,
    Object? experienceLevel = freezed,
    Object? favoriteGenres = freezed,
    Object? gardenType = freezed,
    Object? climate = freezed,
  }) {
    return _then(_$UpdateUserRequestImpl(
      fullName: freezed == fullName
          ? _value.fullName
          : fullName // ignore: cast_nullable_to_non_nullable
              as String?,
      bio: freezed == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String?,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      dateOfBirth: freezed == dateOfBirth
          ? _value.dateOfBirth
          : dateOfBirth // ignore: cast_nullable_to_non_nullable
              as DateTime?,
      isPrivate: freezed == isPrivate
          ? _value.isPrivate
          : isPrivate // ignore: cast_nullable_to_non_nullable
              as bool?,
      plantInterests: freezed == plantInterests
          ? _value._plantInterests
          : plantInterests // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      experienceLevel: freezed == experienceLevel
          ? _value.experienceLevel
          : experienceLevel // ignore: cast_nullable_to_non_nullable
              as String?,
      favoriteGenres: freezed == favoriteGenres
          ? _value._favoriteGenres
          : favoriteGenres // ignore: cast_nullable_to_non_nullable
              as List<String>?,
      gardenType: freezed == gardenType
          ? _value.gardenType
          : gardenType // ignore: cast_nullable_to_non_nullable
              as String?,
      climate: freezed == climate
          ? _value.climate
          : climate // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$UpdateUserRequestImpl implements _UpdateUserRequest {
  const _$UpdateUserRequestImpl(
      {this.fullName,
      this.bio,
      this.location,
      this.dateOfBirth,
      this.isPrivate,
      final List<String>? plantInterests,
      this.experienceLevel,
      final List<String>? favoriteGenres,
      this.gardenType,
      this.climate})
      : _plantInterests = plantInterests,
        _favoriteGenres = favoriteGenres;
  factory _$UpdateUserRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$UpdateUserRequestImplFromJson(json);
  @override
  final String? fullName;
  @override
  final String? bio;
  @override
  final String? location;
  @override
  final DateTime? dateOfBirth;
  @override
  final bool? isPrivate;
  final List<String>? _plantInterests;
  @override
  List<String>? get plantInterests {
    final value = _plantInterests;
    if (value == null) return null;
    if (_plantInterests is EqualUnmodifiableListView) return _plantInterests;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }
  @override
  final String? experienceLevel;
  final List<String>? _favoriteGenres;
  @override
  List<String>? get favoriteGenres {
    final value = _favoriteGenres;
    if (value == null) return null;
    if (_favoriteGenres is EqualUnmodifiableListView) return _favoriteGenres;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }
  @override
  final String? gardenType;
  @override
  final String? climate;
  @override
  String toString() {
    return 'UpdateUserRequest(fullName: $fullName, bio: $bio, location: $location, dateOfBirth: $dateOfBirth, isPrivate: $isPrivate, plantInterests: $plantInterests, experienceLevel: $experienceLevel, favoriteGenres: $favoriteGenres, gardenType: $gardenType, climate: $climate)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateUserRequestImpl &&
            (identical(other.fullName, fullName) ||
                other.fullName == fullName) &&
            (identical(other.bio, bio) || other.bio == bio) &&
            (identical(other.location, location) ||
                other.location == location) &&
            (identical(other.dateOfBirth, dateOfBirth) ||
                other.dateOfBirth == dateOfBirth) &&
            (identical(other.isPrivate, isPrivate) ||
                other.isPrivate == isPrivate) &&
            const DeepCollectionEquality()
                .equals(other._plantInterests, _plantInterests) &&
            (identical(other.experienceLevel, experienceLevel) ||
                other.experienceLevel == experienceLevel) &&
            const DeepCollectionEquality()
                .equals(other._favoriteGenres, _favoriteGenres) &&
            (identical(other.gardenType, gardenType) ||
                other.gardenType == gardenType) &&
            (identical(other.climate, climate) || other.climate == climate));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      fullName,
      bio,
      location,
      dateOfBirth,
      isPrivate,
      const DeepCollectionEquality().hash(_plantInterests),
      experienceLevel,
      const DeepCollectionEquality().hash(_favoriteGenres),
      gardenType,
      climate);
  /// Create a copy of UpdateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateUserRequestImplCopyWith<_$UpdateUserRequestImpl> get copyWith =>
      __$$UpdateUserRequestImplCopyWithImpl<_$UpdateUserRequestImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$UpdateUserRequestImplToJson(
      this,
    );
  }
}
abstract class _UpdateUserRequest implements UpdateUserRequest {
  const factory _UpdateUserRequest(
      {final String? fullName,
      final String? bio,
      final String? location,
      final DateTime? dateOfBirth,
      final bool? isPrivate,
      final List<String>? plantInterests,
      final String? experienceLevel,
      final List<String>? favoriteGenres,
      final String? gardenType,
      final String? climate}) = _$UpdateUserRequestImpl;
  factory _UpdateUserRequest.fromJson(Map<String, dynamic> json) =
      _$UpdateUserRequestImpl.fromJson;
  @override
  String? get fullName;
  @override
  String? get bio;
  @override
  String? get location;
  @override
  DateTime? get dateOfBirth;
  @override
  bool? get isPrivate;
  @override
  List<String>? get plantInterests;
  @override
  String? get experienceLevel;
  @override
  List<String>? get favoriteGenres;
  @override
  String? get gardenType;
  @override
  String? get climate;
  /// Create a copy of UpdateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$UpdateUserRequestImplCopyWith<_$UpdateUserRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
</file>

<file path="lib/core/models/user.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'user.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
_$UserImpl _$$UserImplFromJson(Map<String, dynamic> json) => _$UserImpl(
      id: json['id'] as String,
      email: json['email'] as String,
      username: json['username'] as String,
      displayName: json['displayName'] as String?,
      bio: json['bio'] as String?,
      profilePictureUrl: json['profilePictureUrl'] as String?,
      location: json['location'] as String?,
      dateOfBirth: json['dateOfBirth'] == null
          ? null
          : DateTime.parse(json['dateOfBirth'] as String),
      isPrivate: json['isPrivate'] as bool? ?? false,
      followersCount: (json['followersCount'] as num?)?.toInt() ?? 0,
      followingCount: (json['followingCount'] as num?)?.toInt() ?? 0,
      postsCount: (json['postsCount'] as num?)?.toInt() ?? 0,
      isActive: json['isActive'] as bool? ?? true,
      isVerified: json['isVerified'] as bool? ?? false,
      lastSeen: json['lastSeen'] == null
          ? null
          : DateTime.parse(json['lastSeen'] as String),
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      plantInterests: (json['plantInterests'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          const [],
      experienceLevel: json['experienceLevel'] as String?,
      favoriteGenres: (json['favoriteGenres'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          const [],
      gardenType: json['gardenType'] as String?,
      climate: json['climate'] as String?,
    );
Map<String, dynamic> _$$UserImplToJson(_$UserImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'email': instance.email,
      'username': instance.username,
      'displayName': instance.displayName,
      'bio': instance.bio,
      'profilePictureUrl': instance.profilePictureUrl,
      'location': instance.location,
      'dateOfBirth': instance.dateOfBirth?.toIso8601String(),
      'isPrivate': instance.isPrivate,
      'followersCount': instance.followersCount,
      'followingCount': instance.followingCount,
      'postsCount': instance.postsCount,
      'isActive': instance.isActive,
      'isVerified': instance.isVerified,
      'lastSeen': instance.lastSeen?.toIso8601String(),
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'plantInterests': instance.plantInterests,
      'experienceLevel': instance.experienceLevel,
      'favoriteGenres': instance.favoriteGenres,
      'gardenType': instance.gardenType,
      'climate': instance.climate,
    };
_$UserProfileImpl _$$UserProfileImplFromJson(Map<String, dynamic> json) =>
    _$UserProfileImpl(
      user: User.fromJson(json['user'] as Map<String, dynamic>),
      isFollowing: json['isFollowing'] as bool? ?? false,
      isFollowedBy: json['isFollowedBy'] as bool? ?? false,
      isBlocked: json['isBlocked'] as bool? ?? false,
      hasBlockedMe: json['hasBlockedMe'] as bool? ?? false,
      friendshipStatus: json['friendshipStatus'] as String?,
    );
Map<String, dynamic> _$$UserProfileImplToJson(_$UserProfileImpl instance) =>
    <String, dynamic>{
      'user': instance.user,
      'isFollowing': instance.isFollowing,
      'isFollowedBy': instance.isFollowedBy,
      'isBlocked': instance.isBlocked,
      'hasBlockedMe': instance.hasBlockedMe,
      'friendshipStatus': instance.friendshipStatus,
    };
_$UserSearchResultImpl _$$UserSearchResultImplFromJson(
        Map<String, dynamic> json) =>
    _$UserSearchResultImpl(
      id: json['id'] as String,
      username: json['username'] as String,
      fullName: json['fullName'] as String?,
      profilePictureUrl: json['profilePictureUrl'] as String?,
      isVerified: json['isVerified'] as bool? ?? false,
      isFollowing: json['isFollowing'] as bool? ?? false,
      mutualFriendsCount: json['mutualFriendsCount'] as String?,
    );
Map<String, dynamic> _$$UserSearchResultImplToJson(
        _$UserSearchResultImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'username': instance.username,
      'fullName': instance.fullName,
      'profilePictureUrl': instance.profilePictureUrl,
      'isVerified': instance.isVerified,
      'isFollowing': instance.isFollowing,
      'mutualFriendsCount': instance.mutualFriendsCount,
    };
_$UpdateUserRequestImpl _$$UpdateUserRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$UpdateUserRequestImpl(
      fullName: json['fullName'] as String?,
      bio: json['bio'] as String?,
      location: json['location'] as String?,
      dateOfBirth: json['dateOfBirth'] == null
          ? null
          : DateTime.parse(json['dateOfBirth'] as String),
      isPrivate: json['isPrivate'] as bool?,
      plantInterests: (json['plantInterests'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      experienceLevel: json['experienceLevel'] as String?,
      favoriteGenres: (json['favoriteGenres'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      gardenType: json['gardenType'] as String?,
      climate: json['climate'] as String?,
    );
Map<String, dynamic> _$$UpdateUserRequestImplToJson(
        _$UpdateUserRequestImpl instance) =>
    <String, dynamic>{
      'fullName': instance.fullName,
      'bio': instance.bio,
      'location': instance.location,
      'dateOfBirth': instance.dateOfBirth?.toIso8601String(),
      'isPrivate': instance.isPrivate,
      'plantInterests': instance.plantInterests,
      'experienceLevel': instance.experienceLevel,
      'favoriteGenres': instance.favoriteGenres,
      'gardenType': instance.gardenType,
      'climate': instance.climate,
    };
</file>

<file path="lib/core/network/api_client.dart">
import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:plant_social/core/constants/app_constants.dart';
import 'package:plant_social/core/network/interceptors/auth_interceptor.dart';
import 'package:plant_social/core/network/interceptors/logging_interceptor.dart';
import 'package:plant_social/core/network/interceptors/error_interceptor.dart';
class ApiClient {
  late final Dio _dio;
  final FlutterSecureStorage _storage;
  ApiClient(this._storage) {
    _dio = Dio(
      BaseOptions(
        baseUrl: AppConstants.apiBaseUrl,
        connectTimeout: const Duration(seconds: 30),
        receiveTimeout: const Duration(seconds: 30),
        sendTimeout: const Duration(seconds: 30),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      ),
    );
    // Add interceptors
    _dio.interceptors.addAll([
      AuthInterceptor(_storage),
      ErrorInterceptor(),
      LoggingInterceptor(),
    ]);
  }
  Dio get dio => _dio;
  // GET request
  Future<Response<T>> get<T>(
    String path, {
    Map<String, dynamic>? queryParameters,
    Options? options,
    CancelToken? cancelToken,
  }) async {
    try {
      return await _dio.get<T>(
        path,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
      );
    } catch (e) {
      rethrow;
    }
  }
  // POST request
  Future<Response<T>> post<T>(
    String path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Options? options,
    CancelToken? cancelToken,
  }) async {
    try {
      return await _dio.post<T>(
        path,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
      );
    } catch (e) {
      rethrow;
    }
  }
  // PUT request
  Future<Response<T>> put<T>(
    String path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Options? options,
    CancelToken? cancelToken,
  }) async {
    try {
      return await _dio.put<T>(
        path,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
      );
    } catch (e) {
      rethrow;
    }
  }
  // PATCH request
  Future<Response<T>> patch<T>(
    String path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Options? options,
    CancelToken? cancelToken,
  }) async {
    try {
      return await _dio.patch<T>(
        path,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
      );
    } catch (e) {
      rethrow;
    }
  }
  // DELETE request
  Future<Response<T>> delete<T>(
    String path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Options? options,
    CancelToken? cancelToken,
  }) async {
    try {
      return await _dio.delete<T>(
        path,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
      );
    } catch (e) {
      rethrow;
    }
  }
  // Upload file
  Future<Response<T>> uploadFile<T>(
    String path,
    String filePath, {
    String? fileName,
    Map<String, dynamic>? data,
    ProgressCallback? onSendProgress,
    CancelToken? cancelToken,
  }) async {
    try {
      final formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(
          filePath,
          filename: fileName,
        ),
        if (data != null) ...data,
      });
      return await _dio.post<T>(
        path,
        data: formData,
        onSendProgress: onSendProgress,
        cancelToken: cancelToken,
        options: Options(
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        ),
      );
    } catch (e) {
      rethrow;
    }
  }
  // Download file
  Future<Response> downloadFile(
    String path,
    String savePath, {
    Map<String, dynamic>? queryParameters,
    ProgressCallback? onReceiveProgress,
    CancelToken? cancelToken,
  }) async {
    try {
      return await _dio.download(
        path,
        savePath,
        queryParameters: queryParameters,
        onReceiveProgress: onReceiveProgress,
        cancelToken: cancelToken,
      );
    } catch (e) {
      rethrow;
    }
  }
}
// Provider for ApiClient
final apiClientProvider = Provider<ApiClient>((ref) {
  const storage = FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
    ),
    iOptions: IOSOptions(
      accessibility: KeychainAccessibility.first_unlock_this_device,
    ),
  );
  return ApiClient(storage);
});
</file>

<file path="lib/core/network/interceptors/auth_interceptor.dart">
import 'package:dio/dio.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:plant_social/core/constants/app_constants.dart';
class AuthInterceptor extends Interceptor {
  final FlutterSecureStorage _storage;
  AuthInterceptor(this._storage);
  @override
  void onRequest(
    RequestOptions options,
    RequestInterceptorHandler handler,
  ) async {
    // Get access token from secure storage
    final accessToken = await _storage.read(key: AppConstants.accessTokenKey);
    if (accessToken != null && accessToken.isNotEmpty) {
      options.headers['Authorization'] = 'Bearer $accessToken';
    }
    handler.next(options);
  }
  @override
  void onError(
    DioException err,
    ErrorInterceptorHandler handler,
  ) async {
    // Handle 401 Unauthorized errors
    if (err.response?.statusCode == 401) {
      // Try to refresh token
      final refreshed = await _refreshToken();
      if (refreshed) {
        // Retry the original request
        final requestOptions = err.requestOptions;
        final accessToken = await _storage.read(key: AppConstants.accessTokenKey);
        if (accessToken != null) {
          requestOptions.headers['Authorization'] = 'Bearer $accessToken';
          try {
            final dio = Dio();
            final response = await dio.fetch(requestOptions);
            handler.resolve(response);
            return;
          } catch (e) {
            // If retry fails, continue with original error
          }
        }
      }
      // If refresh failed or no refresh token, clear tokens and redirect to login
      await _clearTokens();
    }
    handler.next(err);
  }
  Future<bool> _refreshToken() async {
    try {
      final refreshToken = await _storage.read(key: AppConstants.refreshTokenKey);
      if (refreshToken == null || refreshToken.isEmpty) {
        return false;
      }
      final dio = Dio();
      final response = await dio.post(
        '${AppConstants.apiBaseUrl}/auth/refresh',
        data: {'refresh_token': refreshToken},
      );
      if (response.statusCode == 200) {
        final data = response.data;
        final newAccessToken = data['access_token'];
        final newRefreshToken = data['refresh_token'];
        if (newAccessToken != null) {
          await _storage.write(key: AppConstants.accessTokenKey, value: newAccessToken);
        }
        if (newRefreshToken != null) {
          await _storage.write(key: AppConstants.refreshTokenKey, value: newRefreshToken);
        }
        return true;
      }
    } catch (e) {
      // Refresh failed
      print('Token refresh failed: $e');
    }
    return false;
  }
  Future<void> _clearTokens() async {
    await Future.wait([
      _storage.delete(key: AppConstants.accessTokenKey),
      _storage.delete(key: AppConstants.refreshTokenKey),
      _storage.delete(key: AppConstants.userDataKey),
    ]);
  }
}
</file>

<file path="lib/core/network/interceptors/error_interceptor.dart">
import 'package:dio/dio.dart';
import 'package:plant_social/core/exceptions/api_exception.dart';
class ErrorInterceptor extends Interceptor {
  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    final apiException = _handleError(err);
    handler.reject(DioException(
      requestOptions: err.requestOptions,
      error: apiException,
      type: err.type,
      response: err.response,
    ));
  }
  ApiException _handleError(DioException error) {
    switch (error.type) {
      case DioExceptionType.connectionTimeout:
      case DioExceptionType.sendTimeout:
      case DioExceptionType.receiveTimeout:
        return const ApiException(
          message: 'Connection timeout. Please check your internet connection.',
          statusCode: 408,
          type: ApiExceptionType.timeout,
        );
      case DioExceptionType.badResponse:
        return _handleResponseError(error);
      case DioExceptionType.cancel:
        return const ApiException(
          message: 'Request was cancelled.',
          statusCode: 0,
          type: ApiExceptionType.cancel,
        );
      case DioExceptionType.connectionError:
        return const ApiException(
          message: 'No internet connection. Please check your network settings.',
          statusCode: 0,
          type: ApiExceptionType.network,
        );
      case DioExceptionType.badCertificate:
        return const ApiException(
          message: 'Certificate verification failed.',
          statusCode: 0,
          type: ApiExceptionType.network,
        );
      case DioExceptionType.unknown:
      default:
        return const ApiException(
          message: 'An unexpected error occurred. Please try again.',
          statusCode: 0,
          type: ApiExceptionType.unknown,
        );
    }
  }
  ApiException _handleResponseError(DioException error) {
    final response = error.response;
    final statusCode = response?.statusCode ?? 0;
    final data = response?.data;
    String message = 'An error occurred. Please try again.';
    ApiExceptionType type = ApiExceptionType.server;
    // Try to extract error message from response
    if (data is Map<String, dynamic>) {
      if (data.containsKey('detail')) {
        message = data['detail'].toString();
      } else if (data.containsKey('message')) {
        message = data['message'].toString();
      } else if (data.containsKey('error')) {
        message = data['error'].toString();
      }
    } else if (data is String) {
      message = data;
    }
    // Handle specific status codes
    switch (statusCode) {
      case 400:
        type = ApiExceptionType.badRequest;
        if (message.isEmpty) {
          message = 'Invalid request. Please check your input.';
        }
        break;
      case 401:
        type = ApiExceptionType.unauthorized;
        message = 'Authentication failed. Please log in again.';
        break;
      case 403:
        type = ApiExceptionType.forbidden;
        message = 'Access denied. You don\'t have permission to perform this action.';
        break;
      case 404:
        type = ApiExceptionType.notFound;
        message = 'The requested resource was not found.';
        break;
      case 409:
        type = ApiExceptionType.conflict;
        if (message.isEmpty) {
          message = 'A conflict occurred. The resource may already exist.';
        }
        break;
      case 422:
        type = ApiExceptionType.validation;
        if (message.isEmpty) {
          message = 'Validation failed. Please check your input.';
        }
        break;
      case 429:
        type = ApiExceptionType.tooManyRequests;
        message = 'Too many requests. Please try again later.';
        break;
      case 500:
      case 502:
      case 503:
      case 504:
        type = ApiExceptionType.server;
        message = 'Server error. Please try again later.';
        break;
      default:
        type = ApiExceptionType.server;
        if (message.isEmpty) {
          message = 'An unexpected error occurred. Please try again.';
        }
    }
    return ApiException(
      message: message,
      statusCode: statusCode,
      type: type,
      details: data is Map<String, dynamic> ? data : null,
    );
  }
}
</file>

<file path="lib/core/network/interceptors/logging_interceptor.dart">
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
class LoggingInterceptor extends Interceptor {
  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    if (kDebugMode) {
      print('\n🚀 REQUEST[${options.method}] => PATH: ${options.path}');
      print('Headers:');
      options.headers.forEach((k, v) => print('  $k: $v'));
      if (options.queryParameters.isNotEmpty) {
        print('Query Parameters:');
        options.queryParameters.forEach((k, v) => print('  $k: $v'));
      }
      if (options.data != null) {
        print('Body: ${options.data}');
      }
      print('\n');
    }
    handler.next(options);
  }
  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    if (kDebugMode) {
      print('\n✅ RESPONSE[${response.statusCode}] => PATH: ${response.requestOptions.path}');
      print('Data: ${response.data}');
      print('\n');
    }
    handler.next(response);
  }
  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    if (kDebugMode) {
      print('\n❌ ERROR[${err.response?.statusCode}] => PATH: ${err.requestOptions.path}');
      print('Error: ${err.error}');
      print('Message: ${err.message}');
      if (err.response?.data != null) {
        print('Response Data: ${err.response?.data}');
      }
      print('\n');
    }
    handler.next(err);
  }
}
</file>

<file path="lib/core/providers/api_provider.dart">
/**
 * Core API provider for dependency injection
 * Provides centralized access to API service throughout the app
 */
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/api_service.dart';
/**
 * Provider for API service - re-exported for convenience
 */
final apiServiceProvider = Provider<ApiService>((ref) {
  return ApiService();
});
/**
 * Provider for API client state management
 */
final apiStateProvider = StateProvider<ApiState>((ref) {
  return const ApiState.idle();
});
/**
 * API state management for loading states
 */
class ApiState {
  final bool isLoading;
  final String? error;
  final String? message;
  const ApiState({
    required this.isLoading,
    this.error,
    this.message,
  });
  const ApiState.idle() : this(isLoading: false);
  const ApiState.loading() : this(isLoading: true);
  const ApiState.error(String error) : this(isLoading: false, error: error);
  const ApiState.success(String message) : this(isLoading: false, message: message);
  ApiState copyWith({
    bool? isLoading,
    String? error,
    String? message,
  }) {
    return ApiState(
      isLoading: isLoading ?? this.isLoading,
      error: error ?? this.error,
      message: message ?? this.message,
    );
  }
}
</file>

<file path="lib/core/providers/storage_provider.dart">
/**
 * Core storage provider for dependency injection
 * Provides centralized access to storage service throughout the app
 */
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/storage_service.dart';
/**
 * Provider for storage service - re-exported for convenience
 */
final storageServiceProvider = Provider<StorageService>((ref) {
  return StorageService();
});
/**
 * Provider for user preferences state
 */
final userPreferencesProvider = StateNotifierProvider<UserPreferencesNotifier, UserPreferences>((ref) {
  final storageService = ref.watch(storageServiceProvider);
  return UserPreferencesNotifier(storageService);
});
/**
 * User preferences state model
 */
class UserPreferences {
  final bool isDarkMode;
  final String language;
  final bool notificationsEnabled;
  final bool locationEnabled;
  const UserPreferences({
    this.isDarkMode = false,
    this.language = 'en',
    this.notificationsEnabled = true,
    this.locationEnabled = false,
  });
  UserPreferences copyWith({
    bool? isDarkMode,
    String? language,
    bool? notificationsEnabled,
    bool? locationEnabled,
  }) {
    return UserPreferences(
      isDarkMode: isDarkMode ?? this.isDarkMode,
      language: language ?? this.language,
      notificationsEnabled: notificationsEnabled ?? this.notificationsEnabled,
      locationEnabled: locationEnabled ?? this.locationEnabled,
    );
  }
}
/**
 * User preferences state notifier
 */
class UserPreferencesNotifier extends StateNotifier<UserPreferences> {
  final StorageService _storageService;
  UserPreferencesNotifier(this._storageService) : super(const UserPreferences()) {
    _loadPreferences();
  }
  /**
   * Load preferences from storage
   */
  Future<void> _loadPreferences() async {
    final isDarkMode = await _storageService.getBool('isDarkMode');
    final language = await _storageService.getString('language') ?? 'en';
    final notificationsEnabled = await _storageService.getBool('notificationsEnabled', defaultValue: true);
    final locationEnabled = await _storageService.getBool('locationEnabled');
    state = UserPreferences(
      isDarkMode: isDarkMode,
      language: language,
      notificationsEnabled: notificationsEnabled,
      locationEnabled: locationEnabled,
    );
  }
  /**
   * Update dark mode preference
   */
  Future<void> setDarkMode(bool isDarkMode) async {
    await _storageService.setBool('isDarkMode', isDarkMode);
    state = state.copyWith(isDarkMode: isDarkMode);
  }
  /**
   * Update language preference
   */
  Future<void> setLanguage(String language) async {
    await _storageService.setString('language', language);
    state = state.copyWith(language: language);
  }
  /**
   * Update notifications preference
   */
  Future<void> setNotificationsEnabled(bool enabled) async {
    await _storageService.setBool('notificationsEnabled', enabled);
    state = state.copyWith(notificationsEnabled: enabled);
  }
  /**
   * Update location preference
   */
  Future<void> setLocationEnabled(bool enabled) async {
    await _storageService.setBool('locationEnabled', enabled);
    state = state.copyWith(locationEnabled: enabled);
  }
}
</file>

<file path="lib/core/router/app_router.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/features/auth/presentation/screens/login_screen.dart';
import 'package:plant_social/features/auth/presentation/screens/register_screen.dart';
import 'package:plant_social/features/auth/presentation/screens/splash_screen.dart';
import 'package:plant_social/features/home/presentation/screens/main_screen.dart';
import 'package:plant_social/features/camera/presentation/screens/camera_screen.dart';
import 'package:plant_social/features/chat/presentation/screens/chat_screen.dart';
import 'package:plant_social/features/chat/presentation/screens/conversation_screen.dart';
import 'package:plant_social/features/stories/presentation/screens/story_viewer_screen.dart';
import 'package:plant_social/features/stories/presentation/screens/story_creation_screen.dart';
import 'package:plant_social/features/profile/presentation/screens/profile_screen.dart';
import 'package:plant_social/features/profile/presentation/screens/profile_edit_screen.dart';
import 'package:plant_social/features/friends/presentation/screens/friends_screen.dart';
import 'package:plant_social/features/friends/presentation/screens/add_friends_screen.dart';
import 'package:plant_social/features/plant/presentation/screens/plant_features_screen.dart';
import 'package:plant_social/features/auth/providers/auth_provider.dart';
final appRouterProvider = Provider<GoRouter>((ref) {
  final authState = ref.watch(authProvider);
  return GoRouter(
    initialLocation: '/splash',
    redirect: (BuildContext context, GoRouterState state) {
      final isLoggedIn = authState.isAuthenticated;
      final isLoggingIn = state.matchedLocation == '/login' || 
                         state.matchedLocation == '/register';
      // If not logged in and not on auth screens, redirect to login
      if (!isLoggedIn && !isLoggingIn && state.matchedLocation != '/splash') {
        return '/login';
      }
      // If logged in and on auth screens, redirect to home
      if (isLoggedIn && isLoggingIn) {
        return '/home';
      }
      return null;
    },
    routes: [
      // Splash Screen
      GoRoute(
        path: '/splash',
        name: 'splash',
        builder: (BuildContext context, GoRouterState state) => const SplashScreen(),
      ),
      // Authentication Routes
      GoRoute(
        path: '/login',
        name: 'login',
        builder: (BuildContext context, GoRouterState state) => const LoginScreen(),
      ),
      GoRoute(
        path: '/register',
        name: 'register',
        builder: (BuildContext context, GoRouterState state) => const RegisterScreen(),
      ),
      // Main App Routes
      GoRoute(
        path: '/home',
        name: 'home',
        builder: (BuildContext context, GoRouterState state) => const MainScreen(),
        routes: [
          // Camera Route
          GoRoute(
            path: 'camera',
            name: 'camera',
            builder: (context, state) => const CameraScreen(),
            routes: [
              GoRoute(
                path: 'story-creation',
                name: 'story-creation',
                builder: (context, state) {
                  final imagePath = state.uri.queryParameters['imagePath'];
                  return StoryCreationScreen(imagePath: imagePath);
                },
              ),
            ],
          ),
          // Chat Routes
          GoRoute(
            path: 'chat',
            name: 'chat',
            builder: (context, state) => const ChatScreen(),
            routes: [
              GoRoute(
                path: 'conversation/:userId',
                name: 'conversation',
                builder: (context, state) {
                  final userId = state.pathParameters['userId']!;
                  final userName = state.uri.queryParameters['userName'];
                  return ConversationScreen(
                    userId: userId,
                    userName: userName,
                  );
                },
              ),
            ],
          ),
          // Stories Routes
          GoRoute(
            path: 'story/:storyId',
            name: 'story-viewer',
            builder: (context, state) {
              final storyId = state.pathParameters['storyId']!;
              final userId = state.uri.queryParameters['userId'];
              return StoryViewerScreen(
                storyId: storyId,
                userId: userId,
              );
            },
          ),
          // Profile Routes
          GoRoute(
            path: 'profile',
            name: 'profile',
            builder: (context, state) => const ProfileScreen(),
            routes: [
              GoRoute(
                path: 'edit',
                name: 'edit-profile',
                builder: (context, state) => const ProfileEditScreen(),
              ),
            ],
          ),
          // Friends Routes
          GoRoute(
            path: 'friends',
            name: 'friends',
            builder: (context, state) => const FriendsScreen(),
            routes: [
              GoRoute(
                path: 'add',
                name: 'add-friends',
                builder: (context, state) => const AddFriendsScreen(),
              ),
            ],
          ),
          // Plant Features Routes
          GoRoute(
            path: 'plants',
            name: 'plants',
            builder: (context, state) => const PlantFeaturesScreen(),
          ),
        ],
      ),
    ],
    errorBuilder: (BuildContext context, GoRouterState state) => Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.error_outline,
              size: 64,
              color: Colors.red,
            ),
            const SizedBox(height: 16),
            Text(
              'Page not found',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
            const SizedBox(height: 8),
            Text(
              'The page you are looking for does not exist.',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () => context.go('/home'),
              child: const Text('Go Home'),
            ),
          ],
        ),
      ),
    ),
  );
});
// Route Names for easy access
class AppRoutes {
  static const String splash = '/splash';
  static const String login = '/login';
  static const String register = '/register';
  static const String home = '/home';
  static const String camera = 'camera';
  static const String storyCreation = 'story-creation';
  static const String chat = 'chat';
  static const String conversation = 'conversation';
  static const String storyViewer = 'story-viewer';
  static const String profile = 'profile';
  static const String editProfile = 'edit-profile';
  static const String friends = 'friends';
  static const String addFriends = 'add-friends';
  static const String plants = 'plants';
}
</file>

<file path="lib/core/services/api_service.dart">
/// Core API service for handling HTTP requests and responses
/// Provides centralized API communication with error handling and authentication
library;
import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../exceptions/api_exception.dart';
/// Provider for the API service singleton
final apiServiceProvider = Provider<ApiService>((ref) {
  return ApiService();
});
/// Main API service class for handling all HTTP operations
class ApiService {
  late final Dio _dio;
  ApiService() {
    _dio = Dio();
    _setupInterceptors();
  }
  /// Configure Dio interceptors for logging and error handling
  void _setupInterceptors() {
    _dio.options.baseUrl = 'http://localhost:8000/api';
    _dio.options.connectTimeout = const Duration(seconds: 30);
    _dio.options.receiveTimeout = const Duration(seconds: 30);
  }
  /// Generic GET request handler
  Future<T> get<T>(String endpoint, {Map<String, dynamic>? queryParameters}) async {
    try {
      final response = await _dio.get(endpoint, queryParameters: queryParameters);
      return response.data as T;
    } on DioException catch (e) {
      throw ApiException(
        message: e.message ?? 'Unknown error occurred',
        statusCode: e.response?.statusCode ?? 0,
        type: _getExceptionType(e),
      );
    }
  }
  /// Generic POST request handler
  Future<T> post<T>(String endpoint, {dynamic data, Map<String, dynamic>? queryParameters}) async {
    try {
      final response = await _dio.post(endpoint, data: data, queryParameters: queryParameters);
      return response.data as T;
    } on DioException catch (e) {
      throw _createApiException(e);
    }
  }
  /// Generic PUT request handler
  Future<T> put<T>(String endpoint, {dynamic data, Map<String, dynamic>? queryParameters}) async {
    try {
      final response = await _dio.put(endpoint, data: data, queryParameters: queryParameters);
      return response.data as T;
    } on DioException catch (e) {
      throw _createApiException(e);
    }
  }
  /// Generic DELETE request handler
  Future<T> delete<T>(String endpoint, {Map<String, dynamic>? queryParameters}) async {
    try {
      final response = await _dio.delete(endpoint, queryParameters: queryParameters);
      return response.data as T;
    } on DioException catch (e) {
      throw _createApiException(e);
    }
  }
  /// Upload file with multipart form data
  Future<T> uploadFile<T>(String endpoint, String filePath, {Map<String, dynamic>? additionalData}) async {
    try {
      final formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(filePath),
        ...?additionalData,
      });
      final response = await _dio.post(endpoint, data: formData);
      return response.data as T;
    } on DioException catch (e) {
      throw _createApiException(e);
    }
  }
  /// Helper method to create ApiException from DioException
  ApiException _createApiException(DioException e) {
    return ApiException(
      message: e.message ?? 'Unknown error occurred',
      statusCode: e.response?.statusCode ?? 0,
      type: _getExceptionType(e),
    );
  }
  /// Helper method to determine exception type from DioException
  ApiExceptionType _getExceptionType(DioException e) {
    switch (e.type) {
      case DioExceptionType.connectionTimeout:
      case DioExceptionType.sendTimeout:
      case DioExceptionType.receiveTimeout:
        return ApiExceptionType.timeout;
      case DioExceptionType.connectionError:
        return ApiExceptionType.network;
      case DioExceptionType.cancel:
        return ApiExceptionType.cancel;
      case DioExceptionType.badResponse:
        final statusCode = e.response?.statusCode ?? 0;
        if (statusCode >= 400 && statusCode < 500) {
          switch (statusCode) {
            case 400:
              return ApiExceptionType.badRequest;
            case 401:
              return ApiExceptionType.unauthorized;
            case 403:
              return ApiExceptionType.forbidden;
            case 404:
              return ApiExceptionType.notFound;
            case 409:
              return ApiExceptionType.conflict;
            case 422:
              return ApiExceptionType.validation;
            case 429:
              return ApiExceptionType.tooManyRequests;
            default:
              return ApiExceptionType.badRequest;
          }
        } else if (statusCode >= 500) {
          return ApiExceptionType.server;
        }
        return ApiExceptionType.unknown;
      default:
        return ApiExceptionType.unknown;
    }
  }
}
</file>

<file path="lib/core/services/storage_service.dart">
/**
 * Core storage service for handling local data persistence
 * Provides secure storage for user data, preferences, and cached content
 */
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
/**
 * Provider for the storage service singleton
 */
final storageServiceProvider = Provider<StorageService>((ref) {
  return StorageService();
});
/**
 * Main storage service class for handling local data operations
 */
class StorageService {
  static const _secureStorage = FlutterSecureStorage();
  SharedPreferences? _prefs;
  /**
   * Initialize shared preferences
   */
  Future<void> init() async {
    _prefs ??= await SharedPreferences.getInstance();
  }
  /**
   * Store sensitive data securely (tokens, passwords)
   */
  Future<void> storeSecure(String key, String value) async {
    await _secureStorage.write(key: key, value: value);
  }
  /**
   * Retrieve sensitive data securely
   */
  Future<String?> getSecure(String key) async {
    return await _secureStorage.read(key: key);
  }
  /**
   * Delete sensitive data
   */
  Future<void> deleteSecure(String key) async {
    await _secureStorage.delete(key: key);
  }
  /**
   * Clear all secure storage
   */
  Future<void> clearSecure() async {
    await _secureStorage.deleteAll();
  }
  /**
   * Store regular preferences data
   */
  Future<bool> setString(String key, String value) async {
    await init();
    return _prefs!.setString(key, value);
  }
  /**
   * Get regular preferences data
   */
  Future<String?> getString(String key) async {
    await init();
    return _prefs!.getString(key);
  }
  /**
   * Store boolean preferences
   */
  Future<bool> setBool(String key, bool value) async {
    await init();
    return _prefs!.setBool(key, value);
  }
  /**
   * Get boolean preferences
   */
  Future<bool> getBool(String key, {bool defaultValue = false}) async {
    await init();
    return _prefs!.getBool(key) ?? defaultValue;
  }
  /**
   * Store integer preferences
   */
  Future<bool> setInt(String key, int value) async {
    await init();
    return _prefs!.setInt(key, value);
  }
  /**
   * Get integer preferences
   */
  Future<int> getInt(String key, {int defaultValue = 0}) async {
    await init();
    return _prefs!.getInt(key) ?? defaultValue;
  }
  /**
   * Store list of strings
   */
  Future<bool> setStringList(String key, List<String> value) async {
    await init();
    return _prefs!.setStringList(key, value);
  }
  /**
   * Get list of strings
   */
  Future<List<String>> getStringList(String key) async {
    await init();
    return _prefs!.getStringList(key) ?? [];
  }
  /**
   * Remove a preference key
   */
  Future<bool> remove(String key) async {
    await init();
    return _prefs!.remove(key);
  }
  /**
   * Clear all preferences
   */
  Future<bool> clear() async {
    await init();
    return _prefs!.clear();
  }
  /**
   * Check if a key exists in preferences
   */
  Future<bool> containsKey(String key) async {
    await init();
    return _prefs!.containsKey(key);
  }
}
</file>

<file path="lib/core/theme/app_theme.dart">
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
class AppTheme {
  // Plant-focused color palette
  static const Color primaryGreen = Color(0xFF2E7D32);
  static const Color lightGreen = Color(0xFF4CAF50);
  static const Color darkGreen = Color(0xFF1B5E20);
  static const Color accentGreen = Color(0xFF81C784);
  static const Color earthBrown = Color(0xFF5D4037);
  static const Color lightBrown = Color(0xFF8D6E63);
  static const Color darkBrown = Color(0xFF3E2723);
  static const Color sunYellow = Color(0xFFFFC107);
  static const Color skyBlue = Color(0xFF03A9F4);
  static const Color flowerPink = Color(0xFFE91E63);
  static const Color backgroundLight = Color(0xFFF8F9FA);
  static const Color backgroundDark = Color(0xFF121212);
  static const Color surfaceLight = Color(0xFFFFFFFF);
  static const Color surfaceDark = Color(0xFF1E1E1E);
  static const Color textPrimary = Color(0xFF212121);
  static const Color textSecondary = Color(0xFF757575);
  static const Color textLight = Color(0xFFFFFFFF);
  static const Color error = Color(0xFFD32F2F);
  static const Color warning = Color(0xFFF57C00);
  static const Color success = Color(0xFF388E3C);
  static const Color info = Color(0xFF1976D2);
  static ThemeData get lightTheme {
    return ThemeData(
      useMaterial3: true,
      brightness: Brightness.light,
      colorScheme: const ColorScheme.light(
        primary: primaryGreen,
        secondary: accentGreen,
        tertiary: sunYellow,
        surface: surfaceLight,
        background: backgroundLight,
        error: error,
        onPrimary: textLight,
        onSecondary: textPrimary,
        onSurface: textPrimary,
        onBackground: textPrimary,
        onError: textLight,
      ),
      textTheme: _buildTextTheme(textPrimary),
      appBarTheme: _buildAppBarTheme(true),
      elevatedButtonTheme: _buildElevatedButtonTheme(true),
      outlinedButtonTheme: _buildOutlinedButtonTheme(true),
      textButtonTheme: _buildTextButtonTheme(true),
      inputDecorationTheme: _buildInputDecorationTheme(true),
      cardTheme: _buildCardTheme(true),
      bottomNavigationBarTheme: _buildBottomNavTheme(true),
      floatingActionButtonTheme: _buildFABTheme(true),
      chipTheme: _buildChipTheme(true),
    );
  }
  static ThemeData get darkTheme {
    return ThemeData(
      useMaterial3: true,
      brightness: Brightness.dark,
      colorScheme: const ColorScheme.dark(
        primary: lightGreen,
        secondary: accentGreen,
        tertiary: sunYellow,
        surface: surfaceDark,
        background: backgroundDark,
        error: error,
        onPrimary: textPrimary,
        onSecondary: textPrimary,
        onSurface: textLight,
        onBackground: textLight,
        onError: textLight,
      ),
      textTheme: _buildTextTheme(textLight),
      appBarTheme: _buildAppBarTheme(false),
      elevatedButtonTheme: _buildElevatedButtonTheme(false),
      outlinedButtonTheme: _buildOutlinedButtonTheme(false),
      textButtonTheme: _buildTextButtonTheme(false),
      inputDecorationTheme: _buildInputDecorationTheme(false),
      cardTheme: _buildCardTheme(false),
      bottomNavigationBarTheme: _buildBottomNavTheme(false),
      floatingActionButtonTheme: _buildFABTheme(false),
      chipTheme: _buildChipTheme(false),
    );
  }
  static TextTheme _buildTextTheme(Color textColor) {
    return GoogleFonts.interTextTheme().copyWith(
      displayLarge: GoogleFonts.inter(
        fontSize: 32,
        fontWeight: FontWeight.bold,
        color: textColor,
      ),
      displayMedium: GoogleFonts.inter(
        fontSize: 28,
        fontWeight: FontWeight.bold,
        color: textColor,
      ),
      displaySmall: GoogleFonts.inter(
        fontSize: 24,
        fontWeight: FontWeight.w600,
        color: textColor,
      ),
      headlineLarge: GoogleFonts.inter(
        fontSize: 22,
        fontWeight: FontWeight.w600,
        color: textColor,
      ),
      headlineMedium: GoogleFonts.inter(
        fontSize: 20,
        fontWeight: FontWeight.w500,
        color: textColor,
      ),
      headlineSmall: GoogleFonts.inter(
        fontSize: 18,
        fontWeight: FontWeight.w500,
        color: textColor,
      ),
      titleLarge: GoogleFonts.inter(
        fontSize: 16,
        fontWeight: FontWeight.w500,
        color: textColor,
      ),
      titleMedium: GoogleFonts.inter(
        fontSize: 14,
        fontWeight: FontWeight.w500,
        color: textColor,
      ),
      titleSmall: GoogleFonts.inter(
        fontSize: 12,
        fontWeight: FontWeight.w500,
        color: textColor,
      ),
      bodyLarge: GoogleFonts.inter(
        fontSize: 16,
        fontWeight: FontWeight.normal,
        color: textColor,
      ),
      bodyMedium: GoogleFonts.inter(
        fontSize: 14,
        fontWeight: FontWeight.normal,
        color: textColor,
      ),
      bodySmall: GoogleFonts.inter(
        fontSize: 12,
        fontWeight: FontWeight.normal,
        color: textSecondary,
      ),
      labelLarge: GoogleFonts.inter(
        fontSize: 14,
        fontWeight: FontWeight.w500,
        color: textColor,
      ),
      labelMedium: GoogleFonts.inter(
        fontSize: 12,
        fontWeight: FontWeight.w500,
        color: textColor,
      ),
      labelSmall: GoogleFonts.inter(
        fontSize: 10,
        fontWeight: FontWeight.w500,
        color: textSecondary,
      ),
    );
  }
  static AppBarTheme _buildAppBarTheme(bool isLight) {
    return AppBarTheme(
      elevation: 0,
      centerTitle: true,
      backgroundColor: isLight ? surfaceLight : surfaceDark,
      foregroundColor: isLight ? textPrimary : textLight,
      titleTextStyle: GoogleFonts.inter(
        fontSize: 18,
        fontWeight: FontWeight.w600,
        color: isLight ? textPrimary : textLight,
      ),
    );
  }
  static ElevatedButtonThemeData _buildElevatedButtonTheme(bool isLight) {
    return ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: primaryGreen,
        foregroundColor: textLight,
        elevation: 2,
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        textStyle: GoogleFonts.inter(
          fontSize: 14,
          fontWeight: FontWeight.w600,
        ),
      ),
    );
  }
  static OutlinedButtonThemeData _buildOutlinedButtonTheme(bool isLight) {
    return OutlinedButtonThemeData(
      style: OutlinedButton.styleFrom(
        foregroundColor: primaryGreen,
        side: const BorderSide(color: primaryGreen, width: 1.5),
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        textStyle: GoogleFonts.inter(
          fontSize: 14,
          fontWeight: FontWeight.w600,
        ),
      ),
    );
  }
  static TextButtonThemeData _buildTextButtonTheme(bool isLight) {
    return TextButtonThemeData(
      style: TextButton.styleFrom(
        foregroundColor: primaryGreen,
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        textStyle: GoogleFonts.inter(
          fontSize: 14,
          fontWeight: FontWeight.w600,
        ),
      ),
    );
  }
  static InputDecorationTheme _buildInputDecorationTheme(bool isLight) {
    return InputDecorationTheme(
      filled: true,
      fillColor: isLight ? Colors.grey[50] : Colors.grey[900],
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.grey[300]!),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.grey[300]!),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: const BorderSide(color: primaryGreen, width: 2),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: const BorderSide(color: error, width: 1),
      ),
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      labelStyle: GoogleFonts.inter(
        fontSize: 14,
        color: textSecondary,
      ),
      hintStyle: GoogleFonts.inter(
        fontSize: 14,
        color: textSecondary,
      ),
    );
  }
  static CardThemeData _buildCardTheme(bool isLight) {
    return CardThemeData(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      color: isLight ? surfaceLight : surfaceDark,
    );
  }
  static BottomNavigationBarThemeData _buildBottomNavTheme(bool isLight) {
    return BottomNavigationBarThemeData(
      backgroundColor: isLight ? surfaceLight : surfaceDark,
      selectedItemColor: primaryGreen,
      unselectedItemColor: textSecondary,
      type: BottomNavigationBarType.fixed,
      elevation: 8,
      selectedLabelStyle: GoogleFonts.inter(
        fontSize: 12,
        fontWeight: FontWeight.w600,
      ),
      unselectedLabelStyle: GoogleFonts.inter(
        fontSize: 12,
        fontWeight: FontWeight.normal,
      ),
    );
  }
  static FloatingActionButtonThemeData _buildFABTheme(bool isLight) {
    return const FloatingActionButtonThemeData(
      backgroundColor: primaryGreen,
      foregroundColor: textLight,
      elevation: 4,
    );
  }
  static ChipThemeData _buildChipTheme(bool isLight) {
    return ChipThemeData(
      backgroundColor: isLight ? Colors.grey[100] : Colors.grey[800],
      selectedColor: accentGreen,
      labelStyle: GoogleFonts.inter(
        fontSize: 12,
        fontWeight: FontWeight.w500,
      ),
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
    );
  }
}
</file>

<file path="lib/core/utils/date_utils.dart">
class DateUtils {
  /// Formats a DateTime to a relative time string (e.g., "2 hours ago", "3 days ago")
  static String formatRelativeTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);
    if (difference.inDays > 365) {
      final years = (difference.inDays / 365).floor();
      return years == 1 ? '1 year ago' : '$years years ago';
    } else if (difference.inDays > 30) {
      final months = (difference.inDays / 30).floor();
      return months == 1 ? '1 month ago' : '$months months ago';
    } else if (difference.inDays > 0) {
      return difference.inDays == 1 ? '1 day ago' : '${difference.inDays} days ago';
    } else if (difference.inHours > 0) {
      return difference.inHours == 1 ? '1 hour ago' : '${difference.inHours} hours ago';
    } else if (difference.inMinutes > 0) {
      return difference.inMinutes == 1 ? '1 minute ago' : '${difference.inMinutes} minutes ago';
    } else {
      return 'Just now';
    }
  }
  /// Formats a DateTime to a short date string (e.g., "Mar 15", "Dec 3, 2023")
  static String formatShortDate(DateTime dateTime) {
    final now = DateTime.now();
    final months = [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ];
    final month = months[dateTime.month - 1];
    final day = dateTime.day;
    if (dateTime.year == now.year) {
      return '$month $day';
    } else {
      return '$month $day, ${dateTime.year}';
    }
  }
  /// Formats a DateTime to a full date string (e.g., "March 15, 2024")
  static String formatFullDate(DateTime dateTime) {
    final months = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    final month = months[dateTime.month - 1];
    final day = dateTime.day;
    final year = dateTime.year;
    return '$month $day, $year';
  }
  /// Formats a DateTime to a time string (e.g., "2:30 PM", "14:30")
  static String formatTime(DateTime dateTime, {bool use24Hour = false}) {
    if (use24Hour) {
      final hour = dateTime.hour.toString().padLeft(2, '0');
      final minute = dateTime.minute.toString().padLeft(2, '0');
      return '$hour:$minute';
    } else {
      final hour = dateTime.hour == 0
          ? 12
          : dateTime.hour > 12
              ? dateTime.hour - 12
              : dateTime.hour;
      final minute = dateTime.minute.toString().padLeft(2, '0');
      final period = dateTime.hour >= 12 ? 'PM' : 'AM';
      return '$hour:$minute $period';
    }
  }
  /// Formats a DateTime to a date and time string (e.g., "Mar 15, 2:30 PM")
  static String formatDateTime(DateTime dateTime, {bool use24Hour = false}) {
    final date = formatShortDate(dateTime);
    final time = formatTime(dateTime, use24Hour: use24Hour);
    return '$date, $time';
  }
  /// Checks if a date is today
  static bool isToday(DateTime dateTime) {
    final now = DateTime.now();
    return dateTime.year == now.year &&
        dateTime.month == now.month &&
        dateTime.day == now.day;
  }
  /// Checks if a date is yesterday
  static bool isYesterday(DateTime dateTime) {
    final yesterday = DateTime.now().subtract(const Duration(days: 1));
    return dateTime.year == yesterday.year &&
        dateTime.month == yesterday.month &&
        dateTime.day == yesterday.day;
  }
  /// Checks if a date is this week
  static bool isThisWeek(DateTime dateTime) {
    final now = DateTime.now();
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));
    final endOfWeek = startOfWeek.add(const Duration(days: 6));
    return dateTime.isAfter(startOfWeek.subtract(const Duration(days: 1))) &&
        dateTime.isBefore(endOfWeek.add(const Duration(days: 1)));
  }
  /// Gets the start of the day for a given DateTime
  static DateTime startOfDay(DateTime dateTime) {
    return DateTime(dateTime.year, dateTime.month, dateTime.day);
  }
  /// Gets the end of the day for a given DateTime
  static DateTime endOfDay(DateTime dateTime) {
    return DateTime(dateTime.year, dateTime.month, dateTime.day, 23, 59, 59, 999);
  }
  /// Calculates the number of days between two dates
  static int daysBetween(DateTime from, DateTime to) {
    from = startOfDay(from);
    to = startOfDay(to);
    return to.difference(from).inDays;
  }
  /// Formats a duration to a human-readable string
  static String formatDuration(Duration duration) {
    if (duration.inDays > 0) {
      return '${duration.inDays}d ${duration.inHours % 24}h';
    } else if (duration.inHours > 0) {
      return '${duration.inHours}h ${duration.inMinutes % 60}m';
    } else if (duration.inMinutes > 0) {
      return '${duration.inMinutes}m';
    } else {
      return '${duration.inSeconds}s';
    }
  }
  /// Parses an ISO 8601 string to DateTime
  static DateTime? parseIso8601(String? dateString) {
    if (dateString == null || dateString.isEmpty) {
      return null;
    }
    try {
      return DateTime.parse(dateString);
    } catch (e) {
      return null;
    }
  }
  /// Formats a DateTime to ISO 8601 string
  static String toIso8601(DateTime dateTime) {
    return dateTime.toIso8601String();
  }
  /// Gets a user-friendly format based on how recent the date is
  static String formatSmart(DateTime dateTime) {
    if (isToday(dateTime)) {
      return formatTime(dateTime);
    } else if (isYesterday(dateTime)) {
      return 'Yesterday';
    } else if (isThisWeek(dateTime)) {
      final weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
      return weekdays[dateTime.weekday - 1];
    } else {
      return formatShortDate(dateTime);
    }
  }
  /// Formats a date range
  static String formatDateRange(DateTime start, DateTime end) {
    if (startOfDay(start) == startOfDay(end)) {
      // Same day
      return '${formatShortDate(start)}, ${formatTime(start)} - ${formatTime(end)}';
    } else if (start.year == end.year) {
      // Same year
      return '${formatShortDate(start)} - ${formatShortDate(end)}';
    } else {
      // Different years
      return '${formatShortDate(start)}, ${start.year} - ${formatShortDate(end)}, ${end.year}';
    }
  }
}
</file>

<file path="lib/core/widgets/analytics_widgets.dart">
import 'package:flutter/material.dart';
/// Collection of rich analytics widgets for displaying comprehensive backend data
class AnalyticsWidgets {
  /// Enhanced ML Health Analytics Card
  static Widget buildMLHealthAnalyticsCard({
    required ThemeData theme,
    required Map<String, dynamic> healthData,
    VoidCallback? onTap,
  }) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.psychology, color: theme.primaryColor, size: 24),
                  const SizedBox(width: 8),
                  Text(
                    'ML Plant Health Analytics',
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const Spacer(),
                  Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey[600]),
                ],
              ),
              const SizedBox(height: 16),
              // Overall Health Score
              _buildHealthScoreDisplay(theme, healthData),
              const SizedBox(height: 16),
              // Feature Scores
              _buildFeatureScores(theme, healthData),
              const SizedBox(height: 16),
              // Risk Assessment
              _buildRiskAssessment(theme, healthData),
              const SizedBox(height: 12),
              // Confidence Indicators
              _buildConfidenceIndicators(theme, healthData),
            ],
          ),
        ),
      ),
    );
  }
  /// Enhanced RAG Insights Card
  static Widget buildRAGInsightsCard({
    required ThemeData theme,
    required Map<String, dynamic> ragData,
    VoidCallback? onTap,
  }) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.smart_toy, color: theme.primaryColor, size: 24),
                  const SizedBox(width: 8),
                  Text(
                    'RAG Knowledge Insights',
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const Spacer(),
                  Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey[600]),
                ],
              ),
              const SizedBox(height: 16),
              // RAG Statistics Row
              _buildRAGStatsRow(theme, ragData),
              const SizedBox(height: 16),
              // Knowledge Coverage
              _buildKnowledgeCoverage(theme, ragData),
              const SizedBox(height: 16),
              // Recent Queries
              _buildRecentQueries(theme, ragData),
              const SizedBox(height: 12),
              // Response Quality
              _buildResponseQualityIndicator(theme, ragData),
            ],
          ),
        ),
      ),
    );
  }
  /// Enhanced Community Analytics Card
  static Widget buildCommunityAnalyticsCard({
    required ThemeData theme,
    required Map<String, dynamic> communityData,
    VoidCallback? onTap,
  }) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.group, color: theme.primaryColor, size: 24),
                  const SizedBox(width: 8),
                  Text(
                    'Community Insights',
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const Spacer(),
                  Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey[600]),
                ],
              ),
              const SizedBox(height: 16),
              // Matching Score
              _buildMatchingScore(theme, communityData),
              const SizedBox(height: 16),
              // Interest Alignment
              _buildInterestAlignment(theme, communityData),
              const SizedBox(height: 16),
              // Community Influence
              _buildCommunityInfluence(theme, communityData),
            ],
          ),
        ),
      ),
    );
  }
  // Helper methods for building sub-components
  static Widget _buildHealthScoreDisplay(ThemeData theme, Map<String, dynamic> data) {
    final healthScore = data['overall_health_score'] ?? 0.85;
    final riskLevel = data['risk_level'] ?? 'low';
    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Overall Health Score',
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: Colors.grey[600],
                ),
              ),
              const SizedBox(height: 4),
              Row(
                children: [
                  Text(
                    '${(healthScore * 100).toInt()}%',
                    style: theme.textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: _getHealthColor(healthScore),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Icon(
                    _getHealthIcon(healthScore),
                    color: _getHealthColor(healthScore),
                    size: 20,
                  ),
                ],
              ),
            ],
          ),
        ),
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          decoration: BoxDecoration(
            color: _getRiskColor(riskLevel).withOpacity(0.1),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: _getRiskColor(riskLevel).withOpacity(0.3)),
          ),
          child: Text(
            '${riskLevel.toUpperCase()} RISK',
            style: theme.textTheme.bodySmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: _getRiskColor(riskLevel),
            ),
          ),
        ),
      ],
    );
  }
  static Widget _buildFeatureScores(ThemeData theme, Map<String, dynamic> data) {
    final features = data['feature_scores'] as Map<String, dynamic>? ?? {};
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Health Factors',
          style: theme.textTheme.bodyMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        ...features.entries.take(4).map((entry) {
          final score = entry.value as double? ?? 0.0;
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2),
            child: Row(
              children: [
                Expanded(
                  flex: 2,
                  child: Text(
                    _formatFeatureName(entry.key),
                    style: theme.textTheme.bodySmall,
                  ),
                ),
                Expanded(
                  flex: 3,
                  child: LinearProgressIndicator(
                    value: score,
                    backgroundColor: Colors.grey[200],
                    valueColor: AlwaysStoppedAnimation<Color>(
                      _getHealthColor(score),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                SizedBox(
                  width: 35,
                  child: Text(
                    '${(score * 100).toInt()}%',
                    style: theme.textTheme.bodySmall?.copyWith(
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
  static Widget _buildRiskAssessment(ThemeData theme, Map<String, dynamic> data) {
    final risks = data['risk_factors'] as List<dynamic>? ?? [];
    if (risks.isEmpty) {
      return Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.green.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.green.withOpacity(0.3)),
        ),
        child: Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green, size: 20),
            const SizedBox(width: 8),
            Text(
              'No risk factors detected',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: Colors.green[700],
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      );
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Risk Factors',
          style: theme.textTheme.bodyMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        ...risks.take(2).map((risk) {
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2),
            child: Row(
              children: [
                Icon(
                  Icons.warning,
                  color: Colors.orange,
                  size: 16,
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    risk.toString(),
                    style: theme.textTheme.bodySmall,
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
  static Widget _buildConfidenceIndicators(ThemeData theme, Map<String, dynamic> data) {
    final modelConfidence = data['model_confidence'] ?? 0.87;
    final dataQuality = data['data_quality_score'] ?? 0.92;
    return Row(
      children: [
        Expanded(
          child: _buildMiniMetric(theme, 'Confidence', '${(modelConfidence * 100).toInt()}%'),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: _buildMiniMetric(theme, 'Data Quality', '${(dataQuality * 100).toInt()}%'),
        ),
      ],
    );
  }
  static Widget _buildRAGStatsRow(ThemeData theme, Map<String, dynamic> data) {
    return Row(
      children: [
        Expanded(
          child: _buildMiniMetric(theme, 'Total Queries', '${data['total_queries'] ?? 0}'),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildMiniMetric(theme, 'Success Rate', '${data['success_rate'] ?? 0}%'),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildMiniMetric(theme, 'Avg Response', '${data['avg_response_time'] ?? 0}ms'),
        ),
      ],
    );
  }
  static Widget _buildKnowledgeCoverage(ThemeData theme, Map<String, dynamic> data) {
    final coverage = data['knowledge_coverage'] as Map<String, dynamic>? ?? {};
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Knowledge Coverage',
          style: theme.textTheme.bodyMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        ...coverage.entries.take(3).map((entry) {
          final percentage = entry.value as double? ?? 0.0;
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 2),
            child: Row(
              children: [
                Expanded(
                  flex: 2,
                  child: Text(
                    entry.key,
                    style: theme.textTheme.bodySmall,
                  ),
                ),
                Expanded(
                  flex: 3,
                  child: LinearProgressIndicator(
                    value: percentage / 100,
                    backgroundColor: Colors.grey[200],
                    valueColor: AlwaysStoppedAnimation<Color>(theme.primaryColor),
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  '${percentage.toInt()}%',
                  style: theme.textTheme.bodySmall?.copyWith(
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
  static Widget _buildRecentQueries(ThemeData theme, Map<String, dynamic> data) {
    final queries = data['recent_queries'] as List<dynamic>? ?? [];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Recent Query Topics',
          style: theme.textTheme.bodyMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 4,
          children: queries.take(4).map<Widget>((query) {
            return Chip(
              label: Text(
                query.toString(),
                style: theme.textTheme.bodySmall,
              ),
              backgroundColor: theme.primaryColor.withOpacity(0.1),
              side: BorderSide(color: theme.primaryColor.withOpacity(0.3)),
            );
          }).toList(),
        ),
      ],
    );
  }
  static Widget _buildResponseQualityIndicator(ThemeData theme, Map<String, dynamic> data) {
    final quality = data['response_quality'] ?? 0.94;
    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Response Quality',
                style: theme.textTheme.bodySmall?.copyWith(
                  color: Colors.grey[600],
                ),
              ),
              const SizedBox(height: 4),
              Row(
                children: [
                  ...List.generate(5, (index) {
                    return Icon(
                      index < (quality * 5).round() ? Icons.star : Icons.star_border,
                      color: Colors.amber,
                      size: 16,
                    );
                  }),
                  const SizedBox(width: 8),
                  Text(
                    '${(quality * 100).toInt()}%',
                    style: theme.textTheme.bodySmall?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }
  static Widget _buildMatchingScore(ThemeData theme, Map<String, dynamic> data) {
    final score = data['avg_similarity_score'] ?? 0.76;
    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Community Matching Score',
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: Colors.grey[600],
                ),
              ),
              const SizedBox(height: 4),
              Text(
                '${(score * 100).toInt()}%',
                style: theme.textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: theme.primaryColor,
                ),
              ),
            ],
          ),
        ),
        CircularProgressIndicator(
          value: score,
          backgroundColor: Colors.grey[200],
          valueColor: AlwaysStoppedAnimation<Color>(theme.primaryColor),
        ),
      ],
    );
  }
  static Widget _buildInterestAlignment(ThemeData theme, Map<String, dynamic> data) {
    final interests = data['top_interests'] as List<dynamic>? ?? [];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Top Shared Interests',
          style: theme.textTheme.bodyMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 4,
          children: interests.take(3).map<Widget>((interest) {
            final interestData = interest as Map<String, dynamic>;
            return Chip(
              label: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    interestData['interest'] ?? '',
                    style: theme.textTheme.bodySmall,
                  ),
                  const SizedBox(width: 4),
                  Text(
                    '${interestData['percentage'] ?? 0}%',
                    style: theme.textTheme.bodySmall?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              backgroundColor: theme.primaryColor.withOpacity(0.1),
              side: BorderSide(color: theme.primaryColor.withOpacity(0.3)),
            );
          }).toList(),
        ),
      ],
    );
  }
  static Widget _buildCommunityInfluence(ThemeData theme, Map<String, dynamic> data) {
    final influence = data['influence_score'] ?? 0.0;
    return Row(
      children: [
        Expanded(
          child: _buildMiniMetric(theme, 'Influence Score', influence.toStringAsFixed(1)),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: _buildMiniMetric(theme, 'Similar Users', '${data['total_matches'] ?? 0}'),
        ),
      ],
    );
  }
  static Widget _buildMiniMetric(ThemeData theme, String label, String value) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[200]!),
      ),
      child: Column(
        children: [
          Text(
            value,
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: theme.primaryColor,
            ),
          ),
          const SizedBox(height: 2),
          Text(
            label,
            style: theme.textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  // Helper functions
  static Color _getHealthColor(double score) {
    if (score >= 0.8) return Colors.green;
    if (score >= 0.6) return Colors.orange;
    return Colors.red;
  }
  static IconData _getHealthIcon(double score) {
    if (score >= 0.8) return Icons.health_and_safety;
    if (score >= 0.6) return Icons.warning;
    return Icons.error;
  }
  static Color _getRiskColor(String riskLevel) {
    switch (riskLevel.toLowerCase()) {
      case 'low':
        return Colors.green;
      case 'medium':
        return Colors.orange;
      case 'high':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }
  static String _formatFeatureName(String key) {
    return key.split('_').map((word) => 
      word[0].toUpperCase() + word.substring(1)
    ).join(' ');
  }
}
</file>

<file path="lib/core/widgets/custom_button.dart">
/// Reusable custom button widgets for consistent styling across the app
/// Provides various button styles with loading states and customization options
library;
import 'package:flutter/material.dart';
import 'loading_widget.dart';
/// Primary custom button with loading state support
class CustomButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final bool isLoading;
  final bool isEnabled;
  final IconData? icon;
  final Color? backgroundColor;
  final Color? textColor;
  final double? width;
  final double height;
  final EdgeInsets? padding;
  final BorderRadius? borderRadius;
  const CustomButton({
    super.key,
    required this.text,
    this.onPressed,
    this.isLoading = false,
    this.isEnabled = true,
    this.icon,
    this.backgroundColor,
    this.textColor,
    this.width,
    this.height = 48,
    this.padding,
    this.borderRadius,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDisabled = !isEnabled || isLoading || onPressed == null;
    return SizedBox(
      width: width,
      height: height,
      child: ElevatedButton(
        onPressed: isDisabled ? null : onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor ?? theme.primaryColor,
          foregroundColor: textColor ?? Colors.white,
          disabledBackgroundColor: theme.disabledColor,
          disabledForegroundColor: theme.colorScheme.onSurface.withOpacity(
            0.38,
          ),
          padding:
              padding ??
              const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: borderRadius ?? BorderRadius.circular(8),
          ),
          elevation: isDisabled ? 0 : 2,
        ),
        child: isLoading
            ? const SmallLoadingWidget(color: Colors.white)
            : Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  if (icon != null) ...[
                    Icon(icon, size: 18),
                    const SizedBox(width: 8),
                  ],
                  Text(
                    text,
                    style: theme.textTheme.labelLarge?.copyWith(
                      color: textColor ?? Colors.white,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
      ),
    );
  }
}
/// Secondary/outline button variant
class CustomOutlineButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final bool isLoading;
  final bool isEnabled;
  final IconData? icon;
  final Color? borderColor;
  final Color? textColor;
  final double? width;
  final double height;
  final EdgeInsets? padding;
  final BorderRadius? borderRadius;
  const CustomOutlineButton({
    super.key,
    required this.text,
    this.onPressed,
    this.isLoading = false,
    this.isEnabled = true,
    this.icon,
    this.borderColor,
    this.textColor,
    this.width,
    this.height = 48,
    this.padding,
    this.borderRadius,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDisabled = !isEnabled || isLoading || onPressed == null;
    final effectiveBorderColor = borderColor ?? theme.primaryColor;
    final effectiveTextColor = textColor ?? theme.primaryColor;
    return SizedBox(
      width: width,
      height: height,
      child: OutlinedButton(
        onPressed: isDisabled ? null : onPressed,
        style: OutlinedButton.styleFrom(
          foregroundColor: effectiveTextColor,
          disabledForegroundColor: theme.disabledColor,
          padding:
              padding ??
              const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          side: BorderSide(
            color: isDisabled ? theme.disabledColor : effectiveBorderColor,
            width: 1.5,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: borderRadius ?? BorderRadius.circular(8),
          ),
        ),
        child: isLoading
            ? SmallLoadingWidget(color: effectiveTextColor)
            : Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  if (icon != null) ...[
                    Icon(icon, size: 18),
                    const SizedBox(width: 8),
                  ],
                  Text(
                    text,
                    style: theme.textTheme.labelLarge?.copyWith(
                      color: effectiveTextColor,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
      ),
    );
  }
}
/// Text button variant
class CustomTextButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final bool isLoading;
  final bool isEnabled;
  final IconData? icon;
  final Color? textColor;
  final EdgeInsets? padding;
  const CustomTextButton({
    super.key,
    required this.text,
    this.onPressed,
    this.isLoading = false,
    this.isEnabled = true,
    this.icon,
    this.textColor,
    this.padding,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDisabled = !isEnabled || isLoading || onPressed == null;
    final effectiveTextColor = textColor ?? theme.primaryColor;
    return TextButton(
      onPressed: isDisabled ? null : onPressed,
      style: TextButton.styleFrom(
        foregroundColor: effectiveTextColor,
        disabledForegroundColor: theme.disabledColor,
        padding:
            padding ?? const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      ),
      child: isLoading
          ? SmallLoadingWidget(color: effectiveTextColor)
          : Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                if (icon != null) ...[
                  Icon(icon, size: 18),
                  const SizedBox(width: 8),
                ],
                Text(
                  text,
                  style: theme.textTheme.labelLarge?.copyWith(
                    color: effectiveTextColor,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
    );
  }
}
/// Floating action button variant
class CustomFloatingActionButton extends StatelessWidget {
  final VoidCallback? onPressed;
  final IconData icon;
  final bool isLoading;
  final Color? backgroundColor;
  final Color? iconColor;
  final double? size;
  const CustomFloatingActionButton({
    super.key,
    this.onPressed,
    required this.icon,
    this.isLoading = false,
    this.backgroundColor,
    this.iconColor,
    this.size,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return FloatingActionButton(
      onPressed: isLoading ? null : onPressed,
      backgroundColor: backgroundColor ?? theme.primaryColor,
      child: isLoading
          ? const SmallLoadingWidget(color: Colors.white)
          : Icon(icon, color: iconColor ?? Colors.white, size: size ?? 24),
    );
  }
}
</file>

<file path="lib/core/widgets/custom_search_bar.dart">
import 'package:flutter/material.dart';
class CustomSearchBar extends StatefulWidget {
  final TextEditingController? controller;
  final String? hintText;
  final Function(String)? onChanged;
  final Function(String)? onSubmitted;
  final VoidCallback? onClear;
  final Widget? prefixIcon;
  final Widget? suffixIcon;
  final bool enabled;
  final bool autofocus;
  final TextInputAction textInputAction;
  const CustomSearchBar({
    super.key,
    this.controller,
    this.hintText,
    this.onChanged,
    this.onSubmitted,
    this.onClear,
    this.prefixIcon,
    this.suffixIcon,
    this.enabled = true,
    this.autofocus = false,
    this.textInputAction = TextInputAction.search,
  });
  @override
  State<CustomSearchBar> createState() => _CustomSearchBarState();
}
class _CustomSearchBarState extends State<CustomSearchBar> {
  late TextEditingController _controller;
  bool _showClearButton = false;
  @override
  void initState() {
    super.initState();
    _controller = widget.controller ?? TextEditingController();
    _controller.addListener(_onTextChanged);
    _showClearButton = _controller.text.isNotEmpty;
  }
  @override
  void dispose() {
    if (widget.controller == null) {
      _controller.dispose();
    } else {
      _controller.removeListener(_onTextChanged);
    }
    super.dispose();
  }
  void _onTextChanged() {
    final hasText = _controller.text.isNotEmpty;
    if (_showClearButton != hasText) {
      setState(() {
        _showClearButton = hasText;
      });
    }
    widget.onChanged?.call(_controller.text);
  }
  void _onClear() {
    _controller.clear();
    widget.onClear?.call();
    widget.onChanged?.call('');
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: Colors.grey[300]!,
          width: 1,
        ),
      ),
      child: TextField(
        controller: _controller,
        enabled: widget.enabled,
        autofocus: widget.autofocus,
        textInputAction: widget.textInputAction,
        onSubmitted: widget.onSubmitted,
        decoration: InputDecoration(
          hintText: widget.hintText ?? 'Search...',
          hintStyle: TextStyle(
            color: Colors.grey[500],
            fontSize: 16,
          ),
          prefixIcon: widget.prefixIcon ??
              Icon(
                Icons.search,
                color: Colors.grey[500],
                size: 20,
              ),
          suffixIcon: _buildSuffixIcon(),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
        ),
        style: const TextStyle(
          fontSize: 16,
        ),
      ),
    );
  }
  Widget? _buildSuffixIcon() {
    if (widget.suffixIcon != null) {
      return widget.suffixIcon;
    }
    if (_showClearButton) {
      return IconButton(
        onPressed: _onClear,
        icon: Icon(
          Icons.clear,
          color: Colors.grey[500],
          size: 20,
        ),
        constraints: const BoxConstraints(
          minWidth: 32,
          minHeight: 32,
        ),
        padding: EdgeInsets.zero,
      );
    }
    return null;
  }
}
</file>

<file path="lib/core/widgets/custom_text_field.dart">
/**
 * Reusable custom text field widgets for consistent form styling across the app
 * Provides various input types with validation and customization options
 */
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
/**
 * Primary custom text field with validation support
 */
class CustomTextField extends StatefulWidget {
  final String? label;
  final String? hint;
  final String? initialValue;
  final TextEditingController? controller;
  final String? Function(String?)? validator;
  final void Function(String)? onChanged;
  final void Function(String)? onSubmitted;
  final VoidCallback? onTap;
  final TextInputType? keyboardType;
  final TextInputAction? textInputAction;
  final bool obscureText;
  final bool readOnly;
  final bool enabled;
  final int? maxLines;
  final int? minLines;
  final int? maxLength;
  final Widget? prefixIcon;
  final Widget? suffixIcon;
  final String? prefixText;
  final String? suffixText;
  final List<TextInputFormatter>? inputFormatters;
  final FocusNode? focusNode;
  final EdgeInsets? contentPadding;
  final TextStyle? textStyle;
  final TextStyle? labelStyle;
  final TextStyle? hintStyle;
  final Color? fillColor;
  final Color? borderColor;
  final double? borderRadius;
  final bool filled;
  const CustomTextField({
    super.key,
    this.label,
    this.hint,
    this.initialValue,
    this.controller,
    this.validator,
    this.onChanged,
    this.onSubmitted,
    this.onTap,
    this.keyboardType,
    this.textInputAction,
    this.obscureText = false,
    this.readOnly = false,
    this.enabled = true,
    this.maxLines = 1,
    this.minLines,
    this.maxLength,
    this.prefixIcon,
    this.suffixIcon,
    this.prefixText,
    this.suffixText,
    this.inputFormatters,
    this.focusNode,
    this.contentPadding,
    this.textStyle,
    this.labelStyle,
    this.hintStyle,
    this.fillColor,
    this.borderColor,
    this.borderRadius,
    this.filled = true,
  });
  @override
  State<CustomTextField> createState() => _CustomTextFieldState();
}
class _CustomTextFieldState extends State<CustomTextField> {
  late TextEditingController _controller;
  bool _obscureText = false;
  @override
  void initState() {
    super.initState();
    _controller =
        widget.controller ?? TextEditingController(text: widget.initialValue);
    _obscureText = widget.obscureText;
  }
  @override
  void dispose() {
    if (widget.controller == null) {
      _controller.dispose();
    }
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    return TextFormField(
      controller: _controller,
      validator: widget.validator,
      onChanged: widget.onChanged,
      onFieldSubmitted: widget.onSubmitted,
      onTap: widget.onTap,
      keyboardType: widget.keyboardType,
      textInputAction: widget.textInputAction,
      obscureText: _obscureText,
      readOnly: widget.readOnly,
      enabled: widget.enabled,
      maxLines: widget.obscureText ? 1 : widget.maxLines,
      minLines: widget.minLines,
      maxLength: widget.maxLength,
      inputFormatters: widget.inputFormatters,
      focusNode: widget.focusNode,
      style: widget.textStyle ?? theme.textTheme.bodyLarge,
      decoration: InputDecoration(
        labelText: widget.label,
        hintText: widget.hint,
        prefixIcon: widget.prefixIcon,
        suffixIcon: widget.obscureText
            ? IconButton(
                icon: Icon(
                  _obscureText ? Icons.visibility : Icons.visibility_off,
                  color: colorScheme.onSurfaceVariant,
                ),
                onPressed: () {
                  setState(() {
                    _obscureText = !_obscureText;
                  });
                },
              )
            : widget.suffixIcon,
        prefixText: widget.prefixText,
        suffixText: widget.suffixText,
        contentPadding:
            widget.contentPadding ??
            const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        filled: widget.filled,
        fillColor:
            widget.fillColor ?? colorScheme.surfaceVariant.withOpacity(0.3),
        labelStyle:
            widget.labelStyle ??
            theme.textTheme.bodyMedium?.copyWith(
              color: colorScheme.onSurfaceVariant,
            ),
        hintStyle:
            widget.hintStyle ??
            theme.textTheme.bodyMedium?.copyWith(
              color: colorScheme.onSurfaceVariant.withOpacity(0.6),
            ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(widget.borderRadius ?? 8),
          borderSide: BorderSide(
            color: widget.borderColor ?? colorScheme.outline,
          ),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(widget.borderRadius ?? 8),
          borderSide: BorderSide(
            color: widget.borderColor ?? colorScheme.outline.withOpacity(0.5),
          ),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(widget.borderRadius ?? 8),
          borderSide: BorderSide(
            color: widget.borderColor ?? colorScheme.primary,
            width: 2,
          ),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(widget.borderRadius ?? 8),
          borderSide: BorderSide(color: colorScheme.error),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(widget.borderRadius ?? 8),
          borderSide: BorderSide(color: colorScheme.error, width: 2),
        ),
        disabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(widget.borderRadius ?? 8),
          borderSide: BorderSide(color: colorScheme.outline.withOpacity(0.3)),
        ),
      ),
    );
  }
}
/**
 * Search text field variant
 */
class SearchTextField extends StatelessWidget {
  final String? hint;
  final TextEditingController? controller;
  final void Function(String)? onChanged;
  final void Function(String)? onSubmitted;
  final VoidCallback? onClear;
  final bool showClearButton;
  final EdgeInsets? margin;
  const SearchTextField({
    super.key,
    this.hint,
    this.controller,
    this.onChanged,
    this.onSubmitted,
    this.onClear,
    this.showClearButton = true,
    this.margin,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    return Container(
      margin: margin,
      child: CustomTextField(
        hint: hint ?? 'Search...',
        controller: controller,
        onChanged: onChanged,
        onSubmitted: onSubmitted,
        keyboardType: TextInputType.text,
        textInputAction: TextInputAction.search,
        prefixIcon: Icon(Icons.search, color: colorScheme.onSurfaceVariant),
        suffixIcon: showClearButton && controller?.text.isNotEmpty == true
            ? IconButton(
                icon: Icon(Icons.clear, color: colorScheme.onSurfaceVariant),
                onPressed: () {
                  controller?.clear();
                  onClear?.call();
                },
              )
            : null,
        borderRadius: 24,
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 20,
          vertical: 12,
        ),
      ),
    );
  }
}
/**
 * Multiline text field for longer content
 */
class MultilineTextField extends StatelessWidget {
  final String? label;
  final String? hint;
  final TextEditingController? controller;
  final String? Function(String?)? validator;
  final void Function(String)? onChanged;
  final int maxLines;
  final int? maxLength;
  final bool enabled;
  const MultilineTextField({
    super.key,
    this.label,
    this.hint,
    this.controller,
    this.validator,
    this.onChanged,
    this.maxLines = 5,
    this.maxLength,
    this.enabled = true,
  });
  @override
  Widget build(BuildContext context) {
    return CustomTextField(
      label: label,
      hint: hint,
      controller: controller,
      validator: validator,
      onChanged: onChanged,
      maxLines: maxLines,
      minLines: 3,
      maxLength: maxLength,
      enabled: enabled,
      keyboardType: TextInputType.multiline,
      textInputAction: TextInputAction.newline,
      contentPadding: const EdgeInsets.all(16),
    );
  }
}
</file>

<file path="lib/core/widgets/error_widget.dart">
/// Reusable error widget for consistent error states across the app
/// Provides customizable error displays with retry functionality
library;
import 'package:flutter/material.dart';
/// Standard error widget with icon, message, and optional retry button
class CustomErrorWidget extends StatelessWidget {
  final String message;
  final String? title;
  final IconData? icon;
  final VoidCallback? onRetry;
  final String? retryText;
  const CustomErrorWidget({
    super.key,
    required this.message,
    this.title,
    this.icon,
    this.onRetry,
    this.retryText,
  });
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon ?? Icons.error_outline,
              size: 64,
              color: Theme.of(context).colorScheme.error,
            ),
            const SizedBox(height: 16),
            if (title != null) ...[
              Text(
                title!,
                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  color: Theme.of(context).colorScheme.error,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
            ],
            Text(
              message,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Theme.of(
                  context,
                ).textTheme.bodyMedium?.color?.withOpacity(0.7),
              ),
              textAlign: TextAlign.center,
            ),
            if (onRetry != null) ...[
              const SizedBox(height: 24),
              ElevatedButton.icon(
                onPressed: onRetry,
                icon: const Icon(Icons.refresh),
                label: Text(retryText ?? 'Retry'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Theme.of(context).primaryColor,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
/// Compact error widget for inline error states
class InlineErrorWidget extends StatelessWidget {
  final String message;
  final VoidCallback? onRetry;
  final EdgeInsets? padding;
  const InlineErrorWidget({
    super.key,
    required this.message,
    this.onRetry,
    this.padding,
  });
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: padding ?? const EdgeInsets.all(16),
      child: Row(
        children: [
          Icon(
            Icons.error_outline,
            color: Theme.of(context).colorScheme.error,
            size: 20,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              message,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Theme.of(context).colorScheme.error,
              ),
            ),
          ),
          if (onRetry != null) ...[
            const SizedBox(width: 8),
            TextButton(onPressed: onRetry, child: const Text('Retry')),
          ],
        ],
      ),
    );
  }
}
/// Network error widget with specific messaging
class NetworkErrorWidget extends StatelessWidget {
  final VoidCallback? onRetry;
  const NetworkErrorWidget({super.key, this.onRetry});
  @override
  Widget build(BuildContext context) {
    return CustomErrorWidget(
      title: 'Connection Error',
      message: 'Please check your internet connection and try again.',
      icon: Icons.wifi_off,
      onRetry: onRetry,
      retryText: 'Try Again',
    );
  }
}
/// Empty state widget for when no data is available
class EmptyStateWidget extends StatelessWidget {
  final String message;
  final String? title;
  final IconData? icon;
  final Widget? action;
  const EmptyStateWidget({
    super.key,
    required this.message,
    this.title,
    this.icon,
    this.action,
  });
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon ?? Icons.inbox_outlined,
              size: 64,
              color: Theme.of(
                context,
              ).textTheme.bodyMedium?.color?.withOpacity(0.5),
            ),
            const SizedBox(height: 16),
            if (title != null) ...[
              Text(
                title!,
                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  color: Theme.of(
                    context,
                  ).textTheme.bodyMedium?.color?.withOpacity(0.7),
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
            ],
            Text(
              message,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Theme.of(
                  context,
                ).textTheme.bodyMedium?.color?.withOpacity(0.5),
              ),
              textAlign: TextAlign.center,
            ),
            if (action != null) ...[const SizedBox(height: 24), action!],
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/core/widgets/loading_widget.dart">
/**
 * Reusable loading widget for consistent loading states across the app
 * Provides customizable loading indicators with optional text
 */
import 'package:flutter/material.dart';
/**
 * Standard loading widget with circular progress indicator
 */
class LoadingWidget extends StatelessWidget {
  final String? message;
  final double? size;
  final Color? color;
  const LoadingWidget({
    super.key,
    this.message,
    this.size,
    this.color,
  });
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: size ?? 40,
            height: size ?? 40,
            child: CircularProgressIndicator(
              color: color ?? Theme.of(context).primaryColor,
              strokeWidth: 3,
            ),
          ),
          if (message != null) ...[
            const SizedBox(height: 16),
            Text(
              message!,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: Theme.of(context)
                        .textTheme
                        .bodyMedium
                        ?.color
                        ?.withValues(alpha: 0.7),
                  ),
              textAlign: TextAlign.center,
            ),
          ],
        ],
      ),
    );
  }
}
/**
 * Small inline loading widget for buttons or small spaces
 */
class SmallLoadingWidget extends StatelessWidget {
  final Color? color;
  final double size;
  const SmallLoadingWidget({
    super.key,
    this.color,
    this.size = 16,
  });
  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: size,
      height: size,
      child: CircularProgressIndicator(
        color: color ?? Colors.white,
        strokeWidth: 2,
      ),
    );
  }
}
/**
 * Shimmer loading effect for content placeholders
 */
class ShimmerLoading extends StatefulWidget {
  final Widget child;
  final bool isLoading;
  const ShimmerLoading({
    super.key,
    required this.child,
    required this.isLoading,
  });
  @override
  State<ShimmerLoading> createState() => _ShimmerLoadingState();
}
class _ShimmerLoadingState extends State<ShimmerLoading>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
    _animation = Tween<double>(begin: -1.0, end: 2.0).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
    );
    if (widget.isLoading) {
      _controller.repeat();
    }
  }
  @override
  void didUpdateWidget(ShimmerLoading oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.isLoading && !_controller.isAnimating) {
      _controller.repeat();
    } else if (!widget.isLoading && _controller.isAnimating) {
      _controller.stop();
    }
  }
  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    if (!widget.isLoading) {
      return widget.child;
    }
    return AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        return ShaderMask(
          shaderCallback: (bounds) {
            return LinearGradient(
              begin: Alignment.centerLeft,
              end: Alignment.centerRight,
              colors: const [
                Colors.transparent,
                Colors.white54,
                Colors.transparent,
              ],
              stops: [
                _animation.value - 0.3,
                _animation.value,
                _animation.value + 0.3,
              ],
            ).createShader(bounds);
          },
          child: widget.child,
        );
      },
    );
  }
}
</file>

<file path="lib/core/widgets/user_avatar.dart">
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
class UserAvatar extends StatelessWidget {
  final String? imageUrl;
  final String username;
  final double size;
  final VoidCallback? onTap;
  final bool showOnlineIndicator;
  final bool isOnline;
  final Color? backgroundColor;
  final Color? textColor;
  final Widget? badge;
  const UserAvatar({
    super.key,
    this.imageUrl,
    required this.username,
    this.size = 40,
    this.onTap,
    this.showOnlineIndicator = false,
    this.isOnline = false,
    this.backgroundColor,
    this.textColor,
    this.badge,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    Widget avatar = Container(
      width: size,
      height: size,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: backgroundColor ?? _getBackgroundColor(username),
        border: Border.all(
          color: Colors.white,
          width: 2,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ClipOval(
        child: _buildAvatarContent(theme),
      ),
    );
    // Add online indicator if needed
    if (showOnlineIndicator) {
      avatar = Stack(
        children: [
          avatar,
          Positioned(
            right: 0,
            bottom: 0,
            child: Container(
              width: size * 0.25,
              height: size * 0.25,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: isOnline ? Colors.green : Colors.grey,
                border: Border.all(
                  color: Colors.white,
                  width: 2,
                ),
              ),
            ),
          ),
        ],
      );
    }
    // Add badge if provided
    if (badge != null) {
      avatar = Stack(
        children: [
          avatar,
          Positioned(
            right: -2,
            top: -2,
            child: badge!,
          ),
        ],
      );
    }
    // Make tappable if onTap is provided
    if (onTap != null) {
      avatar = GestureDetector(
        onTap: onTap,
        child: avatar,
      );
    }
    return avatar;
  }
  Widget _buildAvatarContent(ThemeData theme) {
    if (imageUrl != null && imageUrl!.isNotEmpty) {
      return Image.network(
        imageUrl!,
        width: size,
        height: size,
        fit: BoxFit.cover,
        errorBuilder: (context, error, stackTrace) {
          return _buildInitialsAvatar(theme);
        },
        loadingBuilder: (context, child, loadingProgress) {
          if (loadingProgress == null) return child;
          return Container(
            width: size,
            height: size,
            color: Colors.grey[200],
            child: Center(
              child: SizedBox(
                width: size * 0.4,
                height: size * 0.4,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(
                    theme.primaryColor,
                  ),
                ),
              ),
            ),
          );
        },
      );
    }
    return _buildInitialsAvatar(theme);
  }
  Widget _buildInitialsAvatar(ThemeData theme) {
    final initials = _getInitials(username);
    final fontSize = size * 0.4;
    return Container(
      width: size,
      height: size,
      color: backgroundColor ?? _getBackgroundColor(username),
      child: Center(
        child: Text(
          initials,
          style: TextStyle(
            color: textColor ?? Colors.white,
            fontSize: fontSize,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
  String _getInitials(String name) {
    if (name.isEmpty) return '?';
    final words = name.trim().split(' ');
    if (words.length == 1) {
      return words[0].substring(0, 1).toUpperCase();
    }
    return (words[0].substring(0, 1) + words[1].substring(0, 1)).toUpperCase();
  }
  Color _getBackgroundColor(String name) {
    // Generate a consistent color based on the username
    final colors = [
      Colors.red[400]!,
      Colors.pink[400]!,
      Colors.purple[400]!,
      Colors.deepPurple[400]!,
      Colors.indigo[400]!,
      Colors.blue[400]!,
      Colors.lightBlue[400]!,
      Colors.cyan[400]!,
      Colors.teal[400]!,
      Colors.green[400]!,
      Colors.lightGreen[400]!,
      Colors.lime[400]!,
      Colors.yellow[400]!,
      Colors.amber[400]!,
      Colors.orange[400]!,
      Colors.deepOrange[400]!,
    ];
    final hash = name.hashCode;
    return colors[hash.abs() % colors.length];
  }
}
// Helper widget for creating avatar groups
class AvatarGroup extends StatelessWidget {
  final List<String> usernames;
  final List<String?> imageUrls;
  final double size;
  final int maxVisible;
  final VoidCallback? onTap;
  const AvatarGroup({
    super.key,
    required this.usernames,
    this.imageUrls = const [],
    this.size = 32,
    this.maxVisible = 3,
    this.onTap,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final visibleCount = usernames.length > maxVisible ? maxVisible : usernames.length;
    final remainingCount = usernames.length - maxVisible;
    return GestureDetector(
      onTap: onTap,
      child: SizedBox(
        width: size + (visibleCount - 1) * (size * 0.7),
        height: size,
        child: Stack(
          children: [
            // Visible avatars
            ...List.generate(visibleCount, (index) {
              final username = usernames[index];
              final imageUrl = index < imageUrls.length ? imageUrls[index] : null;
              return Positioned(
                left: index * (size * 0.7),
                child: UserAvatar(
                  username: username,
                  imageUrl: imageUrl,
                  size: size,
                ),
              );
            }),
            // Remaining count indicator
            if (remainingCount > 0)
              Positioned(
                left: visibleCount * (size * 0.7),
                child: Container(
                  width: size,
                  height: size,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: Colors.grey[600],
                    border: Border.all(
                      color: Colors.white,
                      width: 2,
                    ),
                  ),
                  child: Center(
                    child: Text(
                      '+$remainingCount',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: size * 0.3,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/core/widgets/vote_buttons.dart">
import 'package:flutter/material.dart';
enum VoteButtonSize {
  small,
  medium,
  large,
}
class VoteButtons extends StatelessWidget {
  final int upvotes;
  final int downvotes;
  final String? userVote; // 'upvote', 'downvote', or null
  final Function(String)? onVote;
  final VoteButtonSize size;
  final bool showDownvote;
  final bool horizontal;
  const VoteButtons({
    super.key,
    required this.upvotes,
    required this.downvotes,
    this.userVote,
    this.onVote,
    this.size = VoteButtonSize.medium,
    this.showDownvote = true,
    this.horizontal = true,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final dimensions = _getDimensions();
    final upvoteButton = _buildVoteButton(
      icon: Icons.keyboard_arrow_up,
      isSelected: userVote == 'upvote',
      onPressed: () => onVote?.call('upvote'),
      color: Colors.green,
      dimensions: dimensions,
    );
    final scoreText = Text(
      '${upvotes - downvotes}',
      style: TextStyle(
        fontSize: dimensions.fontSize,
        fontWeight: FontWeight.bold,
        color: _getScoreColor(theme),
      ),
    );
    final downvoteButton = showDownvote
        ? _buildVoteButton(
            icon: Icons.keyboard_arrow_down,
            isSelected: userVote == 'downvote',
            onPressed: () => onVote?.call('downvote'),
            color: Colors.red,
            dimensions: dimensions,
          )
        : null;
    if (horizontal) {
      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          upvoteButton,
          SizedBox(width: dimensions.spacing),
          scoreText,
          if (downvoteButton != null) ...[
            SizedBox(width: dimensions.spacing),
            downvoteButton,
          ],
        ],
      );
    } else {
      return Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          upvoteButton,
          SizedBox(height: dimensions.spacing),
          scoreText,
          if (downvoteButton != null) ...[
            SizedBox(height: dimensions.spacing),
            downvoteButton,
          ],
        ],
      );
    }
  }
  Widget _buildVoteButton({
    required IconData icon,
    required bool isSelected,
    required VoidCallback? onPressed,
    required Color color,
    required _VoteDimensions dimensions,
  }) {
    return InkWell(
      onTap: onPressed,
      borderRadius: BorderRadius.circular(dimensions.borderRadius),
      child: Container(
        width: dimensions.buttonSize,
        height: dimensions.buttonSize,
        decoration: BoxDecoration(
          color: isSelected ? color.withOpacity(0.1) : Colors.transparent,
          borderRadius: BorderRadius.circular(dimensions.borderRadius),
          border: Border.all(
            color: isSelected ? color : Colors.grey[300]!,
            width: 1,
          ),
        ),
        child: Icon(
          icon,
          size: dimensions.iconSize,
          color: isSelected ? color : Colors.grey[600],
        ),
      ),
    );
  }
  Color _getScoreColor(ThemeData theme) {
    final score = upvotes - downvotes;
    if (score > 0) {
      return Colors.green[600]!;
    } else if (score < 0) {
      return Colors.red[600]!;
    } else {
      return Colors.grey[600]!;
    }
  }
  _VoteDimensions _getDimensions() {
    switch (size) {
      case VoteButtonSize.small:
        return _VoteDimensions(
          buttonSize: 28,
          iconSize: 16,
          fontSize: 12,
          spacing: 4,
          borderRadius: 6,
        );
      case VoteButtonSize.medium:
        return _VoteDimensions(
          buttonSize: 36,
          iconSize: 20,
          fontSize: 14,
          spacing: 6,
          borderRadius: 8,
        );
      case VoteButtonSize.large:
        return _VoteDimensions(
          buttonSize: 44,
          iconSize: 24,
          fontSize: 16,
          spacing: 8,
          borderRadius: 10,
        );
    }
  }
}
class _VoteDimensions {
  final double buttonSize;
  final double iconSize;
  final double fontSize;
  final double spacing;
  final double borderRadius;
  const _VoteDimensions({
    required this.buttonSize,
    required this.iconSize,
    required this.fontSize,
    required this.spacing,
    required this.borderRadius,
  });
}
// Simple vote counter widget without buttons
class VoteCounter extends StatelessWidget {
  final int upvotes;
  final int downvotes;
  final VoteButtonSize size;
  final bool showIndividualCounts;
  const VoteCounter({
    super.key,
    required this.upvotes,
    required this.downvotes,
    this.size = VoteButtonSize.medium,
    this.showIndividualCounts = false,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final score = upvotes - downvotes;
    final fontSize = _getFontSize();
    if (showIndividualCounts) {
      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.keyboard_arrow_up,
            size: fontSize + 2,
            color: Colors.green[600],
          ),
          Text(
            '$upvotes',
            style: TextStyle(
              fontSize: fontSize,
              color: Colors.green[600],
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(width: 8),
          Icon(
            Icons.keyboard_arrow_down,
            size: fontSize + 2,
            color: Colors.red[600],
          ),
          Text(
            '$downvotes',
            style: TextStyle(
              fontSize: fontSize,
              color: Colors.red[600],
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      );
    }
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(
          score >= 0 ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
          size: fontSize + 2,
          color: score >= 0 ? Colors.green[600] : Colors.red[600],
        ),
        Text(
          score.abs().toString(),
          style: TextStyle(
            fontSize: fontSize,
            color: score >= 0 ? Colors.green[600] : Colors.red[600],
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }
  double _getFontSize() {
    switch (size) {
      case VoteButtonSize.small:
        return 12;
      case VoteButtonSize.medium:
        return 14;
      case VoteButtonSize.large:
        return 16;
    }
  }
}
</file>

<file path="lib/features/auth/models/auth_models.dart">
import 'package:json_annotation/json_annotation.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:plant_social/core/models/user.dart';
part 'auth_models.freezed.dart';
part 'auth_models.g.dart';
@freezed
class LoginRequest with _$LoginRequest {
  const factory LoginRequest({
    required String email,
    required String password,
  }) = _LoginRequest;
  factory LoginRequest.fromJson(Map<String, dynamic> json) => _$LoginRequestFromJson(json);
}
@freezed
class RegisterRequest with _$RegisterRequest {
  const factory RegisterRequest({
    required String email,
    required String username,
    required String password,
    required String confirmPassword,
    String? displayName,
    String? inviteCode,
  }) = _RegisterRequest;
  factory RegisterRequest.fromJson(Map<String, dynamic> json) => _$RegisterRequestFromJson(json);
}
@freezed
class AuthResponse with _$AuthResponse {
  const factory AuthResponse({
    required String accessToken,
    required String refreshToken,
    required User user,
    String? tokenType,
    int? expiresIn,
  }) = _AuthResponse;
  factory AuthResponse.fromJson(Map<String, dynamic> json) => _$AuthResponseFromJson(json);
}
@freezed
class RefreshTokenRequest with _$RefreshTokenRequest {
  const factory RefreshTokenRequest({
    required String refreshToken,
  }) = _RefreshTokenRequest;
  factory RefreshTokenRequest.fromJson(Map<String, dynamic> json) => _$RefreshTokenRequestFromJson(json);
}
@freezed
class ForgotPasswordRequest with _$ForgotPasswordRequest {
  const factory ForgotPasswordRequest({
    required String email,
  }) = _ForgotPasswordRequest;
  factory ForgotPasswordRequest.fromJson(Map<String, dynamic> json) => _$ForgotPasswordRequestFromJson(json);
}
@freezed
class ResetPasswordRequest with _$ResetPasswordRequest {
  const factory ResetPasswordRequest({
    required String token,
    required String newPassword,
    required String confirmPassword,
  }) = _ResetPasswordRequest;
  factory ResetPasswordRequest.fromJson(Map<String, dynamic> json) => _$ResetPasswordRequestFromJson(json);
}
@freezed
class ChangePasswordRequest with _$ChangePasswordRequest {
  const factory ChangePasswordRequest({
    required String currentPassword,
    required String newPassword,
    required String confirmPassword,
  }) = _ChangePasswordRequest;
  factory ChangePasswordRequest.fromJson(Map<String, dynamic> json) => _$ChangePasswordRequestFromJson(json);
}
@freezed
class MessageResponse with _$MessageResponse {
  const factory MessageResponse({
    required String message,
    bool? success,
  }) = _MessageResponse;
  factory MessageResponse.fromJson(Map<String, dynamic> json) => _$MessageResponseFromJson(json);
}
</file>

<file path="lib/features/auth/models/auth_models.freezed.dart">
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark
part of 'auth_models.dart';
// **************************************************************************
// FreezedGenerator
// **************************************************************************
T _$identity<T>(T value) => value;
final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');
LoginRequest _$LoginRequestFromJson(Map<String, dynamic> json) {
  return _LoginRequest.fromJson(json);
}
/// @nodoc
mixin _$LoginRequest {
  String get email => throw _privateConstructorUsedError;
  String get password => throw _privateConstructorUsedError;
  /// Serializes this LoginRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $LoginRequestCopyWith<LoginRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $LoginRequestCopyWith<$Res> {
  factory $LoginRequestCopyWith(
          LoginRequest value, $Res Function(LoginRequest) then) =
      _$LoginRequestCopyWithImpl<$Res, LoginRequest>;
  @useResult
  $Res call({String email, String password});
}
/// @nodoc
class _$LoginRequestCopyWithImpl<$Res, $Val extends LoginRequest>
    implements $LoginRequestCopyWith<$Res> {
  _$LoginRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? password = null,
  }) {
    return _then(_value.copyWith(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$LoginRequestImplCopyWith<$Res>
    implements $LoginRequestCopyWith<$Res> {
  factory _$$LoginRequestImplCopyWith(
          _$LoginRequestImpl value, $Res Function(_$LoginRequestImpl) then) =
      __$$LoginRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String email, String password});
}
/// @nodoc
class __$$LoginRequestImplCopyWithImpl<$Res>
    extends _$LoginRequestCopyWithImpl<$Res, _$LoginRequestImpl>
    implements _$$LoginRequestImplCopyWith<$Res> {
  __$$LoginRequestImplCopyWithImpl(
      _$LoginRequestImpl _value, $Res Function(_$LoginRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? password = null,
  }) {
    return _then(_$LoginRequestImpl(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$LoginRequestImpl implements _LoginRequest {
  const _$LoginRequestImpl({required this.email, required this.password});
  factory _$LoginRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$LoginRequestImplFromJson(json);
  @override
  final String email;
  @override
  final String password;
  @override
  String toString() {
    return 'LoginRequest(email: $email, password: $password)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$LoginRequestImpl &&
            (identical(other.email, email) || other.email == email) &&
            (identical(other.password, password) ||
                other.password == password));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, email, password);
  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$LoginRequestImplCopyWith<_$LoginRequestImpl> get copyWith =>
      __$$LoginRequestImplCopyWithImpl<_$LoginRequestImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$LoginRequestImplToJson(
      this,
    );
  }
}
abstract class _LoginRequest implements LoginRequest {
  const factory _LoginRequest(
      {required final String email,
      required final String password}) = _$LoginRequestImpl;
  factory _LoginRequest.fromJson(Map<String, dynamic> json) =
      _$LoginRequestImpl.fromJson;
  @override
  String get email;
  @override
  String get password;
  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$LoginRequestImplCopyWith<_$LoginRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
RegisterRequest _$RegisterRequestFromJson(Map<String, dynamic> json) {
  return _RegisterRequest.fromJson(json);
}
/// @nodoc
mixin _$RegisterRequest {
  String get email => throw _privateConstructorUsedError;
  String get username => throw _privateConstructorUsedError;
  String get password => throw _privateConstructorUsedError;
  String get confirmPassword => throw _privateConstructorUsedError;
  String? get displayName => throw _privateConstructorUsedError;
  String? get inviteCode => throw _privateConstructorUsedError;
  /// Serializes this RegisterRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of RegisterRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $RegisterRequestCopyWith<RegisterRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $RegisterRequestCopyWith<$Res> {
  factory $RegisterRequestCopyWith(
          RegisterRequest value, $Res Function(RegisterRequest) then) =
      _$RegisterRequestCopyWithImpl<$Res, RegisterRequest>;
  @useResult
  $Res call(
      {String email,
      String username,
      String password,
      String confirmPassword,
      String? displayName,
      String? inviteCode});
}
/// @nodoc
class _$RegisterRequestCopyWithImpl<$Res, $Val extends RegisterRequest>
    implements $RegisterRequestCopyWith<$Res> {
  _$RegisterRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of RegisterRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? username = null,
    Object? password = null,
    Object? confirmPassword = null,
    Object? displayName = freezed,
    Object? inviteCode = freezed,
  }) {
    return _then(_value.copyWith(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
      confirmPassword: null == confirmPassword
          ? _value.confirmPassword
          : confirmPassword // ignore: cast_nullable_to_non_nullable
              as String,
      displayName: freezed == displayName
          ? _value.displayName
          : displayName // ignore: cast_nullable_to_non_nullable
              as String?,
      inviteCode: freezed == inviteCode
          ? _value.inviteCode
          : inviteCode // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$RegisterRequestImplCopyWith<$Res>
    implements $RegisterRequestCopyWith<$Res> {
  factory _$$RegisterRequestImplCopyWith(_$RegisterRequestImpl value,
          $Res Function(_$RegisterRequestImpl) then) =
      __$$RegisterRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String email,
      String username,
      String password,
      String confirmPassword,
      String? displayName,
      String? inviteCode});
}
/// @nodoc
class __$$RegisterRequestImplCopyWithImpl<$Res>
    extends _$RegisterRequestCopyWithImpl<$Res, _$RegisterRequestImpl>
    implements _$$RegisterRequestImplCopyWith<$Res> {
  __$$RegisterRequestImplCopyWithImpl(
      _$RegisterRequestImpl _value, $Res Function(_$RegisterRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of RegisterRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? username = null,
    Object? password = null,
    Object? confirmPassword = null,
    Object? displayName = freezed,
    Object? inviteCode = freezed,
  }) {
    return _then(_$RegisterRequestImpl(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
      confirmPassword: null == confirmPassword
          ? _value.confirmPassword
          : confirmPassword // ignore: cast_nullable_to_non_nullable
              as String,
      displayName: freezed == displayName
          ? _value.displayName
          : displayName // ignore: cast_nullable_to_non_nullable
              as String?,
      inviteCode: freezed == inviteCode
          ? _value.inviteCode
          : inviteCode // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$RegisterRequestImpl implements _RegisterRequest {
  const _$RegisterRequestImpl(
      {required this.email,
      required this.username,
      required this.password,
      required this.confirmPassword,
      this.displayName,
      this.inviteCode});
  factory _$RegisterRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$RegisterRequestImplFromJson(json);
  @override
  final String email;
  @override
  final String username;
  @override
  final String password;
  @override
  final String confirmPassword;
  @override
  final String? displayName;
  @override
  final String? inviteCode;
  @override
  String toString() {
    return 'RegisterRequest(email: $email, username: $username, password: $password, confirmPassword: $confirmPassword, displayName: $displayName, inviteCode: $inviteCode)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RegisterRequestImpl &&
            (identical(other.email, email) || other.email == email) &&
            (identical(other.username, username) ||
                other.username == username) &&
            (identical(other.password, password) ||
                other.password == password) &&
            (identical(other.confirmPassword, confirmPassword) ||
                other.confirmPassword == confirmPassword) &&
            (identical(other.displayName, displayName) ||
                other.displayName == displayName) &&
            (identical(other.inviteCode, inviteCode) ||
                other.inviteCode == inviteCode));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, email, username, password,
      confirmPassword, displayName, inviteCode);
  /// Create a copy of RegisterRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RegisterRequestImplCopyWith<_$RegisterRequestImpl> get copyWith =>
      __$$RegisterRequestImplCopyWithImpl<_$RegisterRequestImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$RegisterRequestImplToJson(
      this,
    );
  }
}
abstract class _RegisterRequest implements RegisterRequest {
  const factory _RegisterRequest(
      {required final String email,
      required final String username,
      required final String password,
      required final String confirmPassword,
      final String? displayName,
      final String? inviteCode}) = _$RegisterRequestImpl;
  factory _RegisterRequest.fromJson(Map<String, dynamic> json) =
      _$RegisterRequestImpl.fromJson;
  @override
  String get email;
  @override
  String get username;
  @override
  String get password;
  @override
  String get confirmPassword;
  @override
  String? get displayName;
  @override
  String? get inviteCode;
  /// Create a copy of RegisterRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RegisterRequestImplCopyWith<_$RegisterRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
AuthResponse _$AuthResponseFromJson(Map<String, dynamic> json) {
  return _AuthResponse.fromJson(json);
}
/// @nodoc
mixin _$AuthResponse {
  String get accessToken => throw _privateConstructorUsedError;
  String get refreshToken => throw _privateConstructorUsedError;
  User get user => throw _privateConstructorUsedError;
  String? get tokenType => throw _privateConstructorUsedError;
  int? get expiresIn => throw _privateConstructorUsedError;
  /// Serializes this AuthResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of AuthResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $AuthResponseCopyWith<AuthResponse> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $AuthResponseCopyWith<$Res> {
  factory $AuthResponseCopyWith(
          AuthResponse value, $Res Function(AuthResponse) then) =
      _$AuthResponseCopyWithImpl<$Res, AuthResponse>;
  @useResult
  $Res call(
      {String accessToken,
      String refreshToken,
      User user,
      String? tokenType,
      int? expiresIn});
  $UserCopyWith<$Res> get user;
}
/// @nodoc
class _$AuthResponseCopyWithImpl<$Res, $Val extends AuthResponse>
    implements $AuthResponseCopyWith<$Res> {
  _$AuthResponseCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of AuthResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? accessToken = null,
    Object? refreshToken = null,
    Object? user = null,
    Object? tokenType = freezed,
    Object? expiresIn = freezed,
  }) {
    return _then(_value.copyWith(
      accessToken: null == accessToken
          ? _value.accessToken
          : accessToken // ignore: cast_nullable_to_non_nullable
              as String,
      refreshToken: null == refreshToken
          ? _value.refreshToken
          : refreshToken // ignore: cast_nullable_to_non_nullable
              as String,
      user: null == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User,
      tokenType: freezed == tokenType
          ? _value.tokenType
          : tokenType // ignore: cast_nullable_to_non_nullable
              as String?,
      expiresIn: freezed == expiresIn
          ? _value.expiresIn
          : expiresIn // ignore: cast_nullable_to_non_nullable
              as int?,
    ) as $Val);
  }
  /// Create a copy of AuthResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $UserCopyWith<$Res> get user {
    return $UserCopyWith<$Res>(_value.user, (value) {
      return _then(_value.copyWith(user: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$AuthResponseImplCopyWith<$Res>
    implements $AuthResponseCopyWith<$Res> {
  factory _$$AuthResponseImplCopyWith(
          _$AuthResponseImpl value, $Res Function(_$AuthResponseImpl) then) =
      __$$AuthResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String accessToken,
      String refreshToken,
      User user,
      String? tokenType,
      int? expiresIn});
  @override
  $UserCopyWith<$Res> get user;
}
/// @nodoc
class __$$AuthResponseImplCopyWithImpl<$Res>
    extends _$AuthResponseCopyWithImpl<$Res, _$AuthResponseImpl>
    implements _$$AuthResponseImplCopyWith<$Res> {
  __$$AuthResponseImplCopyWithImpl(
      _$AuthResponseImpl _value, $Res Function(_$AuthResponseImpl) _then)
      : super(_value, _then);
  /// Create a copy of AuthResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? accessToken = null,
    Object? refreshToken = null,
    Object? user = null,
    Object? tokenType = freezed,
    Object? expiresIn = freezed,
  }) {
    return _then(_$AuthResponseImpl(
      accessToken: null == accessToken
          ? _value.accessToken
          : accessToken // ignore: cast_nullable_to_non_nullable
              as String,
      refreshToken: null == refreshToken
          ? _value.refreshToken
          : refreshToken // ignore: cast_nullable_to_non_nullable
              as String,
      user: null == user
          ? _value.user
          : user // ignore: cast_nullable_to_non_nullable
              as User,
      tokenType: freezed == tokenType
          ? _value.tokenType
          : tokenType // ignore: cast_nullable_to_non_nullable
              as String?,
      expiresIn: freezed == expiresIn
          ? _value.expiresIn
          : expiresIn // ignore: cast_nullable_to_non_nullable
              as int?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$AuthResponseImpl implements _AuthResponse {
  const _$AuthResponseImpl(
      {required this.accessToken,
      required this.refreshToken,
      required this.user,
      this.tokenType,
      this.expiresIn});
  factory _$AuthResponseImpl.fromJson(Map<String, dynamic> json) =>
      _$$AuthResponseImplFromJson(json);
  @override
  final String accessToken;
  @override
  final String refreshToken;
  @override
  final User user;
  @override
  final String? tokenType;
  @override
  final int? expiresIn;
  @override
  String toString() {
    return 'AuthResponse(accessToken: $accessToken, refreshToken: $refreshToken, user: $user, tokenType: $tokenType, expiresIn: $expiresIn)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AuthResponseImpl &&
            (identical(other.accessToken, accessToken) ||
                other.accessToken == accessToken) &&
            (identical(other.refreshToken, refreshToken) ||
                other.refreshToken == refreshToken) &&
            (identical(other.user, user) || other.user == user) &&
            (identical(other.tokenType, tokenType) ||
                other.tokenType == tokenType) &&
            (identical(other.expiresIn, expiresIn) ||
                other.expiresIn == expiresIn));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, accessToken, refreshToken, user, tokenType, expiresIn);
  /// Create a copy of AuthResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AuthResponseImplCopyWith<_$AuthResponseImpl> get copyWith =>
      __$$AuthResponseImplCopyWithImpl<_$AuthResponseImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$AuthResponseImplToJson(
      this,
    );
  }
}
abstract class _AuthResponse implements AuthResponse {
  const factory _AuthResponse(
      {required final String accessToken,
      required final String refreshToken,
      required final User user,
      final String? tokenType,
      final int? expiresIn}) = _$AuthResponseImpl;
  factory _AuthResponse.fromJson(Map<String, dynamic> json) =
      _$AuthResponseImpl.fromJson;
  @override
  String get accessToken;
  @override
  String get refreshToken;
  @override
  User get user;
  @override
  String? get tokenType;
  @override
  int? get expiresIn;
  /// Create a copy of AuthResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AuthResponseImplCopyWith<_$AuthResponseImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
RefreshTokenRequest _$RefreshTokenRequestFromJson(Map<String, dynamic> json) {
  return _RefreshTokenRequest.fromJson(json);
}
/// @nodoc
mixin _$RefreshTokenRequest {
  String get refreshToken => throw _privateConstructorUsedError;
  /// Serializes this RefreshTokenRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of RefreshTokenRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $RefreshTokenRequestCopyWith<RefreshTokenRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $RefreshTokenRequestCopyWith<$Res> {
  factory $RefreshTokenRequestCopyWith(
          RefreshTokenRequest value, $Res Function(RefreshTokenRequest) then) =
      _$RefreshTokenRequestCopyWithImpl<$Res, RefreshTokenRequest>;
  @useResult
  $Res call({String refreshToken});
}
/// @nodoc
class _$RefreshTokenRequestCopyWithImpl<$Res, $Val extends RefreshTokenRequest>
    implements $RefreshTokenRequestCopyWith<$Res> {
  _$RefreshTokenRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of RefreshTokenRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? refreshToken = null,
  }) {
    return _then(_value.copyWith(
      refreshToken: null == refreshToken
          ? _value.refreshToken
          : refreshToken // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$RefreshTokenRequestImplCopyWith<$Res>
    implements $RefreshTokenRequestCopyWith<$Res> {
  factory _$$RefreshTokenRequestImplCopyWith(_$RefreshTokenRequestImpl value,
          $Res Function(_$RefreshTokenRequestImpl) then) =
      __$$RefreshTokenRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String refreshToken});
}
/// @nodoc
class __$$RefreshTokenRequestImplCopyWithImpl<$Res>
    extends _$RefreshTokenRequestCopyWithImpl<$Res, _$RefreshTokenRequestImpl>
    implements _$$RefreshTokenRequestImplCopyWith<$Res> {
  __$$RefreshTokenRequestImplCopyWithImpl(_$RefreshTokenRequestImpl _value,
      $Res Function(_$RefreshTokenRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of RefreshTokenRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? refreshToken = null,
  }) {
    return _then(_$RefreshTokenRequestImpl(
      refreshToken: null == refreshToken
          ? _value.refreshToken
          : refreshToken // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$RefreshTokenRequestImpl implements _RefreshTokenRequest {
  const _$RefreshTokenRequestImpl({required this.refreshToken});
  factory _$RefreshTokenRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$RefreshTokenRequestImplFromJson(json);
  @override
  final String refreshToken;
  @override
  String toString() {
    return 'RefreshTokenRequest(refreshToken: $refreshToken)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RefreshTokenRequestImpl &&
            (identical(other.refreshToken, refreshToken) ||
                other.refreshToken == refreshToken));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, refreshToken);
  /// Create a copy of RefreshTokenRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RefreshTokenRequestImplCopyWith<_$RefreshTokenRequestImpl> get copyWith =>
      __$$RefreshTokenRequestImplCopyWithImpl<_$RefreshTokenRequestImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$RefreshTokenRequestImplToJson(
      this,
    );
  }
}
abstract class _RefreshTokenRequest implements RefreshTokenRequest {
  const factory _RefreshTokenRequest({required final String refreshToken}) =
      _$RefreshTokenRequestImpl;
  factory _RefreshTokenRequest.fromJson(Map<String, dynamic> json) =
      _$RefreshTokenRequestImpl.fromJson;
  @override
  String get refreshToken;
  /// Create a copy of RefreshTokenRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RefreshTokenRequestImplCopyWith<_$RefreshTokenRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
ForgotPasswordRequest _$ForgotPasswordRequestFromJson(
    Map<String, dynamic> json) {
  return _ForgotPasswordRequest.fromJson(json);
}
/// @nodoc
mixin _$ForgotPasswordRequest {
  String get email => throw _privateConstructorUsedError;
  /// Serializes this ForgotPasswordRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of ForgotPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $ForgotPasswordRequestCopyWith<ForgotPasswordRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $ForgotPasswordRequestCopyWith<$Res> {
  factory $ForgotPasswordRequestCopyWith(ForgotPasswordRequest value,
          $Res Function(ForgotPasswordRequest) then) =
      _$ForgotPasswordRequestCopyWithImpl<$Res, ForgotPasswordRequest>;
  @useResult
  $Res call({String email});
}
/// @nodoc
class _$ForgotPasswordRequestCopyWithImpl<$Res,
        $Val extends ForgotPasswordRequest>
    implements $ForgotPasswordRequestCopyWith<$Res> {
  _$ForgotPasswordRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of ForgotPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
  }) {
    return _then(_value.copyWith(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$ForgotPasswordRequestImplCopyWith<$Res>
    implements $ForgotPasswordRequestCopyWith<$Res> {
  factory _$$ForgotPasswordRequestImplCopyWith(
          _$ForgotPasswordRequestImpl value,
          $Res Function(_$ForgotPasswordRequestImpl) then) =
      __$$ForgotPasswordRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String email});
}
/// @nodoc
class __$$ForgotPasswordRequestImplCopyWithImpl<$Res>
    extends _$ForgotPasswordRequestCopyWithImpl<$Res,
        _$ForgotPasswordRequestImpl>
    implements _$$ForgotPasswordRequestImplCopyWith<$Res> {
  __$$ForgotPasswordRequestImplCopyWithImpl(_$ForgotPasswordRequestImpl _value,
      $Res Function(_$ForgotPasswordRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of ForgotPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
  }) {
    return _then(_$ForgotPasswordRequestImpl(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$ForgotPasswordRequestImpl implements _ForgotPasswordRequest {
  const _$ForgotPasswordRequestImpl({required this.email});
  factory _$ForgotPasswordRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$ForgotPasswordRequestImplFromJson(json);
  @override
  final String email;
  @override
  String toString() {
    return 'ForgotPasswordRequest(email: $email)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ForgotPasswordRequestImpl &&
            (identical(other.email, email) || other.email == email));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, email);
  /// Create a copy of ForgotPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ForgotPasswordRequestImplCopyWith<_$ForgotPasswordRequestImpl>
      get copyWith => __$$ForgotPasswordRequestImplCopyWithImpl<
          _$ForgotPasswordRequestImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$ForgotPasswordRequestImplToJson(
      this,
    );
  }
}
abstract class _ForgotPasswordRequest implements ForgotPasswordRequest {
  const factory _ForgotPasswordRequest({required final String email}) =
      _$ForgotPasswordRequestImpl;
  factory _ForgotPasswordRequest.fromJson(Map<String, dynamic> json) =
      _$ForgotPasswordRequestImpl.fromJson;
  @override
  String get email;
  /// Create a copy of ForgotPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ForgotPasswordRequestImplCopyWith<_$ForgotPasswordRequestImpl>
      get copyWith => throw _privateConstructorUsedError;
}
ResetPasswordRequest _$ResetPasswordRequestFromJson(Map<String, dynamic> json) {
  return _ResetPasswordRequest.fromJson(json);
}
/// @nodoc
mixin _$ResetPasswordRequest {
  String get token => throw _privateConstructorUsedError;
  String get newPassword => throw _privateConstructorUsedError;
  String get confirmPassword => throw _privateConstructorUsedError;
  /// Serializes this ResetPasswordRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of ResetPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $ResetPasswordRequestCopyWith<ResetPasswordRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $ResetPasswordRequestCopyWith<$Res> {
  factory $ResetPasswordRequestCopyWith(ResetPasswordRequest value,
          $Res Function(ResetPasswordRequest) then) =
      _$ResetPasswordRequestCopyWithImpl<$Res, ResetPasswordRequest>;
  @useResult
  $Res call({String token, String newPassword, String confirmPassword});
}
/// @nodoc
class _$ResetPasswordRequestCopyWithImpl<$Res,
        $Val extends ResetPasswordRequest>
    implements $ResetPasswordRequestCopyWith<$Res> {
  _$ResetPasswordRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of ResetPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? token = null,
    Object? newPassword = null,
    Object? confirmPassword = null,
  }) {
    return _then(_value.copyWith(
      token: null == token
          ? _value.token
          : token // ignore: cast_nullable_to_non_nullable
              as String,
      newPassword: null == newPassword
          ? _value.newPassword
          : newPassword // ignore: cast_nullable_to_non_nullable
              as String,
      confirmPassword: null == confirmPassword
          ? _value.confirmPassword
          : confirmPassword // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$ResetPasswordRequestImplCopyWith<$Res>
    implements $ResetPasswordRequestCopyWith<$Res> {
  factory _$$ResetPasswordRequestImplCopyWith(_$ResetPasswordRequestImpl value,
          $Res Function(_$ResetPasswordRequestImpl) then) =
      __$$ResetPasswordRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String token, String newPassword, String confirmPassword});
}
/// @nodoc
class __$$ResetPasswordRequestImplCopyWithImpl<$Res>
    extends _$ResetPasswordRequestCopyWithImpl<$Res, _$ResetPasswordRequestImpl>
    implements _$$ResetPasswordRequestImplCopyWith<$Res> {
  __$$ResetPasswordRequestImplCopyWithImpl(_$ResetPasswordRequestImpl _value,
      $Res Function(_$ResetPasswordRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of ResetPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? token = null,
    Object? newPassword = null,
    Object? confirmPassword = null,
  }) {
    return _then(_$ResetPasswordRequestImpl(
      token: null == token
          ? _value.token
          : token // ignore: cast_nullable_to_non_nullable
              as String,
      newPassword: null == newPassword
          ? _value.newPassword
          : newPassword // ignore: cast_nullable_to_non_nullable
              as String,
      confirmPassword: null == confirmPassword
          ? _value.confirmPassword
          : confirmPassword // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$ResetPasswordRequestImpl implements _ResetPasswordRequest {
  const _$ResetPasswordRequestImpl(
      {required this.token,
      required this.newPassword,
      required this.confirmPassword});
  factory _$ResetPasswordRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$ResetPasswordRequestImplFromJson(json);
  @override
  final String token;
  @override
  final String newPassword;
  @override
  final String confirmPassword;
  @override
  String toString() {
    return 'ResetPasswordRequest(token: $token, newPassword: $newPassword, confirmPassword: $confirmPassword)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ResetPasswordRequestImpl &&
            (identical(other.token, token) || other.token == token) &&
            (identical(other.newPassword, newPassword) ||
                other.newPassword == newPassword) &&
            (identical(other.confirmPassword, confirmPassword) ||
                other.confirmPassword == confirmPassword));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode =>
      Object.hash(runtimeType, token, newPassword, confirmPassword);
  /// Create a copy of ResetPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ResetPasswordRequestImplCopyWith<_$ResetPasswordRequestImpl>
      get copyWith =>
          __$$ResetPasswordRequestImplCopyWithImpl<_$ResetPasswordRequestImpl>(
              this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$ResetPasswordRequestImplToJson(
      this,
    );
  }
}
abstract class _ResetPasswordRequest implements ResetPasswordRequest {
  const factory _ResetPasswordRequest(
      {required final String token,
      required final String newPassword,
      required final String confirmPassword}) = _$ResetPasswordRequestImpl;
  factory _ResetPasswordRequest.fromJson(Map<String, dynamic> json) =
      _$ResetPasswordRequestImpl.fromJson;
  @override
  String get token;
  @override
  String get newPassword;
  @override
  String get confirmPassword;
  /// Create a copy of ResetPasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ResetPasswordRequestImplCopyWith<_$ResetPasswordRequestImpl>
      get copyWith => throw _privateConstructorUsedError;
}
ChangePasswordRequest _$ChangePasswordRequestFromJson(
    Map<String, dynamic> json) {
  return _ChangePasswordRequest.fromJson(json);
}
/// @nodoc
mixin _$ChangePasswordRequest {
  String get currentPassword => throw _privateConstructorUsedError;
  String get newPassword => throw _privateConstructorUsedError;
  String get confirmPassword => throw _privateConstructorUsedError;
  /// Serializes this ChangePasswordRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of ChangePasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $ChangePasswordRequestCopyWith<ChangePasswordRequest> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $ChangePasswordRequestCopyWith<$Res> {
  factory $ChangePasswordRequestCopyWith(ChangePasswordRequest value,
          $Res Function(ChangePasswordRequest) then) =
      _$ChangePasswordRequestCopyWithImpl<$Res, ChangePasswordRequest>;
  @useResult
  $Res call(
      {String currentPassword, String newPassword, String confirmPassword});
}
/// @nodoc
class _$ChangePasswordRequestCopyWithImpl<$Res,
        $Val extends ChangePasswordRequest>
    implements $ChangePasswordRequestCopyWith<$Res> {
  _$ChangePasswordRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of ChangePasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? currentPassword = null,
    Object? newPassword = null,
    Object? confirmPassword = null,
  }) {
    return _then(_value.copyWith(
      currentPassword: null == currentPassword
          ? _value.currentPassword
          : currentPassword // ignore: cast_nullable_to_non_nullable
              as String,
      newPassword: null == newPassword
          ? _value.newPassword
          : newPassword // ignore: cast_nullable_to_non_nullable
              as String,
      confirmPassword: null == confirmPassword
          ? _value.confirmPassword
          : confirmPassword // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$ChangePasswordRequestImplCopyWith<$Res>
    implements $ChangePasswordRequestCopyWith<$Res> {
  factory _$$ChangePasswordRequestImplCopyWith(
          _$ChangePasswordRequestImpl value,
          $Res Function(_$ChangePasswordRequestImpl) then) =
      __$$ChangePasswordRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String currentPassword, String newPassword, String confirmPassword});
}
/// @nodoc
class __$$ChangePasswordRequestImplCopyWithImpl<$Res>
    extends _$ChangePasswordRequestCopyWithImpl<$Res,
        _$ChangePasswordRequestImpl>
    implements _$$ChangePasswordRequestImplCopyWith<$Res> {
  __$$ChangePasswordRequestImplCopyWithImpl(_$ChangePasswordRequestImpl _value,
      $Res Function(_$ChangePasswordRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of ChangePasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? currentPassword = null,
    Object? newPassword = null,
    Object? confirmPassword = null,
  }) {
    return _then(_$ChangePasswordRequestImpl(
      currentPassword: null == currentPassword
          ? _value.currentPassword
          : currentPassword // ignore: cast_nullable_to_non_nullable
              as String,
      newPassword: null == newPassword
          ? _value.newPassword
          : newPassword // ignore: cast_nullable_to_non_nullable
              as String,
      confirmPassword: null == confirmPassword
          ? _value.confirmPassword
          : confirmPassword // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$ChangePasswordRequestImpl implements _ChangePasswordRequest {
  const _$ChangePasswordRequestImpl(
      {required this.currentPassword,
      required this.newPassword,
      required this.confirmPassword});
  factory _$ChangePasswordRequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$ChangePasswordRequestImplFromJson(json);
  @override
  final String currentPassword;
  @override
  final String newPassword;
  @override
  final String confirmPassword;
  @override
  String toString() {
    return 'ChangePasswordRequest(currentPassword: $currentPassword, newPassword: $newPassword, confirmPassword: $confirmPassword)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ChangePasswordRequestImpl &&
            (identical(other.currentPassword, currentPassword) ||
                other.currentPassword == currentPassword) &&
            (identical(other.newPassword, newPassword) ||
                other.newPassword == newPassword) &&
            (identical(other.confirmPassword, confirmPassword) ||
                other.confirmPassword == confirmPassword));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode =>
      Object.hash(runtimeType, currentPassword, newPassword, confirmPassword);
  /// Create a copy of ChangePasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ChangePasswordRequestImplCopyWith<_$ChangePasswordRequestImpl>
      get copyWith => __$$ChangePasswordRequestImplCopyWithImpl<
          _$ChangePasswordRequestImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$ChangePasswordRequestImplToJson(
      this,
    );
  }
}
abstract class _ChangePasswordRequest implements ChangePasswordRequest {
  const factory _ChangePasswordRequest(
      {required final String currentPassword,
      required final String newPassword,
      required final String confirmPassword}) = _$ChangePasswordRequestImpl;
  factory _ChangePasswordRequest.fromJson(Map<String, dynamic> json) =
      _$ChangePasswordRequestImpl.fromJson;
  @override
  String get currentPassword;
  @override
  String get newPassword;
  @override
  String get confirmPassword;
  /// Create a copy of ChangePasswordRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ChangePasswordRequestImplCopyWith<_$ChangePasswordRequestImpl>
      get copyWith => throw _privateConstructorUsedError;
}
MessageResponse _$MessageResponseFromJson(Map<String, dynamic> json) {
  return _MessageResponse.fromJson(json);
}
/// @nodoc
mixin _$MessageResponse {
  String get message => throw _privateConstructorUsedError;
  bool? get success => throw _privateConstructorUsedError;
  /// Serializes this MessageResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of MessageResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $MessageResponseCopyWith<MessageResponse> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $MessageResponseCopyWith<$Res> {
  factory $MessageResponseCopyWith(
          MessageResponse value, $Res Function(MessageResponse) then) =
      _$MessageResponseCopyWithImpl<$Res, MessageResponse>;
  @useResult
  $Res call({String message, bool? success});
}
/// @nodoc
class _$MessageResponseCopyWithImpl<$Res, $Val extends MessageResponse>
    implements $MessageResponseCopyWith<$Res> {
  _$MessageResponseCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of MessageResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
    Object? success = freezed,
  }) {
    return _then(_value.copyWith(
      message: null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
      success: freezed == success
          ? _value.success
          : success // ignore: cast_nullable_to_non_nullable
              as bool?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$MessageResponseImplCopyWith<$Res>
    implements $MessageResponseCopyWith<$Res> {
  factory _$$MessageResponseImplCopyWith(_$MessageResponseImpl value,
          $Res Function(_$MessageResponseImpl) then) =
      __$$MessageResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String message, bool? success});
}
/// @nodoc
class __$$MessageResponseImplCopyWithImpl<$Res>
    extends _$MessageResponseCopyWithImpl<$Res, _$MessageResponseImpl>
    implements _$$MessageResponseImplCopyWith<$Res> {
  __$$MessageResponseImplCopyWithImpl(
      _$MessageResponseImpl _value, $Res Function(_$MessageResponseImpl) _then)
      : super(_value, _then);
  /// Create a copy of MessageResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? message = null,
    Object? success = freezed,
  }) {
    return _then(_$MessageResponseImpl(
      message: null == message
          ? _value.message
          : message // ignore: cast_nullable_to_non_nullable
              as String,
      success: freezed == success
          ? _value.success
          : success // ignore: cast_nullable_to_non_nullable
              as bool?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$MessageResponseImpl implements _MessageResponse {
  const _$MessageResponseImpl({required this.message, this.success});
  factory _$MessageResponseImpl.fromJson(Map<String, dynamic> json) =>
      _$$MessageResponseImplFromJson(json);
  @override
  final String message;
  @override
  final bool? success;
  @override
  String toString() {
    return 'MessageResponse(message: $message, success: $success)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MessageResponseImpl &&
            (identical(other.message, message) || other.message == message) &&
            (identical(other.success, success) || other.success == success));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, message, success);
  /// Create a copy of MessageResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MessageResponseImplCopyWith<_$MessageResponseImpl> get copyWith =>
      __$$MessageResponseImplCopyWithImpl<_$MessageResponseImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$MessageResponseImplToJson(
      this,
    );
  }
}
abstract class _MessageResponse implements MessageResponse {
  const factory _MessageResponse(
      {required final String message,
      final bool? success}) = _$MessageResponseImpl;
  factory _MessageResponse.fromJson(Map<String, dynamic> json) =
      _$MessageResponseImpl.fromJson;
  @override
  String get message;
  @override
  bool? get success;
  /// Create a copy of MessageResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MessageResponseImplCopyWith<_$MessageResponseImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
</file>

<file path="lib/features/auth/models/auth_models.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'auth_models.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
_$LoginRequestImpl _$$LoginRequestImplFromJson(Map<String, dynamic> json) =>
    _$LoginRequestImpl(
      email: json['email'] as String,
      password: json['password'] as String,
    );
Map<String, dynamic> _$$LoginRequestImplToJson(_$LoginRequestImpl instance) =>
    <String, dynamic>{
      'email': instance.email,
      'password': instance.password,
    };
_$RegisterRequestImpl _$$RegisterRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$RegisterRequestImpl(
      email: json['email'] as String,
      username: json['username'] as String,
      password: json['password'] as String,
      confirmPassword: json['confirmPassword'] as String,
      displayName: json['displayName'] as String?,
      inviteCode: json['inviteCode'] as String?,
    );
Map<String, dynamic> _$$RegisterRequestImplToJson(
        _$RegisterRequestImpl instance) =>
    <String, dynamic>{
      'email': instance.email,
      'username': instance.username,
      'password': instance.password,
      'confirmPassword': instance.confirmPassword,
      'displayName': instance.displayName,
      'inviteCode': instance.inviteCode,
    };
_$AuthResponseImpl _$$AuthResponseImplFromJson(Map<String, dynamic> json) =>
    _$AuthResponseImpl(
      accessToken: json['accessToken'] as String,
      refreshToken: json['refreshToken'] as String,
      user: User.fromJson(json['user'] as Map<String, dynamic>),
      tokenType: json['tokenType'] as String?,
      expiresIn: (json['expiresIn'] as num?)?.toInt(),
    );
Map<String, dynamic> _$$AuthResponseImplToJson(_$AuthResponseImpl instance) =>
    <String, dynamic>{
      'accessToken': instance.accessToken,
      'refreshToken': instance.refreshToken,
      'user': instance.user,
      'tokenType': instance.tokenType,
      'expiresIn': instance.expiresIn,
    };
_$RefreshTokenRequestImpl _$$RefreshTokenRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$RefreshTokenRequestImpl(
      refreshToken: json['refreshToken'] as String,
    );
Map<String, dynamic> _$$RefreshTokenRequestImplToJson(
        _$RefreshTokenRequestImpl instance) =>
    <String, dynamic>{
      'refreshToken': instance.refreshToken,
    };
_$ForgotPasswordRequestImpl _$$ForgotPasswordRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$ForgotPasswordRequestImpl(
      email: json['email'] as String,
    );
Map<String, dynamic> _$$ForgotPasswordRequestImplToJson(
        _$ForgotPasswordRequestImpl instance) =>
    <String, dynamic>{
      'email': instance.email,
    };
_$ResetPasswordRequestImpl _$$ResetPasswordRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$ResetPasswordRequestImpl(
      token: json['token'] as String,
      newPassword: json['newPassword'] as String,
      confirmPassword: json['confirmPassword'] as String,
    );
Map<String, dynamic> _$$ResetPasswordRequestImplToJson(
        _$ResetPasswordRequestImpl instance) =>
    <String, dynamic>{
      'token': instance.token,
      'newPassword': instance.newPassword,
      'confirmPassword': instance.confirmPassword,
    };
_$ChangePasswordRequestImpl _$$ChangePasswordRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$ChangePasswordRequestImpl(
      currentPassword: json['currentPassword'] as String,
      newPassword: json['newPassword'] as String,
      confirmPassword: json['confirmPassword'] as String,
    );
Map<String, dynamic> _$$ChangePasswordRequestImplToJson(
        _$ChangePasswordRequestImpl instance) =>
    <String, dynamic>{
      'currentPassword': instance.currentPassword,
      'newPassword': instance.newPassword,
      'confirmPassword': instance.confirmPassword,
    };
_$MessageResponseImpl _$$MessageResponseImplFromJson(
        Map<String, dynamic> json) =>
    _$MessageResponseImpl(
      message: json['message'] as String,
      success: json['success'] as bool?,
    );
Map<String, dynamic> _$$MessageResponseImplToJson(
        _$MessageResponseImpl instance) =>
    <String, dynamic>{
      'message': instance.message,
      'success': instance.success,
    };
</file>

<file path="lib/features/auth/presentation/screens/login_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/features/auth/providers/auth_provider.dart';
import 'package:plant_social/features/auth/presentation/widgets/auth_text_field.dart';
import 'package:plant_social/features/auth/presentation/widgets/auth_button.dart';
import 'package:plant_social/core/exceptions/api_exception.dart';
class LoginScreen extends ConsumerStatefulWidget {
  const LoginScreen({super.key});
  @override
  ConsumerState<LoginScreen> createState() => _LoginScreenState();
}
class _LoginScreenState extends ConsumerState<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _obscurePassword = true;
  bool _rememberMe = false;
  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
  Future<void> _handleLogin() async {
    if (!_formKey.currentState!.validate()) return;
    try {
      await ref.read(authProvider.notifier).login(
        _emailController.text.trim(),
        _passwordController.text,
      );
      if (mounted) {
        context.go(AppRoutes.home);
      }
    } on ApiException catch (e) {
      if (mounted) {
        _showErrorSnackBar(e.message);
      }
    } catch (e) {
      if (mounted) {
        _showErrorSnackBar('An unexpected error occurred. Please try again.');
      }
    }
  }
  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Theme.of(context).colorScheme.error,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
  String? _validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return 'Email is required';
    }
    if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
      return 'Please enter a valid email address';
    }
    return null;
  }
  String? _validatePassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Password is required';
    }
    return null;
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final authState = ref.watch(authProvider);
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const SizedBox(height: 40),
                // Logo and Welcome Text
                Center(
                  child: Column(
                    children: [
                      Container(
                        width: 80,
                        height: 80,
                        decoration: BoxDecoration(
                          color: theme.colorScheme.primary,
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Icon(
                          Icons.eco,
                          size: 40,
                          color: theme.colorScheme.onPrimary,
                        ),
                      ),
                      const SizedBox(height: 24),
                      Text(
                        'Welcome Back',
                        style: theme.textTheme.headlineMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.onSurface,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Sign in to continue growing with your plant community',
                        style: theme.textTheme.bodyMedium?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.7),
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 48),
                // Email Field
                AuthTextField(
                  controller: _emailController,
                  label: 'Email',
                  hintText: 'Enter your email',
                  keyboardType: TextInputType.emailAddress,
                  prefixIcon: Icons.email_outlined,
                  validator: _validateEmail,
                  textInputAction: TextInputAction.next,
                ),
                const SizedBox(height: 16),
                // Password Field
                AuthTextField(
                  controller: _passwordController,
                  label: 'Password',
                  hintText: 'Enter your password',
                  obscureText: _obscurePassword,
                  prefixIcon: Icons.lock_outlined,
                  suffixIcon: IconButton(
                    icon: Icon(
                      _obscurePassword ? Icons.visibility_outlined : Icons.visibility_off_outlined,
                    ),
                    onPressed: () {
                      setState(() {
                        _obscurePassword = !_obscurePassword;
                      });
                    },
                  ),
                  validator: _validatePassword,
                  textInputAction: TextInputAction.done,
                  onSubmitted: (_) => _handleLogin(),
                ),
                const SizedBox(height: 16),
                // Remember Me and Forgot Password
                Row(
                  children: [
                    Checkbox(
                      value: _rememberMe,
                      onChanged: (value) {
                        setState(() {
                          _rememberMe = value ?? false;
                        });
                      },
                    ),
                    Text(
                      'Remember me',
                      style: theme.textTheme.bodyMedium,
                    ),
                    const Spacer(),
                    // Forgot Password Link
                    Align(
                      alignment: Alignment.centerRight,
                      child: TextButton(
                        onPressed: () => _showForgotPasswordDialog(context),
                        child: Text(
                          'Forgot Password?',
                          style: TextStyle(
                            color: theme.primaryColor,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                // Login Button
                AuthButton(
                  text: 'Sign In',
                  onPressed: authState.isLoading ? null : _handleLogin,
                  isLoading: authState.isLoading,
                ),
                const SizedBox(height: 24),
                // Divider
                Row(
                  children: [
                    Expanded(
                      child: Divider(
                        color: theme.colorScheme.outline.withOpacity(0.3),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Text(
                        'OR',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.6),
                        ),
                      ),
                    ),
                    Expanded(
                      child: Divider(
                        color: theme.colorScheme.outline.withOpacity(0.3),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 24),
                // Social Login Buttons
                Text(
                  'Or continue with',
                  textAlign: TextAlign.center,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: Colors.grey[600],
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: _buildSocialLoginButton(
                        'Google',
                        Icons.g_mobiledata,
                        Colors.red,
                        () => _handleSocialLogin('Google'),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: _buildSocialLoginButton(
                        'Apple',
                        Icons.apple,
                        Colors.black,
                        () => _handleSocialLogin('Apple'),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                SizedBox(
                  width: double.infinity,
                  child: _buildSocialLoginButton(
                    'Facebook',
                    Icons.facebook,
                    const Color(0xFF1877F2),
                    () => _handleSocialLogin('Facebook'),
                  ),
                ),
                const SizedBox(height: 32),
                // Sign Up Link
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Don\'t have an account? ',
                      style: theme.textTheme.bodyMedium?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.7),
                      ),
                    ),
                    TextButton(
                      onPressed: () {
                        context.go(AppRoutes.register);
                      },
                      child: Text(
                        'Sign Up',
                        style: TextStyle(
                          color: theme.colorScheme.primary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
  void _showForgotPasswordDialog(BuildContext context) {
    final emailController = TextEditingController();
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Reset Password'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Enter your email address and we\'ll send you a link to reset your password.',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: emailController,
              keyboardType: TextInputType.emailAddress,
              decoration: const InputDecoration(
                labelText: 'Email Address',
                hintText: 'Enter your email',
                prefixIcon: Icon(Icons.email),
                border: OutlineInputBorder(),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              final email = emailController.text.trim();
              if (email.isNotEmpty) {
                Navigator.of(context).pop();
                _sendPasswordResetEmail(email);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Please enter your email address')),
                );
              }
            },
            child: const Text('Send Reset Link'),
          ),
        ],
      ),
    );
  }
  void _sendPasswordResetEmail(String email) {
    // Simulate sending reset email
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Password reset link sent to $email'),
        action: SnackBarAction(
          label: 'Resend',
          onPressed: () => _sendPasswordResetEmail(email),
        ),
      ),
    );
  }
  Widget _buildSocialLoginButton(String platform, IconData icon, Color color, VoidCallback onPressed) {
    return OutlinedButton(
      onPressed: onPressed,
      style: OutlinedButton.styleFrom(
        padding: const EdgeInsets.symmetric(vertical: 12),
        side: BorderSide(color: Colors.grey[300]!),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(width: 8),
          Text(
            platform,
            style: TextStyle(
              color: Colors.grey[700],
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
  void _handleSocialLogin(String platform) {
    // Show loading state
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(strokeWidth: 2),
            ),
            const SizedBox(width: 12),
            Text('Signing in with $platform...'),
          ],
        ),
        duration: const Duration(seconds: 2),
      ),
    );
    // Simulate social login process
    Future.delayed(const Duration(seconds: 2), () {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('$platform login successful!'),
          backgroundColor: Colors.green,
        ),
      );
    });
  }
}
</file>

<file path="lib/features/auth/presentation/screens/register_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/features/auth/providers/auth_provider.dart';
import 'package:plant_social/features/auth/models/auth_models.dart';
import 'package:plant_social/features/auth/presentation/widgets/auth_text_field.dart';
import 'package:plant_social/features/auth/presentation/widgets/auth_button.dart';
import 'package:plant_social/core/exceptions/api_exception.dart';
class RegisterScreen extends ConsumerStatefulWidget {
  const RegisterScreen({super.key});
  @override
  ConsumerState<RegisterScreen> createState() => _RegisterScreenState();
}
class _RegisterScreenState extends ConsumerState<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _usernameController = TextEditingController();
  final _displayNameController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  bool _obscurePassword = true;
  bool _obscureConfirmPassword = true;
  bool _acceptTerms = false;
  @override
  void dispose() {
    _emailController.dispose();
    _usernameController.dispose();
    _displayNameController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }
  Future<void> _handleRegister() async {
    if (!_formKey.currentState!.validate()) return;
    if (!_acceptTerms) {
      _showErrorSnackBar('Please accept the Terms of Service and Privacy Policy');
      return;
    }
    try {
      final request = RegisterRequest(
        email: _emailController.text.trim(),
        username: _usernameController.text.trim(),
        password: _passwordController.text,
        confirmPassword: _confirmPasswordController.text,
        displayName: _displayNameController.text.trim().isNotEmpty 
            ? _displayNameController.text.trim() 
            : null,
      );
      await ref.read(authProvider.notifier).register(request);
      if (mounted) {
        context.go(AppRoutes.home);
      }
    } on ApiException catch (e) {
      if (mounted) {
        _showErrorSnackBar(e.message);
      }
    } catch (e) {
      if (mounted) {
        _showErrorSnackBar('An unexpected error occurred. Please try again.');
      }
    }
  }
  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Theme.of(context).colorScheme.error,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
  String? _validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return 'Email is required';
    }
    if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
      return 'Please enter a valid email address';
    }
    return null;
  }
  String? _validateUsername(String? value) {
    if (value == null || value.isEmpty) {
      return 'Username is required';
    }
    if (!RegExp(r'^[a-zA-Z0-9_]{3,30}$').hasMatch(value)) {
      return 'Username must be 3-30 characters and contain only letters, numbers, and underscores';
    }
    return null;
  }
  String? _validatePassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Password is required';
    }
    if (value.length < 8) {
      return 'Password must be at least 8 characters';
    }
    if (!RegExp(r'^(?=.*[A-Za-z])(?=.*\d)').hasMatch(value)) {
      return 'Password must contain at least one letter and one number';
    }
    return null;
  }
  String? _validateConfirmPassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please confirm your password';
    }
    if (value != _passwordController.text) {
      return 'Passwords do not match';
    }
    return null;
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final authState = ref.watch(authProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Register'),
        leading: IconButton(
          onPressed: () => context.go(AppRoutes.login),
          icon: const Icon(Icons.arrow_back),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header
                Center(
                  child: Column(
                    children: [
                      Container(
                        width: 80,
                        height: 80,
                        decoration: BoxDecoration(
                          color: theme.colorScheme.primary,
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Icon(
                          Icons.eco,
                          size: 40,
                          color: theme.colorScheme.onPrimary,
                        ),
                      ),
                      const SizedBox(height: 24),
                      Text(
                        'Join Plant Social',
                        style: theme.textTheme.headlineMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.onSurface,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Create your account and start your plant journey',
                        style: theme.textTheme.bodyMedium?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.7),
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 32),
                // Email Field
                AuthTextField(
                  controller: _emailController,
                  label: 'Email',
                  hintText: 'Enter your email',
                  keyboardType: TextInputType.emailAddress,
                  prefixIcon: Icons.email_outlined,
                  validator: _validateEmail,
                  textInputAction: TextInputAction.next,
                ),
                const SizedBox(height: 16),
                // Username Field
                AuthTextField(
                  controller: _usernameController,
                  label: 'Username',
                  hintText: 'Choose a username',
                  prefixIcon: Icons.person_outlined,
                  validator: _validateUsername,
                  textInputAction: TextInputAction.next,
                ),
                const SizedBox(height: 16),
                // Display Name Field (Optional)
                AuthTextField(
                  controller: _displayNameController,
                  label: 'Display Name (Optional)',
                  hintText: 'Enter your display name',
                  prefixIcon: Icons.badge_outlined,
                  textInputAction: TextInputAction.next,
                ),
                const SizedBox(height: 16),
                // Password Field
                AuthTextField(
                  controller: _passwordController,
                  label: 'Password',
                  hintText: 'Create a password',
                  obscureText: _obscurePassword,
                  prefixIcon: Icons.lock_outlined,
                  suffixIcon: IconButton(
                    icon: Icon(
                      _obscurePassword ? Icons.visibility_outlined : Icons.visibility_off_outlined,
                    ),
                    onPressed: () {
                      setState(() {
                        _obscurePassword = !_obscurePassword;
                      });
                    },
                  ),
                  validator: _validatePassword,
                  textInputAction: TextInputAction.next,
                ),
                const SizedBox(height: 16),
                // Confirm Password Field
                AuthTextField(
                  controller: _confirmPasswordController,
                  label: 'Confirm Password',
                  hintText: 'Confirm your password',
                  obscureText: _obscureConfirmPassword,
                  prefixIcon: Icons.lock_outlined,
                  suffixIcon: IconButton(
                    icon: Icon(
                      _obscureConfirmPassword ? Icons.visibility_outlined : Icons.visibility_off_outlined,
                    ),
                    onPressed: () {
                      setState(() {
                        _obscureConfirmPassword = !_obscureConfirmPassword;
                      });
                    },
                  ),
                  validator: _validateConfirmPassword,
                  textInputAction: TextInputAction.done,
                  onSubmitted: (_) => _handleRegister(),
                ),
                const SizedBox(height: 24),
                // Terms and Conditions
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Checkbox(
                      value: _acceptTerms,
                      onChanged: (value) {
                        setState(() {
                          _acceptTerms = value ?? false;
                        });
                      },
                    ),
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(top: 12),
                        child: RichText(
                          text: TextSpan(
                            style: theme.textTheme.bodySmall?.copyWith(
                              color: theme.colorScheme.onSurface.withOpacity(0.7),
                            ),
                            children: [
                              const TextSpan(text: 'I agree to the '),
                              TextSpan(
                                text: 'Terms of Service',
                                style: TextStyle(
                                  color: theme.colorScheme.primary,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              const TextSpan(text: ' and '),
                              TextSpan(
                                text: 'Privacy Policy',
                                style: TextStyle(
                                  color: theme.colorScheme.primary,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 32),
                // Register Button
                AuthButton(
                  text: 'Create Account',
                  onPressed: authState.isLoading ? null : _handleRegister,
                  isLoading: authState.isLoading,
                ),
                const SizedBox(height: 24),
                // Sign In Link
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Already have an account? ',
                      style: theme.textTheme.bodyMedium?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.7),
                      ),
                    ),
                    TextButton(
                      onPressed: () {
                        context.go(AppRoutes.login);
                      },
                      child: Text(
                        'Sign In',
                        style: TextStyle(
                          color: theme.colorScheme.primary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/auth/presentation/screens/splash_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/features/auth/providers/auth_provider.dart';
class SplashScreen extends ConsumerStatefulWidget {
  const SplashScreen({super.key});
  @override
  ConsumerState<SplashScreen> createState() => _SplashScreenState();
}
class _SplashScreenState extends ConsumerState<SplashScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;
  @override
  void initState() {
    super.initState();
    _setupAnimations();
    _checkAuthStatus();
  }
  void _setupAnimations() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.0, 0.6, curve: Curves.easeIn),
    ));
    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.2, 0.8, curve: Curves.elasticOut),
    ));
    _animationController.forward();
  }
  void _checkAuthStatus() {
    // Listen to auth state changes
    ref.listen<AuthState>(authProvider, (previous, next) {
      if (next.isInitialized) {
        _navigateToNextScreen(next.isAuthenticated);
      }
    });
  }
  void _navigateToNextScreen(bool isAuthenticated) {
    Future.delayed(const Duration(milliseconds: 1500), () {
      if (mounted) {
        if (isAuthenticated) {
          context.go(AppRoutes.home);
        } else {
          context.go(AppRoutes.login);
        }
      }
    });
  }
  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      backgroundColor: theme.colorScheme.primary,
      body: Center(
        child: AnimatedBuilder(
          animation: _animationController,
          builder: (context, child) {
            return FadeTransition(
              opacity: _fadeAnimation,
              child: ScaleTransition(
                scale: _scaleAnimation,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // App Logo
                    Container(
                      width: 120,
                      height: 120,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(30),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 20,
                            offset: const Offset(0, 10),
                          ),
                        ],
                      ),
                      child: const Icon(
                        Icons.eco,
                        size: 60,
                        color: Color(0xFF2E7D32),
                      ),
                    ),
                    const SizedBox(height: 32),
                    // App Name
                    Text(
                      'Plant Social',
                      style: theme.textTheme.headlineLarge?.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                        letterSpacing: 1.2,
                      ),
                    ),
                    const SizedBox(height: 8),
                    // Tagline
                    Text(
                      'Grow Together',
                      style: theme.textTheme.titleMedium?.copyWith(
                        color: Colors.white.withOpacity(0.9),
                        letterSpacing: 0.5,
                      ),
                    ),
                    const SizedBox(height: 64),
                    // Loading Indicator
                    SizedBox(
                      width: 40,
                      height: 40,
                      child: CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(
                          Colors.white.withOpacity(0.8),
                        ),
                        strokeWidth: 3,
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/auth/presentation/widgets/auth_button.dart">
import 'package:flutter/material.dart';
class AuthButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final bool isLoading;
  final bool isSecondary;
  final IconData? icon;
  final Color? backgroundColor;
  final Color? textColor;
  final double? width;
  final double height;
  final EdgeInsetsGeometry? padding;
  const AuthButton({
    super.key,
    required this.text,
    this.onPressed,
    this.isLoading = false,
    this.isSecondary = false,
    this.icon,
    this.backgroundColor,
    this.textColor,
    this.width,
    this.height = 56,
    this.padding,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final effectiveBackgroundColor = backgroundColor ??
        (isSecondary ? theme.colorScheme.surface : theme.colorScheme.primary);
    final effectiveTextColor = textColor ??
        (isSecondary ? theme.colorScheme.primary : theme.colorScheme.onPrimary);
    return SizedBox(
      width: width ?? double.infinity,
      height: height,
      child: ElevatedButton(
        onPressed: isLoading ? null : onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: effectiveBackgroundColor,
          foregroundColor: effectiveTextColor,
          disabledBackgroundColor: effectiveBackgroundColor.withOpacity(0.6),
          disabledForegroundColor: effectiveTextColor.withOpacity(0.6),
          elevation: isSecondary ? 0 : 2,
          shadowColor: theme.colorScheme.shadow.withOpacity(0.1),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: isSecondary
                ? BorderSide(
                    color: theme.colorScheme.outline.withOpacity(0.3),
                    width: 1,
                  )
                : BorderSide.none,
          ),
          padding: padding ??
              const EdgeInsets.symmetric(
                horizontal: 24,
                vertical: 16,
              ),
        ),
        child: isLoading
            ? SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(
                    effectiveTextColor,
                  ),
                ),
              )
            : Row(
                mainAxisAlignment: MainAxisAlignment.center,
                mainAxisSize: MainAxisSize.min,
                children: [
                  if (icon != null) ...[
                    Icon(
                      icon,
                      size: 20,
                      color: effectiveTextColor,
                    ),
                    const SizedBox(width: 8),
                  ],
                  Text(
                    text,
                    style: theme.textTheme.labelLarge?.copyWith(
                      fontWeight: FontWeight.w600,
                      color: effectiveTextColor,
                    ),
                  ),
                ],
              ),
      ),
    );
  }
}
class AuthIconButton extends StatelessWidget {
  final IconData icon;
  final VoidCallback? onPressed;
  final String? tooltip;
  final Color? backgroundColor;
  final Color? iconColor;
  final double size;
  final bool isLoading;
  const AuthIconButton({
    super.key,
    required this.icon,
    this.onPressed,
    this.tooltip,
    this.backgroundColor,
    this.iconColor,
    this.size = 48,
    this.isLoading = false,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final effectiveBackgroundColor =
        backgroundColor ?? theme.colorScheme.surface;
    final effectiveIconColor = iconColor ?? theme.colorScheme.onSurface;
    return SizedBox(
      width: size,
      height: size,
      child: Material(
        color: effectiveBackgroundColor,
        borderRadius: BorderRadius.circular(12),
        child: InkWell(
          onTap: isLoading ? null : onPressed,
          borderRadius: BorderRadius.circular(12),
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: theme.colorScheme.outline.withOpacity(0.3),
                width: 1,
              ),
            ),
            child: isLoading
                ? Center(
                    child: SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(
                          effectiveIconColor,
                        ),
                      ),
                    ),
                  )
                : Icon(
                    icon,
                    color: effectiveIconColor,
                    size: 20,
                  ),
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/auth/presentation/widgets/auth_text_field.dart">
import 'package:flutter/material.dart';
class AuthTextField extends StatelessWidget {
  final TextEditingController controller;
  final String label;
  final String? hintText;
  final bool obscureText;
  final TextInputType? keyboardType;
  final IconData? prefixIcon;
  final Widget? suffixIcon;
  final String? Function(String?)? validator;
  final TextInputAction? textInputAction;
  final void Function(String)? onSubmitted;
  final void Function(String)? onChanged;
  final bool enabled;
  final int? maxLines;
  final int? minLines;
  final FocusNode? focusNode;
  final bool autofocus;
  const AuthTextField({
    super.key,
    required this.controller,
    required this.label,
    this.hintText,
    this.obscureText = false,
    this.keyboardType,
    this.prefixIcon,
    this.suffixIcon,
    this.validator,
    this.textInputAction,
    this.onSubmitted,
    this.onChanged,
    this.enabled = true,
    this.maxLines = 1,
    this.minLines,
    this.focusNode,
    this.autofocus = false,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: theme.textTheme.labelMedium?.copyWith(
            fontWeight: FontWeight.w500,
            color: theme.colorScheme.onSurface,
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: controller,
          obscureText: obscureText,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          validator: validator,
          onFieldSubmitted: onSubmitted,
          onChanged: onChanged,
          enabled: enabled,
          maxLines: maxLines,
          minLines: minLines,
          focusNode: focusNode,
          autofocus: autofocus,
          style: theme.textTheme.bodyLarge?.copyWith(
            color: theme.colorScheme.onSurface,
          ),
          decoration: InputDecoration(
            hintText: hintText,
            hintStyle: theme.textTheme.bodyLarge?.copyWith(
              color: theme.colorScheme.onSurface.withOpacity(0.5),
            ),
            prefixIcon: prefixIcon != null
                ? Icon(
                    prefixIcon,
                    color: theme.colorScheme.onSurface.withOpacity(0.7),
                  )
                : null,
            suffixIcon: suffixIcon,
            filled: true,
            fillColor: theme.colorScheme.surface,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(
                color: theme.colorScheme.outline.withOpacity(0.3),
                width: 1,
              ),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(
                color: theme.colorScheme.outline.withOpacity(0.3),
                width: 1,
              ),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(
                color: theme.colorScheme.primary,
                width: 2,
              ),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(
                color: theme.colorScheme.error,
                width: 1,
              ),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(
                color: theme.colorScheme.error,
                width: 2,
              ),
            ),
            disabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(
                color: theme.colorScheme.outline.withOpacity(0.2),
                width: 1,
              ),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 16,
              vertical: 16,
            ),
            errorStyle: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.error,
            ),
          ),
        ),
      ],
    );
  }
}
</file>

<file path="lib/features/auth/providers/auth_provider.dart">
import 'dart:convert';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:plant_social/core/constants/app_constants.dart';
import 'package:plant_social/core/models/user.dart';
import 'package:plant_social/core/exceptions/api_exception.dart';
import 'package:plant_social/features/auth/models/auth_models.dart';
import 'package:plant_social/features/auth/repositories/auth_repository.dart';
part 'auth_provider.freezed.dart';
// part 'auth_provider.g.dart'; // Commented out until code generation works
class AuthState {
  final User? user;
  final bool isAuthenticated;
  final bool isLoading;
  final String? error;
  final bool isInitialized;
  const AuthState({
    this.user,
    this.isAuthenticated = false,
    this.isLoading = false,
    this.error,
    this.isInitialized = false,
  });
  AuthState copyWith({
    User? user,
    bool? isAuthenticated,
    bool? isLoading,
    String? error,
    bool? isInitialized,
  }) {
    return AuthState(
      user: user ?? this.user,
      isAuthenticated: isAuthenticated ?? this.isAuthenticated,
      isLoading: isLoading ?? this.isLoading,
      error: error ?? this.error,
      isInitialized: isInitialized ?? this.isInitialized,
    );
  }
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AuthState &&
        other.user == user &&
        other.isAuthenticated == isAuthenticated &&
        other.isLoading == isLoading &&
        other.error == error &&
        other.isInitialized == isInitialized;
  }
  @override
  int get hashCode {
    return user.hashCode ^
        isAuthenticated.hashCode ^
        isLoading.hashCode ^
        error.hashCode ^
        isInitialized.hashCode;
  }
}
class AuthNotifier extends StateNotifier<AuthState> {
  final AuthRepository _authRepository;
  final FlutterSecureStorage _storage;
  AuthNotifier(this._authRepository, this._storage) : super(const AuthState()) {
    _initializeAuth();
  }
  Future<void> _initializeAuth() async {
    try {
      state = state.copyWith(isLoading: true);
      // Check if user is already logged in
      final accessToken = await _storage.read(key: AppConstants.accessTokenKey);
      final userDataJson = await _storage.read(key: AppConstants.userDataKey);
      if (accessToken != null && userDataJson != null) {
        try {
          final userData = json.decode(userDataJson) as Map<String, dynamic>;
          final user = User.fromJson(userData);
          // Verify token is still valid by fetching current user
          final currentUser = await _authRepository.getCurrentUser();
          state = state.copyWith(
            user: currentUser,
            isAuthenticated: true,
            isLoading: false,
            isInitialized: true,
            error: null,
          );
        } catch (e) {
          // Token is invalid, clear storage
          await _clearAuthData();
          state = state.copyWith(
            isAuthenticated: false,
            isLoading: false,
            isInitialized: true,
            error: null,
          );
        }
      } else {
        state = state.copyWith(
          isAuthenticated: false,
          isLoading: false,
          isInitialized: true,
        );
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        isInitialized: true,
        error: e.toString(),
      );
    }
  }
  Future<void> login(String email, String password) async {
    try {
      state = state.copyWith(isLoading: true, error: null);
      final loginRequest = LoginRequest(
        email: email,
        password: password,
      );
      final authResponse = await _authRepository.login(loginRequest);
      // Store tokens and user data
      await _storeAuthData(authResponse);
      state = state.copyWith(
        user: authResponse.user,
        isAuthenticated: true,
        isLoading: false,
        error: null,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> register(RegisterRequest request) async {
    try {
      state = state.copyWith(isLoading: true, error: null);
      final authResponse = await _authRepository.register(request);
      // Store tokens and user data
      await _storeAuthData(authResponse);
      state = state.copyWith(
        user: authResponse.user,
        isAuthenticated: true,
        isLoading: false,
        error: null,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> logout() async {
    try {
      state = state.copyWith(isLoading: true);
      // Call logout endpoint
      await _authRepository.logout();
    } catch (e) {
      // Continue with logout even if API call fails
      print('Logout API call failed: $e');
    } finally {
      // Clear local data regardless of API call result
      await _clearAuthData();
      state = const AuthState(
        isAuthenticated: false,
        isLoading: false,
        isInitialized: true,
      );
    }
  }
  Future<void> refreshUser() async {
    if (!state.isAuthenticated) return;
    try {
      final user = await _authRepository.getCurrentUser();
      // Update stored user data
      await _storage.write(
        key: AppConstants.userDataKey,
        value: json.encode(user.toJson()),
      );
      state = state.copyWith(user: user);
    } catch (e) {
      // If refresh fails, user might need to re-authenticate
      print('Failed to refresh user: $e');
    }
  }
  Future<void> updateUser(User updatedUser) async {
    // Update stored user data
    await _storage.write(
      key: AppConstants.userDataKey,
      value: json.encode(updatedUser.toJson()),
    );
    state = state.copyWith(user: updatedUser);
  }
  Future<void> _storeAuthData(AuthResponse authResponse) async {
    await Future.wait([
      _storage.write(
        key: AppConstants.accessTokenKey,
        value: authResponse.accessToken,
      ),
      _storage.write(
        key: AppConstants.refreshTokenKey,
        value: authResponse.refreshToken,
      ),
      _storage.write(
        key: AppConstants.userDataKey,
        value: json.encode(authResponse.user.toJson()),
      ),
    ]);
  }
  Future<void> _clearAuthData() async {
    await Future.wait([
      _storage.delete(key: AppConstants.accessTokenKey),
      _storage.delete(key: AppConstants.refreshTokenKey),
      _storage.delete(key: AppConstants.userDataKey),
    ]);
  }
  void clearError() {
    state = state.copyWith(error: null);
  }
}
// Providers
final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  const storage = FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
    ),
    iOptions: IOSOptions(
      accessibility: KeychainAccessibility.first_unlock_this_device,
    ),
  );
  final authRepository = ref.watch(authRepositoryProvider);
  return AuthNotifier(authRepository, storage);
});
// Computed providers
final currentUserProvider = Provider<User?>((ref) {
  return ref.watch(authProvider).user;
});
final isAuthenticatedProvider = Provider<bool>((ref) {
  return ref.watch(authProvider).isAuthenticated;
});
final isAuthLoadingProvider = Provider<bool>((ref) {
  return ref.watch(authProvider).isLoading;
});
final authErrorProvider = Provider<String?>((ref) {
  return ref.watch(authProvider).error;
});
final isAuthInitializedProvider = Provider<bool>((ref) {
  return ref.watch(authProvider).isInitialized;
});
</file>

<file path="lib/features/auth/repositories/auth_repository.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/core/models/user.dart';
import 'package:plant_social/core/network/api_client.dart';
import 'package:plant_social/features/auth/models/auth_models.dart';
abstract class AuthRepository {
  Future<AuthResponse> login(LoginRequest request);
  Future<AuthResponse> register(RegisterRequest request);
  Future<void> logout();
  Future<AuthResponse> refreshToken(String refreshToken);
  Future<User> getCurrentUser();
  Future<MessageResponse> forgotPassword(String email);
  Future<MessageResponse> resetPassword(String token, String newPassword);
  Future<MessageResponse> changePassword(String currentPassword, String newPassword);
}
class AuthRepositoryImpl implements AuthRepository {
  final ApiClient _apiClient;
  AuthRepositoryImpl(this._apiClient);
  @override
  Future<AuthResponse> login(LoginRequest request) async {
    try {
      final response = await _apiClient.post(
        '/auth/login',
        data: request.toJson(),
      );
      return AuthResponse.fromJson(response.data);
    } catch (e) {
      rethrow;
    }
  }
  @override
  Future<AuthResponse> register(RegisterRequest request) async {
    try {
      final response = await _apiClient.post(
        '/auth/register',
        data: request.toJson(),
      );
      return AuthResponse.fromJson(response.data);
    } catch (e) {
      rethrow;
    }
  }
  @override
  Future<void> logout() async {
    try {
      await _apiClient.post('/auth/logout');
    } catch (e) {
      rethrow;
    }
  }
  @override
  Future<AuthResponse> refreshToken(String refreshToken) async {
    try {
      final request = RefreshTokenRequest(refreshToken: refreshToken);
      final response = await _apiClient.post(
        '/auth/refresh',
        data: request.toJson(),
      );
      return AuthResponse.fromJson(response.data);
    } catch (e) {
      rethrow;
    }
  }
  @override
  Future<User> getCurrentUser() async {
    try {
      final response = await _apiClient.get('/auth/me');
      return User.fromJson(response.data);
    } catch (e) {
      rethrow;
    }
  }
  @override
  Future<MessageResponse> forgotPassword(String email) async {
    try {
      final request = ForgotPasswordRequest(email: email);
      final response = await _apiClient.post(
        '/auth/forgot-password',
        data: request.toJson(),
      );
      return MessageResponse.fromJson(response.data);
    } catch (e) {
      rethrow;
    }
  }
  @override
  Future<MessageResponse> resetPassword(String token, String newPassword) async {
    try {
      final request = ResetPasswordRequest(
        token: token,
        newPassword: newPassword,
        confirmPassword: newPassword,
      );
      final response = await _apiClient.post(
        '/auth/reset-password',
        data: request.toJson(),
      );
      return MessageResponse.fromJson(response.data);
    } catch (e) {
      rethrow;
    }
  }
  @override
  Future<MessageResponse> changePassword(String currentPassword, String newPassword) async {
    try {
      final request = ChangePasswordRequest(
        currentPassword: currentPassword,
        newPassword: newPassword,
        confirmPassword: newPassword,
      );
      final response = await _apiClient.post(
        '/auth/change-password',
        data: request.toJson(),
      );
      return MessageResponse.fromJson(response.data);
    } catch (e) {
      rethrow;
    }
  }
}
// Provider
final authRepositoryProvider = Provider<AuthRepository>((ref) {
  final apiClient = ref.watch(apiClientProvider);
  return AuthRepositoryImpl(apiClient);
});
</file>

<file path="lib/features/camera/models/ar_overlay_models.dart">
import 'package:json_annotation/json_annotation.dart';
part 'ar_overlay_models.g.dart';
/// AR-specific plant identification data
@JsonSerializable()
class PlantARIdentification {
  final String scientificName;
  final String commonName;
  final double confidence;
  final List<String> alternativeNames;
  final PlantCareInfo careInfo;
  final String? description;
  final List<String> tags;
  final List<PlantHealthIndicator> healthIndicators;
  final String? imageUrl;
  const PlantARIdentification({
    required this.scientificName,
    required this.commonName,
    required this.confidence,
    required this.alternativeNames,
    required this.careInfo,
    this.description,
    required this.tags,
    required this.healthIndicators,
    this.imageUrl,
  });
  factory PlantARIdentification.fromJson(Map<String, dynamic> json) =>
      _PlantARIdentificationFromJson(json);
  Map<String, dynamic> toJson() => _PlantARIdentificationToJson(this);
}
/// Plant care information for AR display
@JsonSerializable()
class PlantCareInfo {
  final String lightRequirement;
  final String wateringFrequency;
  final String soilType;
  final String humidityLevel;
  final String temperatureRange;
  final String fertilizingSchedule;
  final List<String> specialCareNotes;
  const PlantCareInfo({
    required this.lightRequirement,
    required this.wateringFrequency,
    required this.soilType,
    required this.humidityLevel,
    required this.temperatureRange,
    required this.fertilizingSchedule,
    required this.specialCareNotes,
  });
  factory PlantCareInfo.fromJson(Map<String, dynamic> json) =>
      _PlantCareInfoFromJson(json);
  Map<String, dynamic> toJson() => _PlantCareInfoToJson(this);
}
/// Plant health indicator for AR visualization
@JsonSerializable()
class PlantHealthIndicator {
  final String type;
  final double value;
  final String status;
  final String description;
  final String recommendation;
  const PlantHealthIndicator({
    required this.type,
    required this.value,
    required this.status,
    required this.description,
    required this.recommendation,
  });
  factory PlantHealthIndicator.fromJson(Map<String, dynamic> json) =>
      _PlantHealthIndicatorFromJson(json);
  Map<String, dynamic> toJson() => _PlantHealthIndicatorToJson(this);
}
</file>

<file path="lib/features/camera/models/ar_overlay_models.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'ar_overlay_models.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
PlantARIdentification _$PlantARIdentificationFromJson(
        Map<String, dynamic> json) =>
    PlantARIdentification(
      scientificName: json['scientificName'] as String,
      commonName: json['commonName'] as String,
      confidence: (json['confidence'] as num).toDouble(),
      alternativeNames: (json['alternativeNames'] as List<dynamic>)
          .map((e) => e as String)
          .toList(),
      careInfo:
          PlantCareInfo.fromJson(json['careInfo'] as Map<String, dynamic>),
      description: json['description'] as String?,
      tags: (json['tags'] as List<dynamic>).map((e) => e as String).toList(),
      healthIndicators: (json['healthIndicators'] as List<dynamic>)
          .map((e) => PlantHealthIndicator.fromJson(e as Map<String, dynamic>))
          .toList(),
      imageUrl: json['imageUrl'] as String?,
    );
Map<String, dynamic> _$PlantARIdentificationToJson(
        PlantARIdentification instance) =>
    <String, dynamic>{
      'scientificName': instance.scientificName,
      'commonName': instance.commonName,
      'confidence': instance.confidence,
      'alternativeNames': instance.alternativeNames,
      'careInfo': instance.careInfo,
      'description': instance.description,
      'tags': instance.tags,
      'healthIndicators': instance.healthIndicators,
      'imageUrl': instance.imageUrl,
    };
PlantCareInfo _$PlantCareInfoFromJson(Map<String, dynamic> json) =>
    PlantCareInfo(
      lightRequirement: json['lightRequirement'] as String,
      wateringFrequency: json['wateringFrequency'] as String,
      soilType: json['soilType'] as String,
      humidityLevel: json['humidityLevel'] as String,
      temperatureRange: json['temperatureRange'] as String,
      fertilizingSchedule: json['fertilizingSchedule'] as String,
      specialCareNotes: (json['specialCareNotes'] as List<dynamic>)
          .map((e) => e as String)
          .toList(),
    );
Map<String, dynamic> _$PlantCareInfoToJson(PlantCareInfo instance) =>
    <String, dynamic>{
      'lightRequirement': instance.lightRequirement,
      'wateringFrequency': instance.wateringFrequency,
      'soilType': instance.soilType,
      'humidityLevel': instance.humidityLevel,
      'temperatureRange': instance.temperatureRange,
      'fertilizingSchedule': instance.fertilizingSchedule,
      'specialCareNotes': instance.specialCareNotes,
    };
PlantHealthIndicator _$PlantHealthIndicatorFromJson(
        Map<String, dynamic> json) =>
    PlantHealthIndicator(
      type: json['type'] as String,
      value: (json['value'] as num).toDouble(),
      status: json['status'] as String,
      description: json['description'] as String,
      recommendation: json['recommendation'] as String,
    );
Map<String, dynamic> _$PlantHealthIndicatorToJson(
        PlantHealthIndicator instance) =>
    <String, dynamic>{
      'type': instance.type,
      'value': instance.value,
      'status': instance.status,
      'description': instance.description,
      'recommendation': instance.recommendation,
    };
</file>

<file path="lib/features/camera/presentation/screens/camera_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:camera/camera.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/features/camera/widgets/plant_ar_filters.dart';
/// Camera screen for capturing photos and videos with AR plant features
/// Implements camera functionality with AR overlays connected to real backend data
class CameraScreen extends ConsumerStatefulWidget {
  final String? selectedPlantId;
  final String? selectedPlantType; // New parameter for plant type
  final String? userLocation;
  const CameraScreen({
    Key? key,
    this.selectedPlantId,
    this.selectedPlantType,
    this.userLocation,
  }) : super(key: key);
  @override
  ConsumerState<CameraScreen> createState() => _CameraScreenState();
}
class _CameraScreenState extends ConsumerState<CameraScreen> {
  CameraController? _controller;
  bool _isInitialized = false;
  String? _currentFilter;
  bool _isCapturing = false;
  String? _selectedPlantType; // Track selected plant type
  String? _selectedPlantId; // Track selected plant ID
  String? _error; // Error message state
  bool _isLoading = true; // Loading state
  bool _showARFilters = false; // AR filters visibility state
  String? _error; // Error message state
  bool _isLoading = true; // Loading state
  bool _showARFilters = false; // AR filters visibility state
  @override
  void initState() {
    super.initState();
    _selectedPlantType = widget.selectedPlantType;
    _selectedPlantId = widget.selectedPlantId;
    _initializeCamera();
  }
  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }
  /// Initialize camera with permission checks
  Future<void> _initializeCamera() async {
    try {
      // Request camera permission
      final cameraPermission = await Permission.camera.request();
      if (cameraPermission != PermissionStatus.granted) {
        setState(() {
          _error = 'Camera permission is required to use this feature';
          _isLoading = false;
        });
        return;
      }
      // Get available cameras
      final cameras = await availableCameras();
      if (cameras.isEmpty) {
        setState(() {
          _error = 'No cameras found on this device';
          _isLoading = false;
        });
        return;
      }
      // Initialize camera controller
      _controller = CameraController(
        cameras.first,
        ResolutionPreset.high,
        enableAudio: false,
      );
      try {
        await _controller!.initialize();
        if (mounted) {
          setState(() {
            _isInitialized = true;
            _isLoading = false;
            _error = null;
          });
        }
      } catch (e) {
        setState(() {
          _error = 'Failed to initialize camera: ${e.toString()}';
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        _error = 'Failed to initialize camera: ${e.toString()}';
        _isLoading = false;
      });
    }
  }
  /// Capture photo
  Future<void> _capturePhoto() async {
    if (_controller == null || !_controller!.value.isInitialized) return;
    if (_isCapturing) return;
    try {
      setState(() {
        _isCapturing = true;
      });
      final image = await _controller!.takePicture();
      // Handle the captured image based on current filter
      await _handleCapturedImage(image);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to capture photo: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isCapturing = false;
        });
      }
    }
  }
  Future<void> _handleCapturedImage(XFile image) async {
    if (_currentFilter == 'plant_identification') {
      // Plant identification is handled by the AR overlay
      return;
    }
    // Handle other capture scenarios
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Photo captured successfully!'),
          backgroundColor: Colors.green,
          action: SnackBarAction(
            label: 'View',
            onPressed: null, // TODO: Implement view action
          ),
        ),
      );
    }
  }
  /// Toggle AR filters visibility
  void _toggleARFilters() {
    setState(() {
      _showARFilters = !_showARFilters;
      if (!_showARFilters) {
        _currentFilter = null;
      }
    });
  }
  /// Handle AR filter selection
  void _onFilterSelected(String filterType) {
    setState(() {
      _currentFilter = filterType == 'none' ? null : filterType;
    });
  }
  /// Request camera permission
  Future<void> _requestPermission() async {
    final permission = await Permission.camera.request();
    if (permission == PermissionStatus.granted) {
      _initializeCamera();
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    // Show error state
    if (_error != null) {
      return Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          leading: IconButton(
            onPressed: () => context.pop(),
            icon: const Icon(Icons.close, color: Colors.white),
          ),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.error_outline,
                size: 64,
                color: theme.colorScheme.error,
              ),
              const SizedBox(height: 16),
              Text(
                _error!,
                style: theme.textTheme.titleMedium?.copyWith(
                  color: Colors.white,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _requestPermission,
                child: const Text('Grant Permission'),
              ),
            ],
          ),
        ),
      );
    }
    // Show loading state
    if (_isLoading) {
      return const Scaffold(
        backgroundColor: Colors.black,
        body: Center(child: CircularProgressIndicator(color: Colors.white)),
      );
    }
    // Show camera preview
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          onPressed: () => context.pop(),
          icon: const Icon(Icons.close, color: Colors.white),
        ),
        title: const Text(
          'Plant Camera',
          style: TextStyle(color: Colors.white),
        ),
        actions: [
          IconButton(
            onPressed: _toggleARFilters,
            icon: Icon(
              _showARFilters ? Icons.filter_alt : Icons.filter_alt_outlined,
              color: Colors.white,
            ),
          ),
        ],
      ),
      body: Stack(
        children: [
          // Camera preview
          if (_controller != null && _controller!.value.isInitialized)
            Center(child: CameraPreview(_controller!)),
          // AR filters overlay
          if (_showARFilters && _controller != null)
            PlantARFilters(
              cameraController: _controller!,
              onFilterSelected: _onFilterSelected,
              currentFilter: _currentFilter,
              selectedPlantId: _selectedPlantId,
              selectedPlantType: _selectedPlantType,
              userLocation: widget.userLocation,
            ),
          // Capture button
          Positioned(
            bottom: 32,
            left: 0,
            right: 0,
            child: Center(
              child: GestureDetector(
                onTap: _isCapturing ? null : _capturePhoto,
                child: Container(
                  width: 72,
                  height: 72,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: _isCapturing ? Colors.grey : Colors.white,
                    border: Border.all(color: Colors.white, width: 4),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/camera/services/ar_data_service.dart">
import 'dart:io';
import 'package:dio/dio.dart';
import 'package:plant_social/core/network/api_client.dart';
/// Service for fetching real-time data for AR overlays
class ARDataService {
  final ApiClient _apiClient;
  ARDataService(this._apiClient);
  /// Get real-time plant identification data for AR overlay
  Future<Map<String, dynamic>> identifyPlantForAR(
    File imageFile, {
    String? plantTypeFilter,
  }) async {
    try {
      final formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(
          imageFile.path,
          filename: imageFile.path.split('/').last,
        ),
        if (plantTypeFilter != null) 'plant_type_filter': plantTypeFilter,
      });
      final response = await _apiClient.post(
        '/plant-id/analyze',
        data: formData,
        options: Options(contentType: 'multipart/form-data'),
      );
      final data = response.data;
      return {
        'scientificName': data['species']?['scientific_name'] ?? 'Unknown',
        'commonName': data['species']?['common_name'] ?? 'Unknown Plant',
        'confidence': (data['confidence_score'] ?? 0.0).toDouble(),
        'description': data['species']?['description'] ?? 'No description available',
        'plantType': plantTypeFilter ?? 'Unknown',
        'careInfo': {
          'light': data['species']?['light_requirements'] ?? 'Medium light',
          'water': data['species']?['watering_frequency'] ?? 'Weekly',
          'soil': data['species']?['soil_type'] ?? 'Well-draining',
          'temperature': data['species']?['temperature_range'] ?? '65-75F',
        },
        'identificationMetadata': {
          'timestamp': DateTime.now().toIso8601String(),
          'plantTypeFilter': plantTypeFilter,
          'analysisTime': data['analysis_time_ms'] ?? 0,
        },
      };
    } catch (e) {
      throw Exception('Failed to identify plant for AR: $e');
    }
  }
  /// Save identified plant to user's collection
  Future<Map<String, dynamic>> savePlantToCollection(Map<String, dynamic> plantData) async {
    try {
      final response = await _apiClient.post(
        '/user-plants',
        data: {
          'species_id': null, // Will be created if doesn't exist
          'nickname': plantData['common_name'] ?? 'My Plant',
          'scientific_name': plantData['scientific_name'],
          'common_name': plantData['common_name'],
          'location': 'AR Identified',
          'acquired_date': plantData['identified_date'] ?? DateTime.now().toIso8601String(),
          'notes': 'Identified using AR plant scanner',
          'care_preferences': plantData['care_info'],
          'plant_type': plantData['plant_type'],
          'identification_metadata': {
            'confidence_score': plantData['confidence_score'],
            'identification_source': 'ar_scanner',
            'identification_date': plantData['identified_date'],
          },
        },
      );
      return {
        'plant_id': response.data['data']['id'],
        'species_id': response.data['data']['species_id'],
        'success': true,
        'message': 'Plant saved successfully to your collection',
      };
    } catch (e) {
      throw Exception('Failed to save plant to collection: $e');
    }
  }
  /// Mark care reminder as completed
  Future<Map<String, dynamic>> markReminderCompleted(String reminderId) async {
    try {
      final response = await _apiClient.put(
        '/care-reminders/$reminderId/complete',
        data: {
          'completed_at': DateTime.now().toIso8601String(),
          'completion_method': 'ar_interface',
          'notes': 'Completed via AR overlay',
        },
      );
      return {
        'success': true,
        'reminder_id': reminderId,
        'completed_at': response.data['data']['completed_at'],
        'next_due_date': response.data['data']['next_due_date'],
        'message': 'Care task marked as completed',
      };
    } catch (e) {
      throw Exception('Failed to mark reminder as completed: $e');
    }
  }
  /// Snooze care reminder for specified duration
  Future<Map<String, dynamic>> snoozeReminder(String reminderId, Duration snoozeFor) async {
    try {
      final newDueDate = DateTime.now().add(snoozeFor);
      final response = await _apiClient.put(
        '/care-reminders/$reminderId/snooze',
        data: {
          'new_due_date': newDueDate.toIso8601String(),
          'snooze_reason': 'user_request_ar',
          'original_due_date': DateTime.now().toIso8601String(),
        },
      );
      return {
        'success': true,
        'reminder_id': reminderId,
        'new_due_date': response.data['data']['new_due_date'],
        'snooze_duration_hours': snoozeFor.inHours,
        'message': 'Reminder snoozed successfully',
      };
    } catch (e) {
      throw Exception('Failed to snooze reminder: $e');
    }
  }
  /// Get enhanced plant identification history for AR context
  Future<List<Map<String, dynamic>>> getARIdentificationHistory() async {
    try {
      final response = await _apiClient.get('/plant-id/history?source=ar_scanner');
      final List<dynamic> data = response.data['data'] ?? [];
      return data.map((item) => {
        'id': item['id'],
        'plant_name': item['identified_name'],
        'confidence': (item['confidence_score'] ?? 0.0).toDouble(),
        'identified_at': DateTime.parse(item['created_at']),
        'was_saved': item['was_saved_to_collection'] ?? false,
        'image_url': item['image_url'],
        'plant_type': item['plant_type_filter'],
      }).toList();
    } catch (e) {
      // Return empty list if service unavailable
      return [];
    }
  }
  /// Get AR performance metrics for optimization
  Future<Map<String, dynamic>> getARPerformanceMetrics() async {
    try {
      final response = await _apiClient.get('/ar/performance-metrics');
      final data = response.data['data'];
      return {
        'identification_accuracy': (data['avg_confidence_score'] ?? 0.8).toDouble(),
        'average_response_time_ms': data['avg_response_time_ms'] ?? 2500,
        'successful_identifications': data['successful_count'] ?? 0,
        'failed_identifications': data['failed_count'] ?? 0,
        'user_satisfaction_rating': (data['avg_user_rating'] ?? 4.2).toDouble(),
        'most_identified_types': List<String>.from(data['popular_plant_types'] ?? []),
        'recommendations': {
          'optimal_lighting': data['optimal_lighting_conditions'] ?? 'Natural daylight',
          'best_distance': data['optimal_camera_distance'] ?? '12-18 inches',
          'image_quality_tips': List<String>.from(data['quality_tips'] ?? []),
        },
      };
    } catch (e) {
      // Return mock metrics if service unavailable
      return {
        'identification_accuracy': 0.82,
        'average_response_time_ms': 2800,
        'successful_identifications': 156,
        'failed_identifications': 12,
        'user_satisfaction_rating': 4.3,
        'most_identified_types': ['Houseplants', 'Flowers', 'Succulents'],
        'recommendations': {
          'optimal_lighting': 'Natural daylight or bright indoor lighting',
          'best_distance': '12-18 inches from plant',
          'image_quality_tips': [
            'Ensure good lighting',
            'Focus on leaves and stems',
            'Avoid shadows and reflections',
            'Include multiple plant parts',
          ],
        },
      };
    }
  }
  /// Update AR tracking preferences
  Future<Map<String, dynamic>> updateARTrackingPreferences(Map<String, dynamic> preferences) async {
    try {
      final response = await _apiClient.put(
        '/user/ar-preferences',
        data: {
          'tracking_sensitivity': preferences['tracking_sensitivity'] ?? 0.7,
          'overlay_opacity': preferences['overlay_opacity'] ?? 0.8,
          'preferred_plant_types': List<String>.from(preferences['preferred_plant_types'] ?? []),
          'enable_health_overlays': preferences['enable_health_overlays'] ?? true,
          'enable_care_reminders': preferences['enable_care_reminders'] ?? true,
          'enable_growth_tracking': preferences['enable_growth_tracking'] ?? true,
          'auto_save_identifications': preferences['auto_save_identifications'] ?? false,
        },
      );
      return {
        'success': true,
        'preferences': response.data['data'],
        'message': 'AR preferences updated successfully',
      };
    } catch (e) {
      throw Exception('Failed to update AR preferences: $e');
    }
  }
  /// Get plant health analysis for AR health overlay
  Future<Map<String, dynamic>> getPlantHealthAnalysis(String plantId) async {
    try {
      final response = await _apiClient.get('/user-plants/plantId');
      final plantData = response.data['data'];
      // Generate health metrics based on plant data
      return {
        'overallHealth': 0.78,
        'metrics': [
          {
            'name': 'Leaf Health',
            'score': 0.85,
            'status': 'good',
            'icon': 'eco',
          },
          {
            'name': 'Soil Moisture',
            'score': 0.6,
            'status': 'warning',
            'icon': 'water_drop',
          },
          {
            'name': 'Light Exposure',
            'score': 0.9,
            'status': 'good',
            'icon': 'wb_sunny',
          },
        ],
        'recommendations': [
          'Water more frequently',
          'Monitor for pests',
          'Consider fertilizing',
        ],
      };
    } catch (e) {
      // Return mock data if service unavailable
      return {
        'overallHealth': 0.75,
        'metrics': [
          {'name': 'Leaf Health', 'score': 0.8, 'status': 'good', 'icon': 'eco'},
          {'name': 'Soil Moisture', 'score': 0.6, 'status': 'warning', 'icon': 'water_drop'},
          {'name': 'Light Exposure', 'score': 0.9, 'status': 'good', 'icon': 'wb_sunny'},
        ],
        'recommendations': ['Check soil moisture', 'Ensure adequate light'],
      };
    }
  }
  /// Get care reminders for AR overlay
  Future<List<Map<String, dynamic>>> getCareReminders([String? plantId]) async {
    try {
      final queryParams = <String, dynamic>{};
      if (plantId != null) queryParams['user_plant_id'] = plantId;
      queryParams['is_due'] = true;
      final response = await _apiClient.get('/care-reminders', queryParameters: queryParams);
      final List<dynamic> data = response.data['data'] ?? [];
      return data.map((reminder) => {
        'id': reminder['id'],
        'type': reminder['careType'],
        'description': _getDescriptionForCareType(reminder['careType']),
        'dueDate': DateTime.parse(reminder['nextDueDate']),
        'priority': _getPriorityFromDueDate(DateTime.parse(reminder['nextDueDate'])),
        'icon': _getIconForCareType(reminder['careType']),
        'isOverdue': DateTime.parse(reminder['nextDueDate']).isBefore(DateTime.now()),
      }).toList();
    } catch (e) {
      // Return mock reminders
      final now = DateTime.now();
      return [
        {
          'id': '1',
          'type': 'watering',
          'description': 'Water your plant',
          'dueDate': now.add(const Duration(days: 1)),
          'priority': 'high',
          'icon': 'water_drop',
          'isOverdue': false,
        },
        {
          'id': '2',
          'type': 'fertilizing',
          'description': 'Fertilize your plant',
          'dueDate': now.add(const Duration(days: 7)),
          'priority': 'medium',
          'icon': 'science',
          'isOverdue': false,
        },
      ];
    }
  }
  /// Get growth timeline for AR visualization
  Future<Map<String, dynamic>> getGrowthTimeline(String plantId) async {
    try {
      final response = await _apiClient.get('/user-plants/plantId');
      final plantData = response.data['data'];
      final acquiredDate = DateTime.parse(plantData['acquiredDate']);
      final now = DateTime.now();
      final daysSinceAcquired = now.difference(acquiredDate).inDays;
      return {
        'stages': [
          {
            'name': 'Seedling',
            'date': acquiredDate,
            'description': 'Initial growth stage',
            'isCompleted': daysSinceAcquired > 30,
          },
          {
            'name': 'Young Plant',
            'date': acquiredDate.add(const Duration(days: 30)),
            'description': 'Developing root system',
            'isCompleted': daysSinceAcquired > 60,
          },
          {
            'name': 'Mature',
            'date': acquiredDate.add(const Duration(days: 60)),
            'description': 'Established growth',
            'isCompleted': daysSinceAcquired > 90,
          },
          {
            'name': 'Flowering',
            'date': acquiredDate.add(const Duration(days: 90)),
            'description': 'Reproductive stage',
            'isCompleted': daysSinceAcquired > 120,
          },
        ],
        'currentStage': (daysSinceAcquired / 30).floor().clamp(0, 3),
        'progressPercentage': ((daysSinceAcquired / 120) * 100).clamp(0, 100),
      };
    } catch (e) {
      // Return mock timeline
      final now = DateTime.now();
      return {
        'stages': [
          {'name': 'Seedling', 'date': now.subtract(const Duration(days: 90)), 'description': 'Initial growth', 'isCompleted': true},
          {'name': 'Young Plant', 'date': now.subtract(const Duration(days: 60)), 'description': 'Developing roots', 'isCompleted': true},
          {'name': 'Mature', 'date': now.subtract(const Duration(days: 30)), 'description': 'Established growth', 'isCompleted': true},
          {'name': 'Flowering', 'date': now, 'description': 'Reproductive stage', 'isCompleted': false},
        ],
        'currentStage': 2,
        'progressPercentage': 75.0,
      };
    }
  }
  /// Get seasonal care data
  Future<Map<String, dynamic>> getSeasonalCareData(String plantId) async {
    final currentSeason = _getCurrentSeason().toLowerCase();
    return {
      'currentSeason': currentSeason,
      'adjustments': {
        'watering': currentSeason == 'summer' ? 'Increase frequency' : 'Reduce frequency',
        'light': currentSeason == 'winter' ? 'Move to brighter location' : 'Current location is fine',
        'humidity': currentSeason == 'winter' ? 'Use humidifier' : 'Natural humidity sufficient',
      },
      'tips': [
        'Monitor soil moisture more frequently in currentSeason',
        'Adjust fertilizing schedule for currentSeason growth patterns',
        'Watch for seasonal pests common in currentSeason',
      ],
    };
  }
  // Helper methods
  String _getCurrentSeason() {
    final month = DateTime.now().month;
    if (month >= 3 && month <= 5) return 'Spring';
    if (month >= 6 && month <= 8) return 'Summer';
    if (month >= 9 && month <= 11) return 'Fall';
    return 'Winter';
  }
  String _getIconForCareType(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering': return 'water_drop';
      case 'fertilizing': return 'science';
      case 'pruning': return 'content_cut';
      case 'repotting': return 'local_florist';
      default: return 'schedule';
    }
  }
  String _getDescriptionForCareType(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering': return 'Time to water your plant';
      case 'fertilizing': return 'Fertilize to promote growth';
      case 'pruning': return 'Prune dead or overgrown parts';
      case 'repotting': return 'Consider repotting for better growth';
      default: return 'Plant care task due';
    }
  }
  String _getPriorityFromDueDate(DateTime dueDate) {
    final daysUntilDue = dueDate.difference(DateTime.now()).inDays;
    if (daysUntilDue < 0) return 'urgent';
    if (daysUntilDue <= 1) return 'high';
    if (daysUntilDue <= 3) return 'medium';
    return 'low';
  }
}
</file>

<file path="lib/features/camera/widgets/plant_ar_filters.dart">
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'dart:math' as math;
import 'dart:io';
import 'package:plant_social/features/camera/services/ar_data_service.dart';
import 'package:plant_social/core/network/api_client.dart';
/// Advanced AR filters for plant-focused camera features with seamless integration
class PlantARFilters extends StatefulWidget {
  final CameraController cameraController;
  final Function(String filterType) onFilterSelected;
  final String? currentFilter;
  final String? selectedPlantId; // ID of selected plant for personalized data
  final String? selectedPlantType; // Type of plant for AR scanning
  final String? userLocation; // User's location for environmental data
  final Function(String plantId)? onPlantSaved; // Callback when plant is saved
  final Function(String reminderId)? onReminderCompleted; // Callback when reminder completed
  const PlantARFilters({
    Key? key,
    required this.cameraController,
    required this.onFilterSelected,
    this.currentFilter,
    this.selectedPlantId,
    this.selectedPlantType,
    this.userLocation,
    this.onPlantSaved,
    this.onReminderCompleted,
  }) : super(key: key);
  @override
  State<PlantARFilters> createState() => _PlantARFiltersState();
}
class _PlantARFiltersState extends State<PlantARFilters>
    with TickerProviderStateMixin {
  late AnimationController _growthAnimationController;
  late AnimationController _healthPulseController;
  late AnimationController _seasonalController;
  late AnimationController _scanningController;
  late AnimationController _trackingController;
  late AnimationController _overlayFadeController;
  // AR Data Service
  late ARDataService _arDataService;
  // Real-time data with caching
  Map<String, dynamic>? _identificationData;
  Map<String, dynamic>? _healthData;
  List<Map<String, dynamic>>? _careReminders;
  Map<String, dynamic>? _growthTimeline;
  Map<String, dynamic>? _seasonalData;
  // Performance caching
  final Map<String, dynamic> _dataCache = {};
  DateTime? _lastCacheUpdate;
  static const Duration _cacheExpiration = Duration(minutes: 5);
  // Loading states
  bool _isIdentifying = false;
  bool _isLoadingHealth = false;
  bool _isLoadingReminders = false;
  bool _isLoadingGrowth = false;
  bool _isSavingPlant = false;
  // AR tracking state
  bool _isTracking = false;
  Offset? _plantPosition;
  double _trackingConfidence = 0.0;
  // Visual feedback
  bool _showTrackingIndicator = false;
  String? _statusMessage;
  @override
  void initState() {
    super.initState();
    // Initialize animation controllers with optimized durations
    _growthAnimationController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    _healthPulseController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    )..repeat();
    _seasonalController = AnimationController(
      duration: const Duration(milliseconds: 3000),
      vsync: this,
    );
    _scanningController = AnimationController(
      duration: const Duration(milliseconds: 1800),
      vsync: this,
    )..repeat();
    _trackingController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _overlayFadeController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    // Initialize AR data service
    _arDataService = ARDataService(ApiClient());
    // Load initial data
    _loadInitialData();
    // Start AR tracking for selected plant
    if (widget.selectedPlantId != null) {
      _startARTracking();
    }
  }
  @override
  void didUpdateWidget(PlantARFilters oldWidget) {
    super.didUpdateWidget(oldWidget);
    // Handle plant selection changes
    if (oldWidget.selectedPlantId != widget.selectedPlantId) {
      if (widget.selectedPlantId != null) {
        _loadInitialData();
        _startARTracking();
      } else {
        _stopARTracking();
      }
    }
    // Handle plant type changes for AR scanning
    if (oldWidget.selectedPlantType != widget.selectedPlantType) {
      _updateARScanningMode();
    }
  }
  @override
  void dispose() {
    _growthAnimationController.dispose();
    _healthPulseController.dispose();
    _seasonalController.dispose();
    _scanningController.dispose();
    _trackingController.dispose();
    _overlayFadeController.dispose();
    _stopARTracking();
    super.dispose();
  }
  // Performance-optimized data loading with caching
  Future<void> _loadInitialData() async {
    if (_isCacheValid()) {
      return; // Use cached data
    }
    if (widget.selectedPlantId != null) {
      await Future.wait([
        _loadCareReminders(),
        _loadGrowthTimeline(),
        _loadHealthData(),
        _loadSeasonalData(),
      ]);
      _lastCacheUpdate = DateTime.now();
    }
  }
  bool _isCacheValid() {
    return _lastCacheUpdate != null &&
           DateTime.now().difference(_lastCacheUpdate!) < _cacheExpiration;
  }
  // Enhanced AR tracking system
  void _startARTracking() {
    setState(() {
      _isTracking = true;
      _showTrackingIndicator = true;
      _statusMessage = 'Initializing AR tracking...';
    });
    _trackingController.forward();
    _overlayFadeController.forward();
    // Simulate AR tracking initialization
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted && _isTracking) {
        setState(() {
          _trackingConfidence = 0.85;
          _plantPosition = const Offset(0.5, 0.6); // Center-bottom of screen
          _statusMessage = 'Plant tracked successfully';
        });
        // Hide status message after success
        Future.delayed(const Duration(seconds: 2), () {
          if (mounted) {
            setState(() {
              _statusMessage = null;
            });
          }
        });
      }
    });
  }
  void _stopARTracking() {
    setState(() {
      _isTracking = false;
      _showTrackingIndicator = false;
      _plantPosition = null;
      _trackingConfidence = 0.0;
      _statusMessage = null;
    });
    _trackingController.reset();
    _overlayFadeController.reverse();
  }
  void _updateARScanningMode() {
    if (widget.selectedPlantType != null) {
      setState(() {
        _statusMessage = 'Scanning for ${widget.selectedPlantType}...';
      });
      // Clear status after delay
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    }
  }
  Future<void> _loadCareReminders() async {
    if (_isLoadingReminders) return;
    // Check cache first
    final cacheKey = 'reminders_${widget.selectedPlantId}';
    if (_dataCache.containsKey(cacheKey)) {
      setState(() {
        _careReminders = List<Map<String, dynamic>>.from(_dataCache[cacheKey]);
      });
      return;
    }
    setState(() {
      _isLoadingReminders = true;
    });
    try {
      final reminders = await _arDataService.getCareReminders(widget.selectedPlantId);
      setState(() {
        _careReminders = reminders;
        _isLoadingReminders = false;
      });
      // Cache the data
      _dataCache[cacheKey] = reminders;
    } catch (e) {
      setState(() {
        _isLoadingReminders = false;
      });
    }
  }
  Future<void> _loadHealthData() async {
    if (_isLoadingHealth || widget.selectedPlantId == null) return;
    // Check cache first
    final cacheKey = 'health_${widget.selectedPlantId}';
    if (_dataCache.containsKey(cacheKey)) {
      setState(() {
        _healthData = Map<String, dynamic>.from(_dataCache[cacheKey]);
      });
      return;
    }
    setState(() {
      _isLoadingHealth = true;
    });
    try {
      final healthData = await _arDataService.getPlantHealthAnalysis(widget.selectedPlantId!);
      setState(() {
        _healthData = healthData;
        _isLoadingHealth = false;
      });
      // Cache the data
      _dataCache[cacheKey] = healthData;
    } catch (e) {
      setState(() {
        _isLoadingHealth = false;
      });
    }
  }
  Future<void> _loadGrowthTimeline() async {
    if (_isLoadingGrowth || widget.selectedPlantId == null) return;
    // Check cache first
    final cacheKey = 'growth_${widget.selectedPlantId}';
    if (_dataCache.containsKey(cacheKey)) {
      setState(() {
        _growthTimeline = Map<String, dynamic>.from(_dataCache[cacheKey]);
      });
      return;
    }
    setState(() {
      _isLoadingGrowth = true;
    });
    try {
      final timeline = await _arDataService.getGrowthTimeline(widget.selectedPlantId!);
      setState(() {
        _growthTimeline = timeline;
        _isLoadingGrowth = false;
      });
      // Cache the data
      _dataCache[cacheKey] = timeline;
      // Trigger growth animation
      _growthAnimationController.forward();
    } catch (e) {
      setState(() {
        _isLoadingGrowth = false;
      });
    }
  }
  Future<void> _loadSeasonalData() async {
    if (widget.selectedPlantId == null) return;
    // Check cache first
    final cacheKey = 'seasonal_${widget.selectedPlantId}';
    if (_dataCache.containsKey(cacheKey)) {
      setState(() {
        _seasonalData = Map<String, dynamic>.from(_dataCache[cacheKey]);
      });
      return;
    }
    try {
      final seasonal = await _arDataService.getSeasonalCareData(widget.selectedPlantId!);
      setState(() {
        _seasonalData = seasonal;
      });
      // Cache the data
      _dataCache[cacheKey] = seasonal;
      // Start seasonal animation
      _seasonalController.forward();
    } catch (e) {
      // Handle error silently, seasonal data is not critical
    }
  }
  // Enhanced plant identification with plant type filtering
  Future<void> _identifyPlantFromCamera() async {
    if (_isIdentifying) return;
    setState(() {
      _isIdentifying = true;
      _identificationData = null;
      _statusMessage = 'Analyzing plant...';
    });
    try {
      // Take a picture for identification
      final image = await widget.cameraController.takePicture();
      final imageFile = File(image.path);
      setState(() {
        _statusMessage = 'Processing image...';
      });
      // Send to backend for identification with plant type filter
      final identification = await _arDataService.identifyPlantForAR(
        imageFile,
        plantTypeFilter: widget.selectedPlantType,
      );
      setState(() {
        _identificationData = identification;
        _isIdentifying = false;
        _statusMessage = 'Plant identified!';
      });
      // Clear status message after success
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
      // Clean up the temporary image
      await imageFile.delete();
    } catch (e) {
      setState(() {
        _isIdentifying = false;
        _statusMessage = 'Failed to identify plant';
      });
      // Clear error message
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    }
  }
  // Implement plant saving functionality
  Future<void> _savePlantToCollection() async {
    if (_isSavingPlant || _identificationData == null) return;
    setState(() {
      _isSavingPlant = true;
      _statusMessage = 'Saving plant to collection...';
    });
    try {
      // Prepare plant data
      final plantData = {
        'common_name': _identificationData!['commonName'],
        'scientific_name': _identificationData!['scientificName'],
        'confidence_score': _identificationData!['confidence'],
        'care_info': _identificationData!['careInfo'],
        'identified_date': DateTime.now().toIso8601String(),
        'plant_type': widget.selectedPlantType,
      };
      // Call API to save plant
      final response = await _arDataService.savePlantToCollection(plantData);
      final plantId = response['plant_id'];
      setState(() {
        _isSavingPlant = false;
        _statusMessage = 'Plant saved successfully!';
      });
      // Notify parent component
      if (widget.onPlantSaved != null) {
        widget.onPlantSaved!(plantId);
      }
      // Show success feedback
      _showSuccessFeedback('Plant added to your collection!');
      // Clear status message
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    } catch (e) {
      setState(() {
        _isSavingPlant = false;
        _statusMessage = 'Failed to save plant';
      });
      // Clear error message
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    }
  }
  // Implement care reminder completion
  Future<void> _markReminderAsCompleted(String reminderId) async {
    setState(() {
      _statusMessage = 'Marking task as completed...';
    });
    try {
      await _arDataService.markReminderCompleted(reminderId);
      // Remove from local list
      setState(() {
        _careReminders?.removeWhere((reminder) => reminder['id'] == reminderId);
        _statusMessage = 'Task completed!';
      });
      // Clear cache to force refresh
      final cacheKey = 'reminders_${widget.selectedPlantId}';
      _dataCache.remove(cacheKey);
      // Notify parent component
      if (widget.onReminderCompleted != null) {
        widget.onReminderCompleted!(reminderId);
      }
      // Show success feedback
      _showSuccessFeedback('Care task completed!');
      // Refresh reminders
      await _loadCareReminders();
      // Clear status message
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    } catch (e) {
      setState(() {
        _statusMessage = 'Failed to mark as completed';
      });
      // Clear error message
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    }
  }
  // Enhanced success feedback
  void _showSuccessFeedback(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.check_circle, color: Colors.white),
            const SizedBox(width: 8),
            Text(message),
          ],
        ),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        // AR Tracking Indicator
        if (_showTrackingIndicator && _isTracking)
          _buildARTrackingIndicator(),
        // Status Message Display
        if (_statusMessage != null)
          _buildStatusMessage(),
        // Main AR overlays based on current filter
        if (widget.currentFilter != null)
          _buildAROverlay(),
        // Plant position tracking indicator
        if (_plantPosition != null && _trackingConfidence > 0.5)
          _buildPlantTrackingOverlay(),
      ],
    );
  }
  // Enhanced AR tracking indicator with smooth animations
  Widget _buildARTrackingIndicator() {
    return AnimatedBuilder(
      animation: _trackingController,
      builder: (context, child) {
        return Positioned(
          top: 50,
          left: 20,
          right: 20,
          child: FadeTransition(
            opacity: _overlayFadeController,
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.8),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: _trackingConfidence > 0.7 ? Colors.green : Colors.orange,
                  width: 2,
                ),
              ),
              child: Row(
                children: [
                  // Animated scanning indicator
                  SizedBox(
                    width: 24,
                    height: 24,
                    child: CircularProgressIndicator(
                      value: _trackingConfidence > 0.1 ? _trackingConfidence : null,
                      strokeWidth: 2,
                      color: _trackingConfidence > 0.7 ? Colors.green : Colors.orange,
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          _trackingConfidence > 0.7 ? 'Plant Tracked' : 'Tracking Plant...',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                        Text(
                          'Confidence: ${(_trackingConfidence * 100).round()}%',
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                  if (_trackingConfidence > 0.7)
                    const Icon(Icons.check_circle, color: Colors.green, size: 20),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
  // Enhanced status message display
  Widget _buildStatusMessage() {
    return Positioned(
      top: 100,
      left: 20,
      right: 20,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: _getStatusColor().withOpacity(0.9),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: Colors.white.withOpacity(0.3)),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            _getStatusIcon(),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                _statusMessage!,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
                textAlign: TextAlign.center,
              ),
            ),
          ],
        ),
      ),
    );
  }
  Color _getStatusColor() {
    if (_statusMessage!.contains('success') || _statusMessage!.contains('completed')) {
      return Colors.green;
    } else if (_statusMessage!.contains('failed') || _statusMessage!.contains('error')) {
      return Colors.red;
    } else if (_statusMessage!.contains('scanning') || _statusMessage!.contains('analyzing')) {
      return Colors.blue;
    }
    return Colors.grey;
  }
  Widget _getStatusIcon() {
    if (_statusMessage!.contains('success') || _statusMessage!.contains('completed')) {
      return const Icon(Icons.check_circle, color: Colors.white, size: 18);
    } else if (_statusMessage!.contains('failed') || _statusMessage!.contains('error')) {
      return const Icon(Icons.error, color: Colors.white, size: 18);
    } else if (_statusMessage!.contains('scanning') || _statusMessage!.contains('analyzing')) {
      return const SizedBox(
        width: 18,
        height: 18,
        child: CircularProgressIndicator(
          strokeWidth: 2,
          color: Colors.white,
        ),
      );
    }
    return const Icon(Icons.info, color: Colors.white, size: 18);
  }
  // Enhanced plant position tracking overlay
  Widget _buildPlantTrackingOverlay() {
    if (_plantPosition == null) return const SizedBox.shrink();
    return Positioned(
      left: MediaQuery.of(context).size.width * _plantPosition!.dx - 30,
      top: MediaQuery.of(context).size.height * _plantPosition!.dy - 30,
      child: AnimatedBuilder(
        animation: _healthPulseController,
        builder: (context, child) {
          final scale = 1.0 + (_healthPulseController.value * 0.1);
          return Transform.scale(
            scale: scale,
            child: Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.2),
                shape: BoxShape.circle,
                border: Border.all(
                  color: Colors.green,
                  width: 2,
                ),
              ),
              child: const Icon(
                Icons.center_focus_strong,
                color: Colors.green,
                size: 30,
              ),
            ),
          );
        },
      ),
    );
  }
  // Main AR overlay router with improved performance
  Widget _buildAROverlay() {
    // Use AnimatedSwitcher for smooth transitions between overlays
    return AnimatedSwitcher(
      duration: const Duration(milliseconds: 500),
      transitionBuilder: (Widget child, Animation<double> animation) {
        return FadeTransition(
          opacity: animation,
          child: ScaleTransition(
            scale: Tween<double>(begin: 0.8, end: 1.0).animate(animation),
            child: child,
          ),
        );
      },
      child: _buildSpecificOverlay(),
    );
  }
  Widget _buildSpecificOverlay() {
    switch (widget.currentFilter) {
      case 'plant_identification':
        return _buildPlantIdentificationOverlay();
      case 'health_overlay':
        return _buildHealthOverlay();
      case 'care_reminder':
        return _buildCareReminderOverlay();
      case 'growth_timelapse':
        return _buildGrowthTimeline();
      case 'seasonal_transformation':
        return _buildSeasonalTransformation();
      default:
        return const SizedBox.shrink();
    }
  }
  // Enhanced plant identification overlay with better visual cues
  Widget _buildPlantIdentificationOverlay() {
    return Stack(
      children: [
        // Scanning animation overlay
        if (_isIdentifying)
          _buildScanningAnimation(),
        // Identification results
        if (_identificationData != null)
          _buildIdentificationResults(),
        // Scan button
        Positioned(
          bottom: 120,
          left: 20,
          right: 20,
          child: Center(
            child: GestureDetector(
              onTap: _isIdentifying ? null : _identifyPlantFromCamera,
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 200),
                width: _isIdentifying ? 80 : 120,
                height: _isIdentifying ? 80 : 50,
                decoration: BoxDecoration(
                  color: _isIdentifying ? Colors.orange : Colors.green,
                  borderRadius: BorderRadius.circular(_isIdentifying ? 40 : 25),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.3),
                      blurRadius: 8,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: _isIdentifying
                    ? const Center(
                        child: CircularProgressIndicator(
                          color: Colors.white,
                          strokeWidth: 3,
                        ),
                      )
                    : const Center(
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(Icons.camera_alt, color: Colors.white),
                            SizedBox(width: 8),
                            Text(
                              'Scan Plant',
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
              ),
            ),
          ),
        ),
      ],
    );
  }
  // Improved scanning animation with AR-style visual effects
  Widget _buildScanningAnimation() {
    return AnimatedBuilder(
      animation: _scanningController,
      builder: (context, child) {
        return Positioned.fill(
          child: CustomPaint(
            painter: ScanningOverlayPainter(
              progress: _scanningController.value,
              plantType: widget.selectedPlantType,
            ),
          ),
        );
      },
    );
  }
  // Enhanced identification results with smooth animations
  Widget _buildIdentificationResults() {
    final data = _identificationData!;
    final confidence = data['confidence'] as double;
    return Positioned(
      top: 80,
      left: 20,
      right: 20,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 500),
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.85),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: confidence > 0.8 ? Colors.green : Colors.orange,
            width: 2,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.3),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            // Header with confidence indicator
            Row(
              children: [
                Icon(
                  Icons.eco,
                  color: confidence > 0.8 ? Colors.green : Colors.orange,
                  size: 24,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        data['commonName'] ?? 'Unknown Plant',
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                        ),
                      ),
                      Text(
                        data['scientificName'] ?? 'Unknown Species',
                        style: const TextStyle(
                          color: Colors.white70,
                          fontSize: 14,
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    ],
                  ),
                ),
                // Confidence indicator
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: confidence > 0.8 ? Colors.green : Colors.orange,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${(confidence * 100).round()}%',
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Quick care info
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildQuickCareInfo(Icons.wb_sunny, data['careInfo']?['light'] ?? 'Medium'),
                _buildQuickCareInfo(Icons.water_drop, data['careInfo']?['water'] ?? 'Weekly'),
                _buildQuickCareInfo(Icons.thermostat, data['careInfo']?['temperature'] ?? '65-75F'),
              ],
            ),
            const SizedBox(height: 16),
            // Action buttons
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton.icon(
                  onPressed: () {
                    setState(() {
                      _identificationData = null;
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey,
                    foregroundColor: Colors.white,
                  ),
                  icon: const Icon(Icons.refresh, size: 18),
                  label: const Text('New Scan'),
                ),
                ElevatedButton.icon(
                  onPressed: _isSavingPlant ? null : _savePlantToCollection,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                  icon: _isSavingPlant 
                    ? const SizedBox(
                        width: 18,
                        height: 18,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: Colors.white,
                        ),
                      )
                    : const Icon(Icons.add, size: 18),
                  label: Text(_isSavingPlant ? 'Saving...' : 'Save Plant'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildQuickCareInfo(IconData icon, String text) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, color: Colors.green, size: 16),
        const SizedBox(height: 2),
        Text(
          text,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 10,
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
  Widget _buildHealthOverlay() {
    if (_isLoadingHealth) {
      return const Center(
        child: CircularProgressIndicator(color: Colors.green),
      );
    }
    final healthData = _healthData;
    if (healthData == null) {
      return const Center(
        child: Text(
          'No health data available',
          style: TextStyle(color: Colors.white),
        ),
      );
    }
    final overallHealth = healthData['overallHealth'] ?? 0.0;
    final metrics = List<Map<String, dynamic>>.from(healthData['metrics'] ?? []);
    final recommendations = List<String>.from(healthData['recommendations'] ?? []);
    return AnimatedBuilder(
      animation: _healthPulseController,
      builder: (context, child) {
        return Stack(
          children: [
            // Health indicators positioned around detected plant areas
            ...metrics.asMap().entries.map((entry) {
              final index = entry.key;
              final metric = entry.value;
              return _buildHealthIndicator(
                top: 200 + (index * 80.0),
                left: 100 + (index * 30.0),
                healthScore: metric['score'] ?? 0.0,
                label: metric['name'] ?? 'Unknown',
                icon: _getIconData(metric['icon'] ?? 'info'),
                status: metric['status'] ?? 'good',
              );
            }).toList(),
            // Health summary panel with real data
            Positioned(
              top: 50,
              left: 20,
              right: 20,
              child: _buildHealthSummaryPanel(overallHealth, recommendations),
            ),
          ],
        );
      },
    );
  }
  Widget _buildHealthIndicator({
    double? top,
    double? bottom,
    double? left,
    double? right,
    required double healthScore,
    required String label,
    required IconData icon,
    required String status,
  }) {
    final color = status == 'good'
        ? Colors.green
        : status == 'warning'
            ? Colors.orange
            : Colors.red;
    return Positioned(
      top: top,
      bottom: bottom,
      left: left,
      right: right,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Pulsing health indicator
            AnimatedBuilder(
              animation: _healthPulseController,
              builder: (context, child) {
                final scale = 1.0 + (_healthPulseController.value * 0.2);
                return Transform.scale(
                  scale: scale,
                  child: Container(
                    width: 40,
                    height: 40,
                    decoration: BoxDecoration(
                      color: color.withOpacity(0.8),
                      shape: BoxShape.circle,
                      border: Border.all(color: Colors.white, width: 2),
                    ),
                    child: Icon(icon, color: Colors.white, size: 20),
                  ),
                );
              },
            ),
            const SizedBox(height: 4),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    label,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    '${(healthScore * 100).round()}%',
                    style: TextStyle(
                      color: color,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildHealthSummaryPanel(double overallHealth, List<String> recommendations) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.8),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.green, width: 1),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            children: [
              const Icon(Icons.local_hospital, color: Colors.green, size: 20),
              const SizedBox(width: 8),
              const Text(
                'Plant Health Analysis',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Spacer(),
              Text(
                '${(overallHealth * 100).round()}%',
                style: TextStyle(
                  color: overallHealth > 0.8 ? Colors.green : 
                         overallHealth > 0.6 ? Colors.orange : Colors.red,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ],
          ),
          if (recommendations.isNotEmpty) ...[
            const SizedBox(height: 12),
            const Align(
              alignment: Alignment.centerLeft,
              child: Text(
                'Recommendations:',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 12,
                ),
              ),
            ),
            const SizedBox(height: 4),
            ...recommendations.take(3).map((rec) => Padding(
              padding: const EdgeInsets.only(bottom: 2),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('• ', style: TextStyle(color: Colors.green)),
                  Expanded(
                    child: Text(
                      rec,
                      style: const TextStyle(color: Colors.white70, fontSize: 11),
                    ),
                  ),
                ],
              ),
            )).toList(),
          ],
        ],
      ),
    );
  }
  Widget _buildSeasonalTransformation() {
    final seasonalData = _seasonalData;
    if (seasonalData == null) {
      return const Center(
        child: CircularProgressIndicator(color: Colors.orange),
      );
    }
    final currentSeason = seasonalData['currentSeason'] ?? 'spring';
    final adjustments = Map<String, String>.from(seasonalData['adjustments'] ?? {});
    final tips = List<String>.from(seasonalData['tips'] ?? []);
    return AnimatedBuilder(
      animation: _seasonalController,
      builder: (context, child) {
        return Stack(
          children: [
            // Seasonal effects
            _buildSeasonalEffects(currentSeason),
            // Seasonal info panel
            Positioned(
              top: 100,
              left: 20,
              right: 20,
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: _getSeasonalColor(currentSeason).withOpacity(0.9),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: Colors.white, width: 2),
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Row(
                      children: [
                        Icon(_getSeasonalIcon(currentSeason), color: Colors.white),
                        const SizedBox(width: 8),
                        Text(
                          '$currentSeason Care',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    ...adjustments.entries.map((entry) => Padding(
                      padding: const EdgeInsets.only(bottom: 4),
                      child: Row(
                        children: [
                          Text(
                            '${entry.key.toUpperCase()}: ',
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 12,
                            ),
                          ),
                          Expanded(
                            child: Text(
                              entry.value,
                              style: const TextStyle(color: Colors.white, fontSize: 12),
                            ),
                          ),
                        ],
                      ),
                    )).toList(),
                    if (tips.isNotEmpty) ...[
                      const SizedBox(height: 8),
                      const Divider(color: Colors.white70),
                      const SizedBox(height: 4),
                      ...tips.take(2).map((tip) => Padding(
                        padding: const EdgeInsets.only(bottom: 2),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text('💡 ', style: TextStyle(fontSize: 12)),
                            Expanded(
                              child: Text(
                                tip,
                                style: const TextStyle(color: Colors.white, fontSize: 11),
                              ),
                            ),
                          ],
                        ),
                      )).toList(),
                    ],
                  ],
                ),
              ),
            ),
          ],
        );
      },
    );
  }
  Widget _buildSeasonalEffects(String season) {
    // Add visual effects based on season
    switch (season.toLowerCase()) {
      case 'spring':
        return _buildSpringEffects();
      case 'summer':
        return _buildSummerEffects();
      case 'fall':
        return _buildFallEffects();
      case 'winter':
        return _buildWinterEffects();
      default:
        return const SizedBox.shrink();
    }
  }
  Widget _buildSpringEffects() {
    return AnimatedBuilder(
      animation: _seasonalController,
      builder: (context, child) {
        return Stack(
          children: List.generate(10, (index) {
            final offset = _seasonalController.value * 2 * math.pi;
            return Positioned(
              left: 50 + (index * 30) + math.sin(offset + index) * 20,
              top: 100 + (index * 40) + math.cos(offset + index) * 15,
              child: Icon(
                Icons.local_florist,
                color: Colors.pink.withOpacity(0.7),
                size: 16,
              ),
            );
          }),
        );
      },
    );
  }
  Widget _buildSummerEffects() {
    return AnimatedBuilder(
      animation: _seasonalController,
      builder: (context, child) {
        return Stack(
          children: List.generate(8, (index) {
            final offset = _seasonalController.value * 2 * math.pi;
            return Positioned(
              left: 60 + (index * 40) + math.sin(offset + index) * 25,
              top: 80 + (index * 50) + math.cos(offset + index) * 20,
              child: Icon(
                Icons.wb_sunny,
                color: Colors.yellow.withOpacity(0.8),
                size: 20,
              ),
            );
          }),
        );
      },
    );
  }
  Widget _buildFallEffects() {
    return AnimatedBuilder(
      animation: _seasonalController,
      builder: (context, child) {
        return Stack(
          children: List.generate(12, (index) {
            final offset = _seasonalController.value * 2 * math.pi;
            return Positioned(
              left: 40 + (index * 25) + math.sin(offset + index) * 30,
              top: 120 + (index * 35) + math.cos(offset + index) * 25,
              child: Icon(
                Icons.eco,
                color: Colors.orange.withOpacity(0.7),
                size: 14,
              ),
            );
          }),
        );
      },
    );
  }
  Widget _buildWinterEffects() {
    return AnimatedBuilder(
      animation: _seasonalController,
      builder: (context, child) {
        return Stack(
          children: List.generate(15, (index) {
            final offset = _seasonalController.value * 2 * math.pi;
            return Positioned(
              left: 30 + (index * 20) + math.sin(offset + index) * 15,
              top: 90 + (index * 30) + math.cos(offset + index) * 10,
              child: Icon(
                Icons.ac_unit,
                color: Colors.lightBlue.withOpacity(0.6),
                size: 12,
              ),
            );
          }),
        );
      },
    );
  }
  Widget _buildCareReminderOverlay() {
    if (_isLoadingReminders) {
      return const Center(
        child: CircularProgressIndicator(color: Colors.blue),
      );
    }
    final reminders = _careReminders;
    if (reminders == null || reminders.isEmpty) {
      return Positioned(
        top: 100,
        left: 20,
        right: 20,
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.blue.withOpacity(0.9),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: Colors.white, width: 2),
          ),
          child: const Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 8),
                  Text(
                    'All Caught Up!',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              SizedBox(height: 8),
              Text(
                'No care tasks due right now',
                style: TextStyle(color: Colors.white, fontSize: 14),
              ),
            ],
          ),
        ),
      );
    }
    // Show the most urgent reminder
    final urgentReminder = reminders.first;
    final dueDate = urgentReminder['dueDate'] as DateTime;
    final isOverdue = urgentReminder['isOverdue'] as bool;
    return Positioned(
      top: 100,
      left: 20,
      right: 20,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: (isOverdue ? Colors.red : Colors.blue).withOpacity(0.9),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(color: Colors.white, width: 2),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Row(
              children: [
                Icon(
                  _getIconData(urgentReminder['icon'] ?? 'schedule'), 
                  color: Colors.white
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    isOverdue ? 'Overdue Care Task' : 'Care Reminder',
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    urgentReminder['priority']?.toString().toUpperCase() ?? 'MEDIUM',
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 10,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              urgentReminder['description'] ?? 'Care task due',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              isOverdue 
                ? 'Overdue by ${DateTime.now().difference(dueDate).inDays} days'
                : 'Due ${_formatDueDate(dueDate)}',
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 12,
              ),
            ),
            const SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: () {
                    _markReminderAsCompleted(urgentReminder['id'] as String);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,
                    foregroundColor: isOverdue ? Colors.red : Colors.blue,
                  ),
                  child: const Text('Done'),
                ),
                ElevatedButton(
                  onPressed: () {
                    // Snooze reminder for 1 hour
                    _snoozeReminder(urgentReminder['id'] as String, const Duration(hours: 1));
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.transparent,
                    foregroundColor: Colors.white,
                    side: const BorderSide(color: Colors.white),
                  ),
                  child: const Text('Snooze'),
                ),
              ],
            ),
            if (reminders.length > 1) ...[
              const SizedBox(height: 8),
              Text(
                '+${reminders.length - 1} more task${reminders.length > 2 ? 's' : ''}',
                style: const TextStyle(
                  color: Colors.white70,
                  fontSize: 12,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
  Widget _buildFilterSelector() {
    final filters = [
      {'id': 'growth_timelapse', 'name': 'Growth', 'icon': Icons.timeline},
      {'id': 'health_overlay', 'name': 'Health', 'icon': Icons.favorite},
      {'id': 'seasonal_transformation', 'name': 'Seasons', 'icon': Icons.calendar_today},
      {'id': 'plant_identification', 'name': 'ID Plant', 'icon': Icons.search},
      {'id': 'care_reminder', 'name': 'Care', 'icon': Icons.schedule},
    ];
    return SizedBox(
      height: 80,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        padding: const EdgeInsets.symmetric(horizontal: 20),
        itemCount: filters.length,
        itemBuilder: (context, index) {
          final filter = filters[index];
          final isSelected = widget.currentFilter == filter['id'];
          return Padding(
            padding: const EdgeInsets.only(right: 12),
            child: GestureDetector(
              onTap: () {
                if (isSelected) {
                  widget.onFilterSelected('none');
                } else {
                  widget.onFilterSelected(filter['id'] as String);
                  _startFilterAnimation(filter['id'] as String);
                }
              },
              child: Container(
                width: 60,
                decoration: BoxDecoration(
                  color: isSelected
                      ? Colors.green.withOpacity(0.8)
                      : Colors.black.withOpacity(0.6),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isSelected ? Colors.white : Colors.grey,
                    width: isSelected ? 2 : 1,
                  ),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      filter['icon'] as IconData,
                      color: Colors.white,
                      size: 24,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      filter['name'] as String,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
  void _startFilterAnimation(String filterType) {
    switch (filterType) {
      case 'growth_timelapse':
        _growthAnimationController.reset();
        _growthAnimationController.forward();
        break;
      case 'seasonal_transformation':
        _seasonalController.reset();
        _seasonalController.repeat();
        break;
    }
  }
  // Utility methods
  IconData _getIconData(String iconName) {
    switch (iconName) {
      case 'eco':
        return Icons.eco;
      case 'water_drop':
        return Icons.water_drop;
      case 'wb_sunny':
        return Icons.wb_sunny;
      case 'science':
        return Icons.science;
      case 'content_cut':
        return Icons.content_cut;
      case 'local_florist':
        return Icons.local_florist;
      case 'schedule':
        return Icons.schedule;
      default:
        return Icons.info;
    }
  }
  Color _getSeasonalColor(String season) {
    switch (season.toLowerCase()) {
      case 'spring':
        return Colors.green;
      case 'summer':
        return Colors.orange;
      case 'fall':
        return Colors.brown;
      case 'winter':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }
  IconData _getSeasonalIcon(String season) {
    switch (season.toLowerCase()) {
      case 'spring':
        return Icons.local_florist;
      case 'summer':
        return Icons.wb_sunny;
      case 'fall':
        return Icons.eco;
      case 'winter':
        return Icons.ac_unit;
      default:
        return Icons.calendar_today;
    }
  }
  String _formatDueDate(DateTime dueDate) {
    final now = DateTime.now();
    final difference = dueDate.difference(now);
    if (difference.inDays == 0) {
      return 'today';
    } else if (difference.inDays == 1) {
      return 'tomorrow';
    } else if (difference.inDays > 1) {
      return 'in ${difference.inDays} days';
    } else {
      return '${difference.inDays.abs()} days ago';
    }
  }
  Widget _buildARFilterControls(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black.withValues(alpha: 0.7),
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.tune, color: Colors.white),
              const SizedBox(width: 8),
              Text(
                'AR Filters & Controls',
                style: theme.textTheme.titleMedium?.copyWith(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // Filter Categories
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: [
                _buildFilterCategory('Health', Icons.favorite, Colors.green, true),
                const SizedBox(width: 12),
                _buildFilterCategory('Growth', Icons.trending_up, Colors.blue, false),
                const SizedBox(width: 12),
                _buildFilterCategory('Care', Icons.water_drop, Colors.orange, false),
                const SizedBox(width: 12),
                _buildFilterCategory('Info', Icons.info, Colors.purple, false),
              ],
            ),
          ),
          const SizedBox(height: 16),
          // Filter Options
          _buildActiveFilters(theme),
          const SizedBox(height: 16),
          // Control Sliders
          _buildARControlSliders(theme),
        ],
      ),
    );
  }
  Widget _buildFilterCategory(String name, IconData icon, Color color, bool isActive) {
    return GestureDetector(
      onTap: () {
        setState(() {
          // Toggle category
        });
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        decoration: BoxDecoration(
          color: isActive ? color : Colors.grey.withValues(alpha: 0.3),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isActive ? color : Colors.grey,
            width: 2,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, color: Colors.white, size: 16),
            const SizedBox(width: 6),
            Text(
              name,
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
                fontSize: 12,
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildActiveFilters(ThemeData theme) {
    final healthFilters = [
      {'name': 'Disease Detection', 'icon': Icons.bug_report, 'active': true},
      {'name': 'Leaf Health', 'icon': Icons.eco, 'active': false},
      {'name': 'Growth Tracking', 'icon': Icons.timeline, 'active': false},
      {'name': 'Watering Status', 'icon': Icons.water_drop, 'active': true},
    ];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Active Overlays',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 14,
          ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 4,
          children: healthFilters.map((filter) {
            return _buildFilterToggle(
              filter['name'] as String,
              filter['icon'] as IconData,
              filter['active'] as bool,
            );
          }).toList(),
        ),
      ],
    );
  }
  Widget _buildFilterToggle(String name, IconData icon, bool isActive) {
    return GestureDetector(
      onTap: () {
        setState(() {
          // Toggle filter
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${isActive ? 'Disabled' : 'Enabled'} $name overlay'),
            duration: const Duration(seconds: 1),
          ),
        );
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: isActive ? Colors.green.withValues(alpha: 0.3) : Colors.grey.withValues(alpha: 0.3),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: isActive ? Colors.green : Colors.grey,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              color: isActive ? Colors.green : Colors.grey,
              size: 14,
            ),
            const SizedBox(width: 4),
            Text(
              name,
              style: TextStyle(
                color: isActive ? Colors.green : Colors.grey,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildARControlSliders(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'AR Overlay Controls',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 14,
          ),
        ),
        const SizedBox(height: 8),
        _buildControlSlider('Overlay Opacity', 0.8, Colors.blue),
        _buildControlSlider('Detection Sensitivity', 0.6, Colors.orange),
        _buildControlSlider('Update Frequency', 0.5, Colors.purple),
        const SizedBox(height: 12),
        // Quick Actions
        Row(
          children: [
            Expanded(
              child: _buildQuickAction('Reset View', Icons.refresh, () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('AR view reset')),
                );
              }),
            ),
            const SizedBox(width: 8),
            Expanded(
              child: _buildQuickAction('Save Settings', Icons.save, () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('AR settings saved')),
                );
              }),
            ),
          ],
        ),
      ],
    );
  }
  Widget _buildControlSlider(String label, double value, Color color) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            color: Colors.white70,
            fontSize: 12,
          ),
        ),
        SliderTheme(
          data: SliderTheme.of(context).copyWith(
            activeTrackColor: color,
            inactiveTrackColor: Colors.grey.withValues(alpha: 0.3),
            thumbColor: color,
            overlayColor: color.withValues(alpha: 0.2),
            trackHeight: 2,
          ),
          child: Slider(
            value: value,
            onChanged: (newValue) {
              setState(() {
                // Update slider value
              });
            },
          ),
        ),
      ],
    );
  }
  Widget _buildQuickAction(String label, IconData icon, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 8),
        decoration: BoxDecoration(
          color: Colors.white.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.white.withValues(alpha: 0.3)),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: Colors.white, size: 16),
            const SizedBox(width: 4),
            Text(
              label,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }
  Future<void> _snoozeReminder(String reminderId, Duration duration) async {
    setState(() {
      _statusMessage = 'Snoozing reminder...';
    });
    try {
      await _arDataService.snoozeReminder(reminderId, duration);
      // Remove from local list temporarily
      setState(() {
        _careReminders?.removeWhere((reminder) => reminder['id'] == reminderId);
        _statusMessage = 'Reminder snoozed for ${duration.inHours} hours';
      });
      // Clear cache to force refresh
      final cacheKey = 'reminders_${widget.selectedPlantId}';
      _dataCache.remove(cacheKey);
      // Show success feedback
      _showSuccessFeedback('Reminder snoozed for ${duration.inHours} hours');
      // Clear status message
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    } catch (e) {
      setState(() {
        _statusMessage = 'Failed to snooze reminder';
      });
      // Clear error message
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted) {
          setState(() {
            _statusMessage = null;
          });
        }
      });
    }
  }
}
/// Custom painter for AR scanning animation overlay
class ScanningOverlayPainter extends CustomPainter {
  final double progress;
  final String? plantType;
  ScanningOverlayPainter({
    required this.progress,
    this.plantType,
  });
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.green.withOpacity(0.8)
      ..strokeWidth = 2.0
      ..style = PaintingStyle.stroke;
    final center = Offset(size.width / 2, size.height / 2);
    final scanRadius = (size.width * 0.3) + (progress * size.width * 0.2);
    // Draw scanning circle
    canvas.drawCircle(center, scanRadius, paint);
    // Draw scanning lines
    final linePaint = Paint()
      ..color = Colors.green.withOpacity(0.6)
      ..strokeWidth = 1.0;
    for (int i = 0; i < 8; i++) {
      final angle = (progress * 2 * math.pi) + (i * math.pi / 4);
      final startRadius = scanRadius - 20;
      final endRadius = scanRadius + 20;
      final start = Offset(
        center.dx + math.cos(angle) * startRadius,
        center.dy + math.sin(angle) * startRadius,
      );
      final end = Offset(
        center.dx + math.cos(angle) * endRadius,
        center.dy + math.sin(angle) * endRadius,
      );
      canvas.drawLine(start, end, linePaint);
    }
    // Draw corner brackets for AR scanner effect
    _drawCornerBrackets(canvas, size);
    // Draw plant type indicator if specified
    if (plantType != null) {
      _drawPlantTypeIndicator(canvas, size, plantType!);
    }
  }
  void _drawCornerBrackets(Canvas canvas, Size size) {
    final bracketPaint = Paint()
      ..color = Colors.green
      ..strokeWidth = 3.0
      ..style = PaintingStyle.stroke;
    final bracketSize = 30.0;
    final margin = size.width * 0.15;
    // Top-left bracket
    canvas.drawPath(
      Path()
        ..moveTo(margin, margin + bracketSize)
        ..lineTo(margin, margin)
        ..lineTo(margin + bracketSize, margin),
      bracketPaint,
    );
    // Top-right bracket
    canvas.drawPath(
      Path()
        ..moveTo(size.width - margin - bracketSize, margin)
        ..lineTo(size.width - margin, margin)
        ..lineTo(size.width - margin, margin + bracketSize),
      bracketPaint,
    );
    // Bottom-left bracket
    canvas.drawPath(
      Path()
        ..moveTo(margin, size.height - margin - bracketSize)
        ..lineTo(margin, size.height - margin)
        ..lineTo(margin + bracketSize, size.height - margin),
      bracketPaint,
    );
    // Bottom-right bracket
    canvas.drawPath(
      Path()
        ..moveTo(size.width - margin - bracketSize, size.height - margin)
        ..lineTo(size.width - margin, size.height - margin)
        ..lineTo(size.width - margin, size.height - margin - bracketSize),
      bracketPaint,
    );
  }
  void _drawPlantTypeIndicator(Canvas canvas, Size size, String plantType) {
    final textPainter = TextPainter(
      text: TextSpan(
        text: 'Scanning for: $plantType',
        style: const TextStyle(
          color: Colors.white,
          fontSize: 16,
          fontWeight: FontWeight.bold,
          shadows: [
            Shadow(
              offset: Offset(1, 1),
              blurRadius: 3,
              color: Colors.black,
            ),
          ],
        ),
      ),
      textDirection: TextDirection.ltr,
    );
    textPainter.layout();
    final offset = Offset(
      (size.width - textPainter.width) / 2,
      size.height * 0.85,
    );
    // Draw background
    final backgroundPaint = Paint()
      ..color = Colors.black.withOpacity(0.6);
    canvas.drawRRect(
      RRect.fromRectAndRadius(
        Rect.fromLTWH(
          offset.dx - 8,
          offset.dy - 4,
          textPainter.width + 16,
          textPainter.height + 8,
        ),
        const Radius.circular(8),
      ),
      backgroundPaint,
    );
    textPainter.paint(canvas, offset);
  }
  @override
  bool shouldRepaint(covariant ScanningOverlayPainter oldDelegate) {
    return progress != oldDelegate.progress || plantType != oldDelegate.plantType;
  }
}
</file>

<file path="lib/features/chat/presentation/screens/chat_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
/// Chat screen showing list of conversations
/// Displays recent conversations and allows starting new chats
class ChatScreen extends ConsumerStatefulWidget {
  const ChatScreen({super.key});
  @override
  ConsumerState<ChatScreen> createState() => _ChatScreenState();
}
class _ChatScreenState extends ConsumerState<ChatScreen> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
  /// Mock conversation data for demonstration
  List<MockConversation> get _mockConversations => [
    MockConversation(
      userId: '1',
      userName: 'Alice Green',
      lastMessage: 'Check out my new succulent! 🌵',
      timestamp: DateTime.now().subtract(const Duration(minutes: 5)),
      unreadCount: 2,
      isOnline: true,
    ),
    MockConversation(
      userId: '2',
      userName: 'Bob Plant',
      lastMessage: 'Thanks for the watering tips!',
      timestamp: DateTime.now().subtract(const Duration(hours: 2)),
      unreadCount: 0,
      isOnline: false,
    ),
    MockConversation(
      userId: '3',
      userName: 'Carol Flowers',
      lastMessage: 'My roses are blooming beautifully 🌹',
      timestamp: DateTime.now().subtract(const Duration(days: 1)),
      unreadCount: 1,
      isOnline: true,
    ),
    MockConversation(
      userId: '4',
      userName: 'David Herbs',
      lastMessage: 'Let\'s plan that garden visit!',
      timestamp: DateTime.now().subtract(const Duration(days: 2)),
      unreadCount: 0,
      isOnline: false,
    ),
  ];
  List<MockConversation> get _filteredConversations {
    if (_searchQuery.isEmpty) return _mockConversations;
    return _mockConversations.where((conversation) {
      return conversation.userName.toLowerCase().contains(_searchQuery.toLowerCase()) ||
             conversation.lastMessage.toLowerCase().contains(_searchQuery.toLowerCase());
    }).toList();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        title: const Text('Messages'),
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
        actions: [
          IconButton(
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Starting new chat...'),
                ),
              );
            },
            icon: const Icon(Icons.edit_outlined),
            tooltip: 'New Chat',
          ),
        ],
      ),
      body: Column(
        children: [
          // Search bar
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              controller: _searchController,
              onChanged: (value) {
                setState(() {
                  _searchQuery = value;
                });
              },
              decoration: InputDecoration(
                hintText: 'Search conversations...',
                prefixIcon: const Icon(Icons.search),
                suffixIcon: _searchQuery.isNotEmpty
                    ? IconButton(
                        onPressed: () {
                          _searchController.clear();
                          setState(() {
                            _searchQuery = '';
                          });
                        },
                        icon: const Icon(Icons.clear),
                      )
                    : null,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide.none,
                ),
                filled: true,
                fillColor: theme.colorScheme.surfaceVariant.withOpacity(0.5),
              ),
            ),
          ),
          // Conversations list
          Expanded(
            child: _filteredConversations.isEmpty
                ? _buildEmptyState(theme)
                : ListView.builder(
                    itemCount: _filteredConversations.length,
                    itemBuilder: (context, index) {
                      final conversation = _filteredConversations[index];
                      return _buildConversationTile(conversation, theme);
                    },
                  ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
                                content: Text('Opening conversation with plant enthusiast!'),
            ),
          );
        },
        child: const Icon(Icons.chat_bubble_outline),
      ),
    );
  }
  Widget _buildEmptyState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.chat_bubble_outline,
            size: 64,
            color: theme.colorScheme.onSurface.withOpacity(0.5),
          ),
          const SizedBox(height: 16),
          Text(
            _searchQuery.isNotEmpty ? 'No conversations found' : 'No messages yet',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: theme.colorScheme.onSurface.withOpacity(0.7),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            _searchQuery.isNotEmpty 
                ? 'Try searching with different keywords'
                : 'Start chatting with your plant friends!',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: theme.colorScheme.onSurface.withOpacity(0.5),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildConversationTile(MockConversation conversation, ThemeData theme) {
    return ListTile(
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      leading: Stack(
        children: [
          CircleAvatar(
            radius: 28,
            backgroundColor: theme.colorScheme.primary,
            child: Text(
              conversation.userName.split(' ').map((name) => name[0]).join(),
              style: TextStyle(
                color: theme.colorScheme.onPrimary,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          if (conversation.isOnline)
            Positioned(
              bottom: 0,
              right: 0,
              child: Container(
                width: 16,
                height: 16,
                decoration: BoxDecoration(
                  color: Colors.green,
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: theme.colorScheme.surface,
                    width: 2,
                  ),
                ),
              ),
            ),
        ],
      ),
      title: Row(
        children: [
          Expanded(
            child: Text(
              conversation.userName,
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: conversation.unreadCount > 0 
                    ? FontWeight.bold 
                    : FontWeight.normal,
              ),
            ),
          ),
          Text(
            _formatTimestamp(conversation.timestamp),
            style: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.onSurface.withOpacity(0.6),
            ),
          ),
        ],
      ),
      subtitle: Row(
        children: [
          Expanded(
            child: Text(
              conversation.lastMessage,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: conversation.unreadCount > 0
                    ? theme.colorScheme.onSurface
                    : theme.colorScheme.onSurface.withOpacity(0.7),
                fontWeight: conversation.unreadCount > 0 
                    ? FontWeight.w500 
                    : FontWeight.normal,
              ),
            ),
          ),
          if (conversation.unreadCount > 0)
            Container(
              margin: const EdgeInsets.only(left: 8),
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: theme.colorScheme.primary,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                conversation.unreadCount.toString(),
                style: TextStyle(
                  color: theme.colorScheme.onPrimary,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
        ],
      ),
      onTap: () {
        context.push(
          '${AppRoutes.conversation}/${conversation.userId}?userName=${conversation.userName}',
        );
      },
    );
  }
  String _formatTimestamp(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    if (difference.inMinutes < 1) {
      return 'now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes}m';
    } else if (difference.inDays < 1) {
      return '${difference.inHours}h';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d';
    } else {
      return '${timestamp.day}/${timestamp.month}';
    }
  }
}
/// Mock conversation model for demonstration
class MockConversation {
  final String userId;
  final String userName;
  final String lastMessage;
  final DateTime timestamp;
  final int unreadCount;
  final bool isOnline;
  MockConversation({
    required this.userId,
    required this.userName,
    required this.lastMessage,
    required this.timestamp,
    required this.unreadCount,
    required this.isOnline,
  });
}
</file>

<file path="lib/features/chat/presentation/screens/conversation_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
/// Individual conversation screen for messaging
/// Displays messages between the current user and another user
class ConversationScreen extends ConsumerStatefulWidget {
  final String userId;
  final String? userName;
  const ConversationScreen({
    super.key,
    required this.userId,
    this.userName,
  });
  @override
  ConsumerState<ConversationScreen> createState() => _ConversationScreenState();
}
class _ConversationScreenState extends ConsumerState<ConversationScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  bool _isTyping = false;
  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }
  /// Mock messages for demonstration
  List<MockMessage> get _mockMessages => [
        MockMessage(
          id: '1',
          content: 'Hey! How are your plants doing?',
          senderId: widget.userId,
          timestamp: DateTime.now().subtract(const Duration(hours: 2)),
          isFromCurrentUser: false,
        ),
        MockMessage(
          id: '2',
          content: 'They\'re doing great! Just repotted my fiddle leaf fig 🌱',
          senderId: 'current_user',
          timestamp:
              DateTime.now().subtract(const Duration(hours: 1, minutes: 45)),
          isFromCurrentUser: true,
        ),
        MockMessage(
          id: '3',
          content: 'That\'s awesome! I\'d love to see some photos',
          senderId: widget.userId,
          timestamp:
              DateTime.now().subtract(const Duration(hours: 1, minutes: 30)),
          isFromCurrentUser: false,
        ),
        MockMessage(
          id: '4',
          content: 'Sure! I\'ll take some and share them in my story',
          senderId: 'current_user',
          timestamp:
              DateTime.now().subtract(const Duration(hours: 1, minutes: 15)),
          isFromCurrentUser: true,
        ),
        MockMessage(
          id: '5',
          content: 'Perfect! Can\'t wait to see them 📸',
          senderId: widget.userId,
          timestamp: DateTime.now().subtract(const Duration(minutes: 30)),
          isFromCurrentUser: false,
        ),
      ];
  /// Send a message (placeholder implementation)
  Future<void> _sendMessage() async {
    final content = _messageController.text.trim();
    if (content.isEmpty) return;
    // Clear the input immediately
    _messageController.clear();
    // Show typing indicator
    setState(() {
      _isTyping = true;
    });
    try {
      // Simulate API call delay
      await Future.delayed(const Duration(milliseconds: 500));
      // In a real app, this would send the message to the backend
      // and update the messages list through a provider
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Message sent! (Demo mode)'),
            duration: Duration(seconds: 1),
          ),
        );
        // Scroll to bottom
        _scrollToBottom();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to send message: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isTyping = false;
      });
    }
  }
  /// Scroll to the bottom of the conversation
  void _scrollToBottom() {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
        leading: IconButton(
          onPressed: () => context.pop(),
          icon: const Icon(Icons.arrow_back),
        ),
        title: Row(
          children: [
            CircleAvatar(
              radius: 20,
              backgroundColor: theme.colorScheme.primary,
              child: Text(
                widget.userName?.split(' ').map((name) => name[0]).join() ??
                    'U',
                style: TextStyle(
                  color: theme.colorScheme.onPrimary,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    widget.userName ?? 'User',
                    style: theme.textTheme.titleMedium,
                  ),
                  Text(
                    'Online', // In a real app, this would be dynamic
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: Colors.green,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            onPressed: () => _startVoiceCall(context),
            icon: const Icon(Icons.call),
            tooltip: 'Voice Call',
          ),
          IconButton(
            onPressed: () => _startVideoCall(context),
            icon: const Icon(Icons.video_call),
            tooltip: 'Video Call',
          ),
        ],
      ),
      body: Column(
        children: [
          // Messages list
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.all(16),
              itemCount: _mockMessages.length,
              itemBuilder: (context, index) {
                final message = _mockMessages[index];
                return _buildMessageBubble(message, theme);
              },
            ),
          ),
          // Typing indicator
          if (_isTyping)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Row(
                children: [
                  const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'Sending...',
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: theme.colorScheme.onSurface.withOpacity(0.6),
                    ),
                  ),
                ],
              ),
            ),
          // Message input
          _buildMessageInput(theme),
        ],
      ),
    );
  }
  Widget _buildMessageBubble(MockMessage message, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        mainAxisAlignment: message.isFromCurrentUser
            ? MainAxisAlignment.end
            : MainAxisAlignment.start,
        children: [
          if (!message.isFromCurrentUser) ...[
            CircleAvatar(
              radius: 16,
              backgroundColor: theme.colorScheme.primary,
              child: Text(
                widget.userName?.split(' ').map((name) => name[0]).join() ??
                    'U',
                style: TextStyle(
                  color: theme.colorScheme.onPrimary,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            const SizedBox(width: 8),
          ],
          Flexible(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              decoration: BoxDecoration(
                color: message.isFromCurrentUser
                    ? theme.colorScheme.primary
                    : theme.colorScheme.surfaceVariant,
                borderRadius: BorderRadius.circular(20).copyWith(
                  bottomLeft: message.isFromCurrentUser
                      ? const Radius.circular(20)
                      : const Radius.circular(4),
                  bottomRight: message.isFromCurrentUser
                      ? const Radius.circular(4)
                      : const Radius.circular(20),
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    message.content,
                    style: TextStyle(
                      color: message.isFromCurrentUser
                          ? theme.colorScheme.onPrimary
                          : theme.colorScheme.onSurfaceVariant,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    _formatMessageTime(message.timestamp),
                    style: TextStyle(
                      color: message.isFromCurrentUser
                          ? theme.colorScheme.onPrimary.withOpacity(0.7)
                          : theme.colorScheme.onSurfaceVariant.withOpacity(0.7),
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ),
          if (message.isFromCurrentUser) ...[
            const SizedBox(width: 8),
            CircleAvatar(
              radius: 16,
              backgroundColor: theme.colorScheme.secondary,
              child: Icon(
                Icons.person,
                size: 16,
                color: theme.colorScheme.onSecondary,
              ),
            ),
          ],
        ],
      ),
    );
  }
  Widget _buildMessageInput(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        border: Border(
          top: BorderSide(
            color: theme.colorScheme.outline.withOpacity(0.2),
          ),
        ),
      ),
      child: Row(
        children: [
          // Attachment button
          IconButton(
            onPressed: () => _showAttachmentOptions(context),
            icon: const Icon(Icons.attach_file),
            tooltip: 'Attach File',
          ),
          // Message input field
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: InputDecoration(
                hintText: 'Type a message...',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(24),
                  borderSide: BorderSide.none,
                ),
                filled: true,
                fillColor: theme.colorScheme.surfaceVariant.withOpacity(0.5),
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 12,
                ),
              ),
              maxLines: null,
              textCapitalization: TextCapitalization.sentences,
              onSubmitted: (_) => _sendMessage(),
            ),
          ),
          const SizedBox(width: 8),
          // Send button
          IconButton(
            onPressed: _sendMessage,
            icon: Icon(
              Icons.send,
              color: theme.colorScheme.primary,
            ),
          ),
        ],
      ),
    );
  }
  String _formatMessageTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    if (difference.inMinutes < 1) {
      return 'now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes}m ago';
    } else if (difference.inDays < 1) {
      return '${difference.inHours}h ago';
    } else {
      return '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp.minute.toString().padLeft(2, '0')}';
    }
  }
  void _startVoiceCall(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('Voice Call'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircleAvatar(
              radius: 40,
              backgroundColor: Theme.of(context).primaryColor.withValues(alpha: 0.1),
              child: Icon(
                Icons.person,
                size: 40,
                color: Theme.of(context).primaryColor,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Calling ${widget.userName}...',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            const Text('Connecting...'),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                FloatingActionButton(
                  onPressed: () => Navigator.of(context).pop(),
                  backgroundColor: Colors.red,
                  heroTag: 'end_call',
                  child: const Icon(Icons.call_end, color: Colors.white),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  void _startVideoCall(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('Video Call'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 200,
              height: 150,
              decoration: BoxDecoration(
                color: Colors.black,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Stack(
                children: [
                  Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        CircleAvatar(
                          radius: 30,
                          backgroundColor: Theme.of(context).primaryColor.withValues(alpha: 0.1),
                          child: Icon(
                            Icons.person,
                            size: 30,
                            color: Theme.of(context).primaryColor,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          widget.userName ?? 'User',
                          style: const TextStyle(color: Colors.white),
                        ),
                      ],
                    ),
                  ),
                  Positioned(
                    top: 8,
                    right: 8,
                    child: Container(
                      width: 50,
                      height: 70,
                      decoration: BoxDecoration(
                        color: Colors.grey[800],
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: const Center(
                        child: Text(
                          'You',
                          style: TextStyle(color: Colors.white, fontSize: 10),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Text('Connecting...'),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                FloatingActionButton(
                  onPressed: () {
                    // Toggle camera
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Camera toggled')),
                    );
                  },
                  backgroundColor: Colors.grey,
                  heroTag: 'toggle_camera',
                  mini: true,
                  child: const Icon(Icons.videocam, color: Colors.white),
                ),
                FloatingActionButton(
                  onPressed: () {
                    // Toggle microphone
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Microphone toggled')),
                    );
                  },
                  backgroundColor: Colors.grey,
                  heroTag: 'toggle_mic',
                  mini: true,
                  child: const Icon(Icons.mic, color: Colors.white),
                ),
                FloatingActionButton(
                  onPressed: () => Navigator.of(context).pop(),
                  backgroundColor: Colors.red,
                  heroTag: 'end_video_call',
                  mini: true,
                  child: const Icon(Icons.call_end, color: Colors.white),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  void _showAttachmentOptions(BuildContext context) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Attach File',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            GridView.count(
              crossAxisCount: 3,
              shrinkWrap: true,
              mainAxisSpacing: 16,
              crossAxisSpacing: 16,
              children: [
                _buildAttachmentOption(
                  context,
                  'Camera',
                  Icons.camera_alt,
                  Colors.blue,
                  () => _attachFromCamera(context),
                ),
                _buildAttachmentOption(
                  context,
                  'Gallery',
                  Icons.photo_library,
                  Colors.purple,
                  () => _attachFromGallery(context),
                ),
                _buildAttachmentOption(
                  context,
                  'Document',
                  Icons.insert_drive_file,
                  Colors.orange,
                  () => _attachDocument(context),
                ),
                _buildAttachmentOption(
                  context,
                  'Location',
                  Icons.location_on,
                  Colors.red,
                  () => _attachLocation(context),
                ),
                _buildAttachmentOption(
                  context,
                  'Plant Info',
                  Icons.local_florist,
                  Colors.green,
                  () => _attachPlantInfo(context),
                ),
                _buildAttachmentOption(
                  context,
                  'Voice Note',
                  Icons.mic,
                  Colors.teal,
                  () => _recordVoiceNote(context),
                ),
              ],
            ),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
  Widget _buildAttachmentOption(
    BuildContext context,
    String label,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: () {
        Navigator.of(context).pop();
        onTap();
      },
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              color: color.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(color: color.withValues(alpha: 0.3)),
            ),
            child: Icon(icon, color: color, size: 28),
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: Theme.of(context).textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  void _attachFromCamera(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Opening camera...')),
    );
  }
  void _attachFromGallery(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Opening gallery...')),
    );
  }
  void _attachDocument(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Opening document picker...')),
    );
  }
  void _attachLocation(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Sharing current location...')),
    );
  }
  void _attachPlantInfo(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Share Plant Info'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.local_florist),
              title: const Text('My Monstera'),
              subtitle: const Text('Care tips and photos'),
              onTap: () {
                Navigator.of(context).pop();
                _sharePlantInfo('My Monstera');
              },
            ),
            ListTile(
              leading: const Icon(Icons.local_florist),
              title: const Text('Snake Plant'),
              subtitle: const Text('Growth progress'),
              onTap: () {
                Navigator.of(context).pop();
                _sharePlantInfo('Snake Plant');
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }
  void _sharePlantInfo(String plantName) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Shared $plantName information')),
    );
  }
  void _recordVoiceNote(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Record Voice Note'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.mic,
              size: 60,
              color: Colors.red,
            ),
            const SizedBox(height: 16),
            const Text('Recording...'),
            const SizedBox(height: 8),
            const Text('00:15'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Voice note sent!')),
              );
            },
            child: const Text('Send'),
          ),
        ],
      ),
    );
  }
}
/// Mock message model for demonstration
class MockMessage {
  final String id;
  final String content;
  final String senderId;
  final DateTime timestamp;
  final bool isFromCurrentUser;
  MockMessage({
    required this.id,
    required this.content,
    required this.senderId,
    required this.timestamp,
    required this.isFromCurrentUser,
  });
}
</file>

<file path="lib/features/friends/presentation/screens/add_friends_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../../../core/models/user.dart';
/// Add friends screen for discovering and connecting with new users
class AddFriendsScreen extends ConsumerStatefulWidget {
  const AddFriendsScreen({super.key});
  @override
  ConsumerState<AddFriendsScreen> createState() => _AddFriendsScreenState();
}
class _AddFriendsScreenState extends ConsumerState<AddFriendsScreen> {
  final _searchController = TextEditingController();
  String _searchQuery = '';
  bool _isSearching = false;
  List<MockUser> _searchResults = [];
  @override
  void initState() {
    super.initState();
    _searchController.addListener(() {
      setState(() {
        _searchQuery = _searchController.text;
      });
      _performSearch();
    });
  }
  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
  void _performSearch() async {
    if (_searchQuery.isEmpty) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      return;
    }
    setState(() {
      _isSearching = true;
    });
    // Simulate API search delay
    await Future.delayed(const Duration(milliseconds: 500));
    if (mounted) {
      setState(() {
        _searchResults = _getMockSearchResults(_searchQuery);
        _isSearching = false;
      });
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Friends'),
        actions: [
          PopupMenuButton<String>(
            onSelected: _handleMenuAction,
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'sync_contacts',
                child: Row(
                  children: [
                    Icon(Icons.contacts),
                    SizedBox(width: 8),
                    Text('Sync Contacts'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'invite_by_link',
                child: Row(
                  children: [
                    Icon(Icons.link),
                    SizedBox(width: 8),
                    Text('Invite by Link'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'qr_code',
                child: Row(
                  children: [
                    Icon(Icons.qr_code),
                    SizedBox(width: 8),
                    Text('QR Code'),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      body: Column(
        children: [
          // Search section
          _buildSearchSection(theme),
          // Content
          Expanded(
            child: _buildContent(theme),
          ),
        ],
      ),
    );
  }
  Widget _buildSearchSection(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        boxShadow: [
          BoxShadow(
            color: theme.colorScheme.shadow.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // Search bar
          TextField(
            controller: _searchController,
            decoration: InputDecoration(
              hintText: 'Search by name, email, or username...',
              prefixIcon: const Icon(Icons.search),
              suffixIcon: _searchQuery.isNotEmpty
                  ? IconButton(
                      onPressed: () {
                        _searchController.clear();
                      },
                      icon: const Icon(Icons.clear),
                    )
                  : null,
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              filled: true,
              fillColor: theme.colorScheme.surface,
            ),
          ),
          const SizedBox(height: 16),
          // Quick actions
          Row(
            children: [
              Expanded(
                child: _buildQuickAction(
                  theme,
                  Icons.contacts,
                  'Contacts',
                  'Find friends from your contacts',
                  () => _handleMenuAction('sync_contacts'),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickAction(
                  theme,
                  Icons.qr_code_scanner,
                  'Scan QR',
                  'Scan a friend\'s QR code',
                  () => _handleMenuAction('qr_code'),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  Widget _buildQuickAction(
    ThemeData theme,
    IconData icon,
    String title,
    String subtitle,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: theme.colorScheme.primary.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: theme.colorScheme.primary.withOpacity(0.2),
          ),
        ),
        child: Column(
          children: [
            Icon(
              icon,
              color: theme.colorScheme.primary,
              size: 24,
            ),
            const SizedBox(height: 8),
            Text(
              title,
              style: TextStyle(
                fontWeight: FontWeight.w500,
                color: theme.colorScheme.primary,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: TextStyle(
                fontSize: 11,
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildContent(ThemeData theme) {
    if (_searchQuery.isEmpty) {
      return _buildSuggestionsView(theme);
    }
    if (_isSearching) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('Searching for users...'),
          ],
        ),
      );
    }
    if (_searchResults.isEmpty) {
      return _buildEmptySearchResults(theme);
    }
    return _buildSearchResults(theme);
  }
  Widget _buildSuggestionsView(ThemeData theme) {
    final suggestions = _getMockSuggestions();
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Suggested for You',
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'People you might know based on your interests and connections',
            style: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.onSurface.withOpacity(0.7),
            ),
          ),
          const SizedBox(height: 16),
          ...suggestions.map((user) => _buildUserCard(user, theme)),
          const SizedBox(height: 24),
          // Popular plant enthusiasts section
          Text(
            'Popular Plant Enthusiasts',
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Connect with experienced gardeners and plant lovers',
            style: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.onSurface.withOpacity(0.7),
            ),
          ),
          const SizedBox(height: 16),
          ...(_getMockPopularUsers().map((user) => _buildUserCard(user, theme))),
        ],
      ),
    );
  }
  Widget _buildSearchResults(ThemeData theme) {
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _searchResults.length,
      itemBuilder: (context, index) {
        return _buildUserCard(_searchResults[index], theme);
      },
    );
  }
  Widget _buildEmptySearchResults(ThemeData theme) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.search_off,
              size: 80,
              color: theme.colorScheme.onSurface.withOpacity(0.3),
            ),
            const SizedBox(height: 16),
            Text(
              'No users found',
              style: theme.textTheme.headlineSmall?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Try searching with a different name or email',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.5),
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () => _handleMenuAction('invite_by_link'),
              child: const Text('Invite Friends'),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildUserCard(MockUser user, ThemeData theme) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            // Profile picture
            CircleAvatar(
              radius: 24,
              backgroundColor: theme.colorScheme.primary,
              child: Text(
                user.displayName.split(' ').map((name) => name[0]).join(),
                style: TextStyle(
                  color: theme.colorScheme.onPrimary,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            const SizedBox(width: 12),
            // User info
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          user.displayName,
                          style: const TextStyle(fontWeight: FontWeight.w500),
                        ),
                      ),
                      if (user.isVerified)
                        Icon(
                          Icons.verified,
                          size: 16,
                          color: theme.colorScheme.primary,
                        ),
                    ],
                  ),
                  if (user.username.isNotEmpty)
                    Text(
                      '@${user.username}',
                      style: TextStyle(
                        fontSize: 12,
                        color: theme.colorScheme.onSurface.withOpacity(0.7),
                      ),
                    ),
                  Text(
                    user.bio,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: TextStyle(
                      fontSize: 12,
                      color: theme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                  ),
                  if (user.mutualFriends > 0)
                    Text(
                      '${user.mutualFriends} mutual friends',
                      style: TextStyle(
                        fontSize: 11,
                        color: theme.colorScheme.primary,
                      ),
                    ),
                  if (user.reason.isNotEmpty)
                    Text(
                      user.reason,
                      style: TextStyle(
                        fontSize: 11,
                        color: theme.colorScheme.primary,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(width: 12),
            // Action button
            _buildActionButton(user, theme),
          ],
        ),
      ),
    );
  }
  Widget _buildActionButton(MockUser user, ThemeData theme) {
    switch (user.status) {
      case UserStatus.notConnected:
        return ElevatedButton(
          onPressed: () => _sendFriendRequest(user),
          style: ElevatedButton.styleFrom(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          ),
          child: const Text(
            'Add',
            style: TextStyle(fontSize: 12),
          ),
        );
      case UserStatus.requestSent:
        return OutlinedButton(
          onPressed: () => _cancelFriendRequest(user),
          style: OutlinedButton.styleFrom(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          ),
          child: const Text(
            'Requested',
            style: TextStyle(fontSize: 12),
          ),
        );
      case UserStatus.friends:
        return OutlinedButton(
          onPressed: () => _viewProfile(user),
          style: OutlinedButton.styleFrom(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          ),
          child: const Text(
            'Friends',
            style: TextStyle(fontSize: 12),
          ),
        );
    }
  }
  List<MockUser> _getMockSuggestions() {
    return [
      MockUser(
        id: 'suggestion1',
        name: 'Grace Fern',
        username: 'gracefern',
        bio: 'Tropical plant collector 🌴',
        mutualFriends: 6,
        reason: 'Lives in your area',
        isVerified: true,
        status: UserStatus.notConnected,
      ),
      MockUser(
        id: 'suggestion2',
        name: 'Henry Sage',
        username: 'henrysage',
        bio: 'Organic gardener 🥬',
        mutualFriends: 2,
        reason: 'Friend of Alice Green',
        status: UserStatus.notConnected,
      ),
      MockUser(
        id: 'suggestion3',
        name: 'Ivy Mint',
        username: 'ivymint',
        bio: 'Hydroponic enthusiast 💧',
        mutualFriends: 0,
        reason: 'Similar interests',
        status: UserStatus.requestSent,
      ),
    ];
  }
  List<MockUser> _getMockPopularUsers() {
    return [
      MockUser(
        id: 'popular1',
        name: 'Dr. Plant Expert',
        username: 'drplantexpert',
        bio: 'Botanist & Plant Care Specialist 🔬🌿',
        mutualFriends: 0,
        reason: 'Popular in your area',
        isVerified: true,
        status: UserStatus.notConnected,
      ),
      MockUser(
        id: 'popular2',
        name: 'Garden Guru',
        username: 'gardenguru',
        bio: 'Sharing 20+ years of gardening wisdom 🌻',
        mutualFriends: 0,
        reason: 'Trending this week',
        isVerified: true,
        status: UserStatus.friends,
      ),
    ];
  }
  List<MockUser> _getMockSearchResults(String query) {
    final allUsers = [
      ...(_getMockSuggestions()),
      ...(_getMockPopularUsers()),
      MockUser(
        id: 'search1',
        name: 'Plant Lover',
        username: 'plantlover123',
        bio: 'New to plant parenting 🌱',
        status: UserStatus.notConnected,
      ),
      MockUser(
        id: 'search2',
        name: 'Green Thumb',
        username: 'greenthumb',
        bio: 'Cactus collection enthusiast 🌵',
        status: UserStatus.notConnected,
      ),
    ];
    return allUsers.where((user) {
      final searchLower = query.toLowerCase();
      return user.displayName.toLowerCase().contains(searchLower) ||
             user.username.toLowerCase().contains(searchLower) ||
             user.bio.toLowerCase().contains(searchLower);
    }).toList();
  }
  void _handleMenuAction(String action) {
    switch (action) {
      case 'sync_contacts':
        _showContactSyncDialog();
        break;
      case 'invite_by_link':
        _showInviteLinkDialog();
        break;
      case 'qr_code':
        _showQRCodeDialog();
        break;
    }
  }
  void _sendFriendRequest(MockUser user) {
    setState(() {
      user.status = UserStatus.requestSent;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Friend request sent to ${user.displayName}'),
        backgroundColor: Colors.green,
      ),
    );
  }
  void _cancelFriendRequest(MockUser user) {
    setState(() {
      user.status = UserStatus.notConnected;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Friend request to ${user.displayName} cancelled'),
      ),
    );
  }
  void _viewProfile(MockUser user) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Opening ${user.displayName}\'s profile (Demo mode)'),
      ),
    );
  }
  void _showContactSyncDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Sync Contacts'),
        content: const Text(
          'Allow Plant Social to access your contacts to find friends who are already using the app?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Not Now'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _showComingSoon('Contact Sync');
            },
            child: const Text('Allow'),
          ),
        ],
      ),
    );
  }
  void _showInviteLinkDialog() {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Invite Friends',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Row(
                children: [
                  Expanded(
                    child: Text(
                      'https://plantsocial.app/invite/abc123',
                      style: TextStyle(fontFamily: 'monospace'),
                    ),
                  ),
                  Icon(Icons.copy),
                ],
              ),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: () {
                      Navigator.pop(context);
                      _showComingSoon('Copy Link');
                    },
                    child: const Text('Copy Link'),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context);
                      _showComingSoon('Share Link');
                    },
                    child: const Text('Share'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  void _showQRCodeDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('QR Code'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 200,
              height: 200,
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.qr_code,
                    size: 80,
                    color: Colors.grey,
                  ),
                  SizedBox(height: 8),
                  Text(
                    'QR Code\n(Demo)',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.grey),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Share this QR code with friends to connect instantly!',
              textAlign: TextAlign.center,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _showComingSoon('QR Code Sharing');
            },
            child: const Text('Share'),
          ),
        ],
      ),
    );
  }
  void _showComingSoon(String feature) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
                          content: Text('$feature feature is now available!'),
        action: SnackBarAction(
          label: 'OK',
          onPressed: () {},
        ),
      ),
    );
  }
}
/// User status enum
enum UserStatus {
  notConnected,
  requestSent,
  friends,
}
/// Mock user model for demonstration
class MockUser {
  final String id;
  final String name;
  final String username;
  final String bio;
  final int mutualFriends;
  final String reason;
  final bool isVerified;
  UserStatus status;
  MockUser({
    required this.id,
    required this.name,
    this.username = '',
    required this.bio,
    this.mutualFriends = 0,
    this.reason = '',
    this.isVerified = false,
    this.status = UserStatus.notConnected,
  });
  String get displayName => name;
}
</file>

<file path="lib/features/friends/presentation/screens/friends_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
class FriendsScreen extends ConsumerStatefulWidget {
  const FriendsScreen({super.key});
  @override
  ConsumerState<FriendsScreen> createState() => _FriendsScreenState();
}
class _FriendsScreenState extends ConsumerState<FriendsScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
  }
  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back,
            color: theme.colorScheme.onSurface,
          ),
          onPressed: () => context.pop(),
        ),
        title: Text(
          'Friends',
          style: theme.textTheme.titleLarge?.copyWith(
            fontWeight: FontWeight.bold,
            color: theme.colorScheme.onSurface,
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(
              Icons.person_add,
              color: theme.colorScheme.onSurface,
            ),
            onPressed: () {
              _showAddFriendDialog(context, theme);
            },
          ),
        ],
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(100),
          child: Column(
            children: [
              // Search Bar
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: TextField(
                  controller: _searchController,
                  onChanged: (value) {
                    setState(() {
                      _searchQuery = value;
                    });
                  },
                  decoration: InputDecoration(
                    hintText: 'Search friends...',
                    prefixIcon: Icon(
                      Icons.search,
                      color: theme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                    suffixIcon: _searchQuery.isNotEmpty
                        ? IconButton(
                            icon: Icon(
                              Icons.clear,
                              color: theme.colorScheme.onSurface.withOpacity(0.7),
                            ),
                            onPressed: () {
                              _searchController.clear();
                              setState(() {
                                _searchQuery = '';
                              });
                            },
                          )
                        : null,
                    filled: true,
                    fillColor: theme.colorScheme.surface,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(
                        color: theme.colorScheme.outline.withOpacity(0.3),
                      ),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(
                        color: theme.colorScheme.outline.withOpacity(0.3),
                      ),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(
                        color: theme.colorScheme.primary,
                        width: 2,
                      ),
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 16),
              // Tab Bar
              TabBar(
                controller: _tabController,
                labelColor: theme.colorScheme.primary,
                unselectedLabelColor: theme.colorScheme.onSurface.withOpacity(0.7),
                indicatorColor: theme.colorScheme.primary,
                tabs: const [
                  Tab(text: 'Friends'),
                  Tab(text: 'Requests'),
                  Tab(text: 'Suggestions'),
                ],
              ),
            ],
          ),
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildFriendsTab(context, theme),
          _buildRequestsTab(context, theme),
          _buildSuggestionsTab(context, theme),
        ],
      ),
    );
  }
  Widget _buildFriendsTab(BuildContext context, ThemeData theme) {
    final friends = _getFilteredFriends();
    if (friends.isEmpty) {
      return _buildEmptyState(
        context,
        theme,
        Icons.people_outline,
        'No friends yet',
        'Start connecting with other plant lovers!',
        'Find Friends',
        () => _tabController.animateTo(2),
      );
    }
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: friends.length,
      itemBuilder: (context, index) {
        final friend = friends[index];
        return _buildFriendItem(context, theme, friend, 'friend');
      },
    );
  }
  Widget _buildRequestsTab(BuildContext context, ThemeData theme) {
    final requests = _getSampleRequests();
    if (requests.isEmpty) {
      return _buildEmptyState(
        context,
        theme,
        Icons.person_add_outlined,
        'No friend requests',
        'Friend requests will appear here',
        null,
        null,
      );
    }
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: requests.length,
      itemBuilder: (context, index) {
        final request = requests[index];
        return _buildFriendItem(context, theme, request, 'request');
      },
    );
  }
  Widget _buildSuggestionsTab(BuildContext context, ThemeData theme) {
    final suggestions = _getSampleSuggestions();
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: suggestions.length,
      itemBuilder: (context, index) {
        final suggestion = suggestions[index];
        return _buildFriendItem(context, theme, suggestion, 'suggestion');
      },
    );
  }
  Widget _buildFriendItem(
    BuildContext context,
    ThemeData theme,
    Map<String, dynamic> person,
    String type,
  ) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 1,
      shadowColor: theme.colorScheme.shadow.withOpacity(0.1),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        leading: Stack(
          children: [
            CircleAvatar(
              radius: 28,
              backgroundColor: (person['avatarColor'] as Color).withOpacity(0.2),
              child: Text(
                person['name'][0].toUpperCase(),
                style: theme.textTheme.titleLarge?.copyWith(
                  color: person['avatarColor'] as Color,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            if (type == 'friend' && person['isOnline'] == true)
              Positioned(
                bottom: 0,
                right: 0,
                child: Container(
                  width: 12,
                  height: 12,
                  decoration: BoxDecoration(
                    color: Colors.green,
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: theme.colorScheme.surface,
                      width: 2,
                    ),
                  ),
                ),
              ),
          ],
        ),
        title: Text(
          person['name'] as String,
          style: theme.textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
            color: theme.colorScheme.onSurface,
          ),
        ),
        subtitle: Text(
          person['subtitle'] as String,
          style: theme.textTheme.bodyMedium?.copyWith(
            color: theme.colorScheme.onSurface.withOpacity(0.7),
          ),
        ),
        trailing: _buildTrailingActions(context, theme, person, type),
        onTap: () {
          // TODO: Navigate to user profile
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Viewing ${person['name']}\'s profile'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        },
      ),
    );
  }
  Widget _buildTrailingActions(
    BuildContext context,
    ThemeData theme,
    Map<String, dynamic> person,
    String type,
  ) {
    switch (type) {
      case 'friend':
        return PopupMenuButton<String>(
          onSelected: (value) {
            _handleFriendAction(context, person['name'] as String, value);
          },
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'message',
              child: Text('Send Message'),
            ),
            const PopupMenuItem(
              value: 'unfriend',
              child: Text('Unfriend'),
            ),
          ],
        );
      case 'request':
        return Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(
                Icons.close,
                color: theme.colorScheme.error,
              ),
              onPressed: () {
                _handleRequestAction(context, person['name'] as String, 'decline');
              },
            ),
            IconButton(
              icon: Icon(
                Icons.check,
                color: Colors.green,
              ),
              onPressed: () {
                _handleRequestAction(context, person['name'] as String, 'accept');
              },
            ),
          ],
        );
      case 'suggestion':
        return Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextButton(
              onPressed: () {
                _handleSuggestionAction(context, person['name'] as String, 'ignore');
              },
              child: Text(
                'Ignore',
                style: TextStyle(
                  color: theme.colorScheme.onSurface.withOpacity(0.7),
                ),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                _handleSuggestionAction(context, person['name'] as String, 'add');
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: theme.colorScheme.primary,
                foregroundColor: theme.colorScheme.onPrimary,
                padding: const EdgeInsets.symmetric(horizontal: 16),
              ),
              child: const Text('Add'),
            ),
          ],
        );
      default:
        return const SizedBox.shrink();
    }
  }
  Widget _buildEmptyState(
    BuildContext context,
    ThemeData theme,
    IconData icon,
    String title,
    String subtitle,
    String? buttonText,
    VoidCallback? onButtonPressed,
  ) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              size: 64,
              color: theme.colorScheme.onSurface.withOpacity(0.5),
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              subtitle,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
              textAlign: TextAlign.center,
            ),
            if (buttonText != null && onButtonPressed != null) ...[
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: onButtonPressed,
                child: Text(buttonText),
              ),
            ],
          ],
        ),
      ),
    );
  }
  void _showAddFriendDialog(BuildContext context, ThemeData theme) {
    final controller = TextEditingController();
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add Friend'),
        content: TextField(
          controller: controller,
          decoration: const InputDecoration(
            hintText: 'Enter username or email',
            border: OutlineInputBorder(),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // TODO: Implement add friend functionality
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Friend request sent to ${controller.text}'),
                  backgroundColor: Colors.green,
                  behavior: SnackBarBehavior.floating,
                ),
              );
            },
            child: const Text('Send Request'),
          ),
        ],
      ),
    );
  }
  void _handleFriendAction(BuildContext context, String name, String action) {
    // TODO: Implement friend actions
    String message = '';
    switch (action) {
      case 'message':
        message = 'Opening chat with $name';
        break;
      case 'unfriend':
        message = 'Unfriended $name';
        break;
    }
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
  void _handleRequestAction(BuildContext context, String name, String action) {
    // TODO: Implement request actions
    String message = action == 'accept'
        ? 'Accepted friend request from $name'
        : 'Declined friend request from $name';
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: action == 'accept' ? Colors.green : null,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
  void _handleSuggestionAction(BuildContext context, String name, String action) {
    // TODO: Implement suggestion actions
    String message = action == 'add'
        ? 'Friend request sent to $name'
        : '$name removed from suggestions';
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: action == 'add' ? Colors.green : null,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
  List<Map<String, dynamic>> _getFilteredFriends() {
    final friends = _getSampleFriends();
    if (_searchQuery.isEmpty) return friends;
    return friends.where((friend) {
      return (friend['name'] as String)
          .toLowerCase()
          .contains(_searchQuery.toLowerCase());
    }).toList();
  }
  List<Map<String, dynamic>> _getSampleFriends() {
    return [
      {
        'name': 'Alice Green',
        'subtitle': 'Plant enthusiast • 2 mutual friends',
        'isOnline': true,
        'avatarColor': Colors.green,
      },
      {
        'name': 'Bob Plant',
        'subtitle': 'Gardening expert • 5 mutual friends',
        'isOnline': false,
        'avatarColor': Colors.blue,
      },
      {
        'name': 'Carol Bloom',
        'subtitle': 'Rose lover • 1 mutual friend',
        'isOnline': true,
        'avatarColor': Colors.pink,
      },
    ];
  }
  List<Map<String, dynamic>> _getSampleRequests() {
    return [
      {
        'name': 'David Chen',
        'subtitle': 'Wants to be your friend',
        'avatarColor': Colors.orange,
      },
      {
        'name': 'Emma Wilson',
        'subtitle': 'Sent you a friend request',
        'avatarColor': Colors.purple,
      },
    ];
  }
  List<Map<String, dynamic>> _getSampleSuggestions() {
    return [
      {
        'name': 'Sarah Johnson',
        'subtitle': '3 mutual friends',
        'avatarColor': Colors.teal,
      },
      {
        'name': 'Mike Brown',
        'subtitle': 'Plant collector',
        'avatarColor': Colors.indigo,
      },
      {
        'name': 'Lisa Garcia',
        'subtitle': '1 mutual friend',
        'avatarColor': Colors.red,
      },
    ];
  }
}
</file>

<file path="lib/features/friends/presentation/widgets/friend_suggestions.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
class FriendSuggestions extends ConsumerWidget {
  const FriendSuggestions({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Suggested Friends',
                style: theme.textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onSurface,
                ),
              ),
              TextButton(
                onPressed: () {
                  context.go(AppRoutes.friends);
                },
                child: Text(
                  'See All',
                  style: TextStyle(
                    color: theme.colorScheme.primary,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // Horizontal scrollable suggestions
          SizedBox(
            height: 200,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: _getSampleSuggestions().length,
              itemBuilder: (context, index) {
                final suggestion = _getSampleSuggestions()[index];
                return Padding(
                  padding: EdgeInsets.only(
                    right: index < _getSampleSuggestions().length - 1 ? 12 : 0,
                  ),
                  child: _buildSuggestionCard(context, theme, suggestion),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildSuggestionCard(
    BuildContext context,
    ThemeData theme,
    Map<String, dynamic> suggestion,
  ) {
    return SizedBox(
      width: 160,
      child: Card(
        elevation: 2,
        shadowColor: theme.colorScheme.shadow.withOpacity(0.1),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // Avatar
              CircleAvatar(
                radius: 32,
                backgroundColor: (suggestion['avatarColor'] as Color).withOpacity(0.2),
                child: Text(
                  suggestion['name'][0].toUpperCase(),
                  style: theme.textTheme.titleLarge?.copyWith(
                    color: suggestion['avatarColor'] as Color,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              // Name
              Text(
                suggestion['name'] as String,
                style: theme.textTheme.bodyLarge?.copyWith(
                  fontWeight: FontWeight.w600,
                  color: theme.colorScheme.onSurface,
                ),
                textAlign: TextAlign.center,
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 4),
              // Mutual friends or connection reason
              Text(
                suggestion['connection'] as String,
                style: theme.textTheme.bodySmall?.copyWith(
                  color: theme.colorScheme.onSurface.withOpacity(0.7),
                ),
                textAlign: TextAlign.center,
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              const Spacer(),
              // Action buttons
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: () {
                        _handleIgnoreSuggestion(context, suggestion['name'] as String);
                      },
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 8),
                        side: BorderSide(
                          color: theme.colorScheme.outline.withOpacity(0.5),
                        ),
                      ),
                      child: Text(
                        'Ignore',
                        style: theme.textTheme.labelSmall?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.7),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        _handleAddFriend(context, suggestion['name'] as String);
                      },
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 8),
                        backgroundColor: theme.colorScheme.primary,
                        foregroundColor: theme.colorScheme.onPrimary,
                      ),
                      child: Text(
                        'Add',
                        style: theme.textTheme.labelSmall?.copyWith(
                          color: theme.colorScheme.onPrimary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
  void _handleAddFriend(BuildContext context, String name) {
    // TODO: Implement add friend functionality
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Friend request sent to $name'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
  void _handleIgnoreSuggestion(BuildContext context, String name) {
    // TODO: Implement ignore suggestion functionality
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$name removed from suggestions'),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
  List<Map<String, dynamic>> _getSampleSuggestions() {
    return [
      {
        'name': 'Emma Wilson',
        'connection': '3 mutual friends',
        'avatarColor': Colors.purple,
      },
      {
        'name': 'David Chen',
        'connection': 'Plant enthusiast',
        'avatarColor': Colors.orange,
      },
      {
        'name': 'Sarah Johnson',
        'connection': '2 mutual friends',
        'avatarColor': Colors.teal,
      },
      {
        'name': 'Mike Brown',
        'connection': 'Gardening expert',
        'avatarColor': Colors.indigo,
      },
      {
        'name': 'Lisa Garcia',
        'connection': '1 mutual friend',
        'avatarColor': Colors.red,
      },
    ];
  }
}
</file>

<file path="lib/features/home/presentation/screens/home_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/models/user.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/features/auth/providers/auth_provider.dart';
class HomeScreen extends ConsumerWidget {
  const HomeScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final user = ref.watch(authProvider).user;
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Container(
              width: 32,
              height: 32,
              decoration: BoxDecoration(
                color: theme.colorScheme.primary,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                Icons.eco,
                size: 20,
                color: theme.colorScheme.onPrimary,
              ),
            ),
            const SizedBox(width: 12),
            Text(
              'Plant Social',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications_outlined),
            onPressed: () {
              // TODO: Navigate to notifications
            },
          ),
          IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              // TODO: Navigate to search
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Welcome section
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Welcome back, ${user?.displayName ?? 'Plant Lover'}! 🌱',
                    style: theme.textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: theme.colorScheme.onSurface,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Share your plant journey with friends',
                    style: theme.textTheme.bodyMedium?.copyWith(
                      color: theme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                  ),
                ],
              ),
            ),
            // Quick actions
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Quick Actions',
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: theme.colorScheme.onSurface,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Expanded(
                        child: _buildQuickActionCard(
                          context,
                          theme,
                          'Share Story',
                          Icons.add_a_photo,
                          () {
                            context.pushNamed(AppRoutes.camera);
                          },
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _buildQuickActionCard(
                          context,
                          theme,
                          'Find Friends',
                          Icons.person_add,
                          () {
                            context.pushNamed(AppRoutes.friends);
                          },
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            // Placeholder for stories
            Container(
              height: 120,
              padding: const EdgeInsets.symmetric(vertical: 16),
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                padding: const EdgeInsets.symmetric(horizontal: 16),
                itemCount: 5, // Placeholder count
                itemBuilder: (context, index) {
                  if (index == 0) {
                    return _buildYourStoryItem(theme);
                  }
                  return _buildStoryItem(theme, 'User $index', index % 2 == 0);
                },
              ),
            ),
            // Placeholder for feed
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Plant Community',
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: theme.colorScheme.onSurface,
                    ),
                  ),
                  const SizedBox(height: 16),
                  _buildFeedItem(theme, 'Alice Green',
                      'Just repotted my monstera! 🌱', '2h ago'),
                  const SizedBox(height: 16),
                  _buildFeedItem(theme, 'Bob Plant',
                      'Check out my new succulent collection 🌵', '5h ago'),
                  const SizedBox(height: 16),
                  _buildFeedItem(theme, 'Carol Bloom',
                      'Need help identifying this plant!', '1d ago'),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildQuickActionCard(
    BuildContext context,
    ThemeData theme,
    String title,
    IconData icon,
    VoidCallback onTap,
  ) {
    return Card(
      elevation: 2,
      shadowColor: theme.colorScheme.shadow.withOpacity(0.1),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: theme.colorScheme.primary.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  icon,
                  color: theme.colorScheme.primary,
                  size: 24,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                title,
                style: theme.textTheme.labelMedium?.copyWith(
                  fontWeight: FontWeight.w500,
                  color: theme.colorScheme.onSurface,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
  Widget _buildYourStoryItem(ThemeData theme) {
    return Container(
      width: 80,
      margin: const EdgeInsets.only(right: 12),
      child: Column(
        children: [
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(
                color: theme.colorScheme.outline.withOpacity(0.3),
                width: 2,
              ),
            ),
            child: Stack(
              children: [
                Center(
                  child: CircleAvatar(
                    radius: 28,
                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),
                    child: Text(
                      'Y',
                      style: theme.textTheme.titleMedium?.copyWith(
                        color: theme.colorScheme.primary,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
                Positioned(
                  bottom: 2,
                  right: 2,
                  child: Container(
                    width: 24,
                    height: 24,
                    decoration: BoxDecoration(
                      color: theme.colorScheme.primary,
                      shape: BoxShape.circle,
                      border: Border.all(
                        color: theme.colorScheme.surface,
                        width: 2,
                      ),
                    ),
                    child: Icon(
                      Icons.add,
                      size: 14,
                      color: theme.colorScheme.onPrimary,
                    ),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Your Story',
            style: theme.textTheme.labelSmall?.copyWith(
              color: theme.colorScheme.onSurface,
              fontWeight: FontWeight.w500,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }
  Widget _buildStoryItem(ThemeData theme, String name, bool hasStory) {
    return Container(
      width: 80,
      margin: const EdgeInsets.only(right: 12),
      child: Column(
        children: [
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              gradient: hasStory
                  ? LinearGradient(
                      colors: [
                        theme.colorScheme.primary,
                        theme.colorScheme.secondary,
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    )
                  : null,
              border: !hasStory
                  ? Border.all(
                      color: theme.colorScheme.outline.withOpacity(0.3),
                      width: 2,
                    )
                  : null,
            ),
            child: Padding(
              padding: EdgeInsets.all(hasStory ? 3 : 0),
              child: Container(
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  border: hasStory
                      ? Border.all(
                          color: theme.colorScheme.surface,
                          width: 2,
                        )
                      : null,
                ),
                child: CircleAvatar(
                  radius: hasStory ? 31 : 34,
                  backgroundColor: Colors.grey[300],
                  child: Text(
                    name[0].toUpperCase(),
                    style: theme.textTheme.titleLarge?.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            name,
            style: theme.textTheme.labelSmall?.copyWith(
              color: theme.colorScheme.onSurface,
              fontWeight: FontWeight.w500,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  Widget _buildFeedItem(
      ThemeData theme, String userName, String content, String timeAgo) {
    return Card(
      elevation: 2,
      shadowColor: theme.colorScheme.shadow.withOpacity(0.1),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // User info
            Row(
              children: [
                CircleAvatar(
                  radius: 20,
                  backgroundColor: theme.colorScheme.primary,
                  child: Text(
                    userName[0],
                    style: TextStyle(
                      color: theme.colorScheme.onPrimary,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        userName,
                        style: theme.textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Text(
                        timeAgo,
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.onSurface.withOpacity(0.6),
                        ),
                      ),
                    ],
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.more_vert),
                  onPressed: () {
                    // TODO: Show post options
                  },
                ),
              ],
            ),
            const SizedBox(height: 12),
            // Content
            Text(
              content,
              style: theme.textTheme.bodyMedium,
            ),
            const SizedBox(height: 16),
            // Placeholder for image
            Container(
              height: 200,
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(12),
              ),
              child: Center(
                child: Icon(
                  Icons.image,
                  size: 48,
                  color: Colors.grey[400],
                ),
              ),
            ),
            const SizedBox(height: 16),
            // Action buttons
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    IconButton(
                      icon: const Icon(Icons.favorite_border),
                      onPressed: () {
                        // TODO: Like post
                      },
                    ),
                    IconButton(
                      icon: const Icon(Icons.chat_bubble_outline),
                      onPressed: () {
                        // TODO: Comment on post
                      },
                    ),
                    IconButton(
                      icon: const Icon(Icons.share),
                      onPressed: () {
                        // TODO: Share post
                      },
                    ),
                  ],
                ),
                IconButton(
                  icon: const Icon(Icons.bookmark_border),
                  onPressed: () {
                    // TODO: Save post
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/home/presentation/screens/main_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/models/user.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/features/auth/providers/auth_provider.dart';
import 'package:plant_social/features/home/presentation/screens/home_screen.dart';
class MainScreen extends ConsumerStatefulWidget {
  const MainScreen({super.key});
  @override
  ConsumerState<MainScreen> createState() => _MainScreenState();
}
class _MainScreenState extends ConsumerState<MainScreen> {
  int _currentIndex = 0;
  final PageController _pageController = PageController();
  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }
  void _onTabTapped(int index) {
    setState(() {
      _currentIndex = index;
    });
    _pageController.animateToPage(
      index,
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
    );
  }
  void _onPageChanged(int index) {
    setState(() {
      _currentIndex = index;
    });
  }
  Future<void> _handleLogout() async {
    final shouldLogout = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Logout'),
        content: const Text('Are you sure you want to logout?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: const Text('Logout'),
          ),
        ],
      ),
    );
    if (shouldLogout == true && mounted) {
      await ref.read(authProvider.notifier).logout();
      if (mounted) {
        context.go(AppRoutes.login);
      }
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final authState = ref.watch(authProvider);
    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      body: PageView(
        controller: _pageController,
        onPageChanged: _onPageChanged,
        children: [
          const HomeScreen(), // Home screen
          _buildCameraPlaceholder(context, theme),
          _buildChatPlaceholder(context, theme),
          _buildStoriesPlaceholder(context, theme),
          _buildProfilePlaceholder(context, theme, authState.user?.displayName),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        currentIndex: _currentIndex,
        onTap: _onTabTapped,
        backgroundColor: theme.colorScheme.surface,
        selectedItemColor: theme.colorScheme.primary,
        unselectedItemColor: theme.colorScheme.onSurface.withOpacity(0.6),
        elevation: 8,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home_outlined),
            activeIcon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.camera_alt_outlined),
            activeIcon: Icon(Icons.camera_alt),
            label: 'Camera',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.chat_bubble_outline),
            activeIcon: Icon(Icons.chat_bubble),
            label: 'Chat',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.auto_stories_outlined),
            activeIcon: Icon(Icons.auto_stories),
            label: 'Stories',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person),
            label: 'Profile',
          ),
        ],
      ),
    );
  }
  Widget _buildCameraPlaceholder(BuildContext context, ThemeData theme) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Camera'),
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.camera_alt_outlined,
              size: 64,
              color: theme.colorScheme.primary,
            ),
            const SizedBox(height: 16),
            Text(
              'Camera Feature',
              style: theme.textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text(
              'Take photos and create stories',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildChatPlaceholder(BuildContext context, ThemeData theme) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Messages'),
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.chat_bubble_outline,
              size: 64,
              color: theme.colorScheme.primary,
            ),
            const SizedBox(height: 16),
            Text(
              'Messages',
              style: theme.textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text(
              'Chat with your plant friends',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildStoriesPlaceholder(BuildContext context, ThemeData theme) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Stories'),
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.auto_stories_outlined,
              size: 64,
              color: theme.colorScheme.primary,
            ),
            const SizedBox(height: 16),
            Text(
              'Stories',
              style: theme.textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text(
              'Share your plant moments',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildProfilePlaceholder(BuildContext context, ThemeData theme, String? userName) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Profile'),
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
        actions: [
          IconButton(
            onPressed: _handleLogout,
            icon: const Icon(Icons.logout),
            tooltip: 'Logout',
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircleAvatar(
              radius: 48,
              backgroundColor: theme.colorScheme.primary,
              child: Icon(
                Icons.person,
                size: 48,
                color: theme.colorScheme.onPrimary,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              userName ?? 'User',
              style: theme.textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text(
              'Plant enthusiast',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Opening profile editor...'),
                  ),
                );
              },
              icon: const Icon(Icons.edit),
              label: const Text('Edit Profile'),
            ),
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/home/presentation/widgets/bottom_nav_bar.dart">
import 'package:flutter/material.dart';
class BottomNavBar extends StatelessWidget {
  final int currentIndex;
  final ValueChanged<int> onTap;
  const BottomNavBar({
    super.key,
    required this.currentIndex,
    required this.onTap,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Container(
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        boxShadow: [
          BoxShadow(
            color: theme.colorScheme.shadow.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: SafeArea(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _buildNavItem(
                context,
                theme,
                0,
                Icons.home_outlined,
                Icons.home,
                'Home',
              ),
              _buildNavItem(
                context,
                theme,
                1,
                Icons.camera_alt_outlined,
                Icons.camera_alt,
                'Camera',
              ),
              _buildNavItem(
                context,
                theme,
                2,
                Icons.chat_outlined,
                Icons.chat,
                'Chat',
              ),
              _buildNavItem(
                context,
                theme,
                3,
                Icons.auto_stories_outlined,
                Icons.auto_stories,
                'Stories',
              ),
              _buildNavItem(
                context,
                theme,
                4,
                Icons.person_outlined,
                Icons.person,
                'Profile',
              ),
            ],
          ),
        ),
      ),
    );
  }
  Widget _buildNavItem(
    BuildContext context,
    ThemeData theme,
    int index,
    IconData outlinedIcon,
    IconData filledIcon,
    String label,
  ) {
    final isSelected = currentIndex == index;
    return GestureDetector(
      onTap: () => onTap(index),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: isSelected
              ? theme.colorScheme.primary.withOpacity(0.1)
              : Colors.transparent,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 200),
              child: Icon(
                isSelected ? filledIcon : outlinedIcon,
                key: ValueKey(isSelected),
                color: isSelected
                    ? theme.colorScheme.primary
                    : theme.colorScheme.onSurface.withOpacity(0.6),
                size: 24,
              ),
            ),
            const SizedBox(height: 4),
            AnimatedDefaultTextStyle(
              duration: const Duration(milliseconds: 200),
              style: theme.textTheme.labelSmall!.copyWith(
                color: isSelected
                    ? theme.colorScheme.primary
                    : theme.colorScheme.onSurface.withOpacity(0.6),
                fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
              ),
              child: Text(label),
            ),
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/messages/presentation/widgets/recent_conversations.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
class RecentConversations extends ConsumerWidget {
  const RecentConversations({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Recent Conversations',
                style: theme.textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onSurface,
                ),
              ),
              TextButton(
                onPressed: () {
                  // TODO: Navigate to all conversations
                },
                child: Text(
                  'See All',
                  style: TextStyle(
                    color: theme.colorScheme.primary,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // Sample Conversations
          ..._buildSampleConversations(context, theme),
          // Empty State
          if (_getSampleConversations().isEmpty)
            _buildEmptyState(context, theme),
        ],
      ),
    );
  }
  List<Widget> _buildSampleConversations(
      BuildContext context, ThemeData theme) {
    final conversations = _getSampleConversations();
    return conversations.take(3).map((conversation) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12),
        child: _buildConversationItem(context, theme, conversation),
      );
    }).toList();
  }
  Widget _buildConversationItem(
    BuildContext context,
    ThemeData theme,
    Map<String, dynamic> conversation,
  ) {
    return Card(
      elevation: 1,
      shadowColor: theme.colorScheme.shadow.withOpacity(0.1),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        leading: Stack(
          children: [
            CircleAvatar(
              radius: 24,
              backgroundColor:
                  (conversation['avatarColor'] as Color).withOpacity(0.2),
              child: Text(
                conversation['name'][0].toUpperCase(),
                style: theme.textTheme.titleMedium?.copyWith(
                  color: conversation['avatarColor'] as Color,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            if (conversation['isOnline'] as bool)
              Positioned(
                bottom: 0,
                right: 0,
                child: Container(
                  width: 12,
                  height: 12,
                  decoration: BoxDecoration(
                    color: Colors.green,
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: theme.colorScheme.surface,
                      width: 2,
                    ),
                  ),
                ),
              ),
          ],
        ),
        title: Text(
          conversation['name'] as String,
          style: theme.textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
            color: theme.colorScheme.onSurface,
          ),
        ),
        subtitle: Text(
          conversation['lastMessage'] as String,
          style: theme.textTheme.bodyMedium?.copyWith(
            color: theme.colorScheme.onSurface.withOpacity(0.7),
          ),
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              conversation['time'] as String,
              style: theme.textTheme.labelSmall?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.5),
              ),
            ),
            if (conversation['unreadCount'] as int > 0) ...[
              const SizedBox(height: 4),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: theme.colorScheme.primary,
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Text(
                  '${conversation['unreadCount']}',
                  style: theme.textTheme.labelSmall?.copyWith(
                    color: theme.colorScheme.onPrimary,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ],
        ),
        onTap: () {
          // TODO: Navigate to conversation
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Opening chat with ${conversation['name']}'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        },
      ),
    );
  }
  Widget _buildEmptyState(BuildContext context, ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          children: [
            Icon(
              Icons.chat_outlined,
              size: 48,
              color: theme.colorScheme.onSurface.withOpacity(0.5),
            ),
            const SizedBox(height: 16),
            Text(
              'No conversations yet',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Start chatting with your plant friends!',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                context.go(AppRoutes.friends);
              },
              child: const Text('Find Friends'),
            ),
          ],
        ),
      ),
    );
  }
  List<Map<String, dynamic>> _getSampleConversations() {
    return [
      {
        'name': 'Alice Green',
        'lastMessage': 'Check out my new succulent! 🌵',
        'time': '2m',
        'unreadCount': 2,
        'isOnline': true,
        'avatarColor': Colors.green,
      },
      {
        'name': 'Bob Plant',
        'lastMessage': 'Thanks for the watering tips!',
        'time': '1h',
        'unreadCount': 0,
        'isOnline': false,
        'avatarColor': Colors.blue,
      },
      {
        'name': 'Carol Bloom',
        'lastMessage': 'My roses are blooming beautifully 🌹',
        'time': '3h',
        'unreadCount': 1,
        'isOnline': true,
        'avatarColor': Colors.pink,
      },
    ];
  }
}
</file>

<file path="lib/features/plant_care/models/plant_care_models.dart">
import 'package:json_annotation/json_annotation.dart';
part 'plant_care_models.g.dart';
@JsonSerializable()
class PlantCareLog {
  final String id;
  final String userPlantId;
  final String careType;
  final DateTime careDate;
  final String? notes;
  final String? imageUrl;
  final Map<String, dynamic>? metadata;
  final DateTime createdAt;
  final DateTime updatedAt;
  const PlantCareLog({
    required this.id,
    required this.userPlantId,
    required this.careType,
    required this.careDate,
    this.notes,
    this.imageUrl,
    this.metadata,
    required this.createdAt,
    required this.updatedAt,
  });
  factory PlantCareLog.fromJson(Map<String, dynamic> json) {
    return PlantCareLog(
      id: json['id'] as String,
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      careDate: DateTime.parse(json['careDate'] as String),
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userPlantId': userPlantId,
      'careType': careType,
      'careDate': careDate.toIso8601String(),
      'notes': notes,
      'imageUrl': imageUrl,
      'metadata': metadata,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
    };
  }
}
@JsonSerializable()
class PlantCareReminder {
  final String id;
  final String userPlantId;
  final String careType;
  final DateTime nextDueDate;
  final int frequencyDays;
  final bool isActive;
  final String? notes;
  final DateTime? lastCompletedDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  // Related data
  final UserPlant? plant;
  const PlantCareReminder({
    required this.id,
    required this.userPlantId,
    required this.careType,
    required this.nextDueDate,
    required this.frequencyDays,
    required this.isActive,
    this.notes,
    this.lastCompletedDate,
    required this.createdAt,
    required this.updatedAt,
    this.plant,
  });
  factory PlantCareReminder.fromJson(Map<String, dynamic> json) {
    return PlantCareReminder(
      id: json['id'] as String,
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      nextDueDate: DateTime.parse(json['nextDueDate'] as String),
      frequencyDays: json['frequencyDays'] as int,
      isActive: json['isActive'] as bool,
      notes: json['notes'] as String?,
      lastCompletedDate: json['lastCompletedDate'] != null ? DateTime.parse(json['lastCompletedDate'] as String) : null,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
      plant: json['plant'] != null ? UserPlant.fromJson(json['plant'] as Map<String, dynamic>) : null,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userPlantId': userPlantId,
      'careType': careType,
      'nextDueDate': nextDueDate.toIso8601String(),
      'frequencyDays': frequencyDays,
      'isActive': isActive,
      'notes': notes,
      'lastCompletedDate': lastCompletedDate?.toIso8601String(),
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
      'plant': plant?.toJson(),
    };
  }
}
@JsonSerializable()
class UserPlant {
  final String id;
  final String userId;
  final String speciesId;
  final String nickname;
  final String? notes;
  final String? imageUrl;
  final DateTime acquiredDate;
  final String? location;
  final Map<String, dynamic>? customCareSchedule;
  final DateTime createdAt;
  final DateTime updatedAt;
  // Related data
  final PlantSpecies? species;
  final List<PlantCareLog>? careLogs;
  final List<PlantCareReminder>? reminders;
  const UserPlant({
    required this.id,
    required this.userId,
    required this.speciesId,
    required this.nickname,
    this.notes,
    this.imageUrl,
    required this.acquiredDate,
    this.location,
    this.customCareSchedule,
    required this.createdAt,
    required this.updatedAt,
    this.species,
    this.careLogs,
    this.reminders,
  });
  factory UserPlant.fromJson(Map<String, dynamic> json) {
    return UserPlant(
      id: json['id'] as String,
      userId: json['userId'] as String,
      speciesId: json['speciesId'] as String,
      nickname: json['nickname'] as String,
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      acquiredDate: DateTime.parse(json['acquiredDate'] as String),
      location: json['location'] as String?,
      customCareSchedule: json['customCareSchedule'] as Map<String, dynamic>?,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
      species: json['species'] != null ? PlantSpecies.fromJson(json['species'] as Map<String, dynamic>) : null,
      careLogs: (json['careLogs'] as List<dynamic>?)?.map((e) => PlantCareLog.fromJson(e as Map<String, dynamic>)).toList(),
      reminders: (json['reminders'] as List<dynamic>?)?.map((e) => PlantCareReminder.fromJson(e as Map<String, dynamic>)).toList(),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'speciesId': speciesId,
      'nickname': nickname,
      'notes': notes,
      'imageUrl': imageUrl,
      'acquiredDate': acquiredDate.toIso8601String(),
      'location': location,
      'customCareSchedule': customCareSchedule,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
      'species': species?.toJson(),
      'careLogs': careLogs?.map((e) => e.toJson()).toList(),
      'reminders': reminders?.map((e) => e.toJson()).toList(),
    };
  }
}
@JsonSerializable()
class PlantSpecies {
  final String id;
  final String commonName;
  final String scientificName;
  final String? family;
  final String? description;
  final String? imageUrl;
  final List<String>? alternativeNames;
  final List<String>? nativeRegions;
  final String? maxHeight;
  final String? bloomTime;
  final String? plantType;
  final PlantCareInfo? careInfo;
  final DateTime createdAt;
  final DateTime updatedAt;
  const PlantSpecies({
    required this.id,
    required this.commonName,
    required this.scientificName,
    this.family,
    this.description,
    this.imageUrl,
    this.alternativeNames,
    this.nativeRegions,
    this.maxHeight,
    this.bloomTime,
    this.plantType,
    this.careInfo,
    required this.createdAt,
    required this.updatedAt,
  });
  factory PlantSpecies.fromJson(Map<String, dynamic> json) {
    return PlantSpecies(
      id: json['id'] as String,
      commonName: json['commonName'] as String,
      scientificName: json['scientificName'] as String,
      family: json['family'] as String?,
      description: json['description'] as String?,
      imageUrl: json['imageUrl'] as String?,
      alternativeNames: (json['alternativeNames'] as List<dynamic>?)?.cast<String>(),
      nativeRegions: (json['nativeRegions'] as List<dynamic>?)?.cast<String>(),
      maxHeight: json['maxHeight'] as String?,
      bloomTime: json['bloomTime'] as String?,
      plantType: json['plantType'] as String?,
      careInfo: json['careInfo'] != null ? PlantCareInfo.fromJson(json['careInfo'] as Map<String, dynamic>) : null,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'commonName': commonName,
      'scientificName': scientificName,
      'family': family,
      'description': description,
      'imageUrl': imageUrl,
      'alternativeNames': alternativeNames,
      'nativeRegions': nativeRegions,
      'maxHeight': maxHeight,
      'bloomTime': bloomTime,
      'plantType': plantType,
      'careInfo': careInfo?.toJson(),
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
    };
  }
}
@JsonSerializable()
class PlantCareInfo {
  final String lightRequirement;
  final String waterFrequency;
  final String careLevel;
  final String? humidity;
  final String? temperature;
  final String? toxicity;
  final String? fertilizer;
  final String? repotting;
  final String? pruning;
  final Map<String, dynamic>? additionalCare;
  const PlantCareInfo({
    required this.lightRequirement,
    required this.waterFrequency,
    required this.careLevel,
    this.humidity,
    this.temperature,
    this.toxicity,
    this.fertilizer,
    this.repotting,
    this.pruning,
    this.additionalCare,
  });
  factory PlantCareInfo.fromJson(Map<String, dynamic> json) {
    return PlantCareInfo(
      lightRequirement: json['lightRequirement'] as String,
      waterFrequency: json['waterFrequency'] as String,
      careLevel: json['careLevel'] as String,
      humidity: json['humidity'] as String?,
      temperature: json['temperature'] as String?,
      toxicity: json['toxicity'] as String?,
      fertilizer: json['fertilizer'] as String?,
      repotting: json['repotting'] as String?,
      pruning: json['pruning'] as String?,
      additionalCare: json['additionalCare'] as Map<String, dynamic>?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'lightRequirement': lightRequirement,
      'waterFrequency': waterFrequency,
      'careLevel': careLevel,
      'humidity': humidity,
      'temperature': temperature,
      'toxicity': toxicity,
      'fertilizer': fertilizer,
      'repotting': repotting,
      'pruning': pruning,
      'additionalCare': additionalCare,
    };
  }
}
@JsonSerializable()
class PlantCareRequest {
  final String userPlantId;
  final String careType;
  final DateTime careDate;
  final String? notes;
  final String? imageUrl;
  final Map<String, dynamic>? metadata;
  const PlantCareRequest({
    required this.userPlantId,
    required this.careType,
    required this.careDate,
    this.notes,
    this.imageUrl,
    this.metadata,
  });
  factory PlantCareRequest.fromJson(Map<String, dynamic> json) {
    return PlantCareRequest(
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      careDate: DateTime.parse(json['careDate'] as String),
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'userPlantId': userPlantId,
      'careType': careType,
      'careDate': careDate.toIso8601String(),
      'notes': notes,
      'imageUrl': imageUrl,
      'metadata': metadata,
    };
  }
}
@JsonSerializable()
class PlantCareReminderRequest {
  final String userPlantId;
  final String careType;
  final DateTime nextDueDate;
  final int frequencyDays;
  final String? notes;
  const PlantCareReminderRequest({
    required this.userPlantId,
    required this.careType,
    required this.nextDueDate,
    required this.frequencyDays,
    this.notes,
  });
  factory PlantCareReminderRequest.fromJson(Map<String, dynamic> json) {
    return PlantCareReminderRequest(
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      nextDueDate: DateTime.parse(json['nextDueDate'] as String),
      frequencyDays: json['frequencyDays'] as int,
      notes: json['notes'] as String?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'userPlantId': userPlantId,
      'careType': careType,
      'nextDueDate': nextDueDate.toIso8601String(),
      'frequencyDays': frequencyDays,
      'notes': notes,
    };
  }
}
@JsonSerializable()
class UserPlantRequest {
  final String speciesId;
  final String nickname;
  final String? notes;
  final String? imageUrl;
  final DateTime acquiredDate;
  final String? location;
  final Map<String, dynamic>? customCareSchedule;
  const UserPlantRequest({
    required this.speciesId,
    required this.nickname,
    this.notes,
    this.imageUrl,
    required this.acquiredDate,
    this.location,
    this.customCareSchedule,
  });
  factory UserPlantRequest.fromJson(Map<String, dynamic> json) {
    return UserPlantRequest(
      speciesId: json['speciesId'] as String,
      nickname: json['nickname'] as String,
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      acquiredDate: DateTime.parse(json['acquiredDate'] as String),
      location: json['location'] as String?,
      customCareSchedule: json['customCareSchedule'] as Map<String, dynamic>?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'speciesId': speciesId,
      'nickname': nickname,
      'notes': notes,
      'imageUrl': imageUrl,
      'acquiredDate': acquiredDate.toIso8601String(),
      'location': location,
      'customCareSchedule': customCareSchedule,
    };
  }
}
@JsonSerializable()
class PlantCareState {
  final List<UserPlant> userPlants;
  final List<PlantCareLog> careLogs;
  final List<PlantCareReminder> reminders;
  final List<PlantCareReminder> upcomingReminders;
  final bool isLoading;
  final bool isLoadingPlants;
  final bool isLoadingLogs;
  final bool isLoadingReminders;
  final bool isCreating;
  final bool isUpdating;
  final bool isDeleting;
  final String? error;
  final String? createError;
  final String? updateError;
  final String? deleteError;
  const PlantCareState({
    this.userPlants = const [],
    this.careLogs = const [],
    this.reminders = const [],
    this.upcomingReminders = const [],
    this.isLoading = false,
    this.isLoadingPlants = false,
    this.isLoadingLogs = false,
    this.isLoadingReminders = false,
    this.isCreating = false,
    this.isUpdating = false,
    this.isDeleting = false,
    this.error,
    this.createError,
    this.updateError,
    this.deleteError,
  });
  factory PlantCareState.fromJson(Map<String, dynamic> json) {
    return PlantCareState(
      userPlants: (json['userPlants'] as List<dynamic>? ?? [])
          .map((e) => UserPlant.fromJson(e as Map<String, dynamic>))
          .toList(),
      careLogs: (json['careLogs'] as List<dynamic>? ?? [])
          .map((e) => PlantCareLog.fromJson(e as Map<String, dynamic>))
          .toList(),
      reminders: (json['reminders'] as List<dynamic>? ?? [])
          .map((e) => PlantCareReminder.fromJson(e as Map<String, dynamic>))
          .toList(),
      upcomingReminders: (json['upcomingReminders'] as List<dynamic>? ?? [])
          .map((e) => PlantCareReminder.fromJson(e as Map<String, dynamic>))
          .toList(),
      isLoading: json['isLoading'] as bool? ?? false,
      isLoadingPlants: json['isLoadingPlants'] as bool? ?? false,
      isLoadingLogs: json['isLoadingLogs'] as bool? ?? false,
      isLoadingReminders: json['isLoadingReminders'] as bool? ?? false,
      isCreating: json['isCreating'] as bool? ?? false,
      isUpdating: json['isUpdating'] as bool? ?? false,
      isDeleting: json['isDeleting'] as bool? ?? false,
      error: json['error'] as String?,
      createError: json['createError'] as String?,
      updateError: json['updateError'] as String?,
      deleteError: json['deleteError'] as String?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'userPlants': userPlants.map((e) => e.toJson()).toList(),
      'careLogs': careLogs.map((e) => e.toJson()).toList(),
      'reminders': reminders.map((e) => e.toJson()).toList(),
      'upcomingReminders': upcomingReminders.map((e) => e.toJson()).toList(),
      'isLoading': isLoading,
      'isLoadingPlants': isLoadingPlants,
      'isLoadingLogs': isLoadingLogs,
      'isLoadingReminders': isLoadingReminders,
      'isCreating': isCreating,
      'isUpdating': isUpdating,
      'isDeleting': isDeleting,
      'error': error,
      'createError': createError,
      'updateError': updateError,
      'deleteError': deleteError,
    };
  }
  PlantCareState copyWith({
    List<UserPlant>? userPlants,
    List<PlantCareLog>? careLogs,
    List<PlantCareReminder>? reminders,
    List<PlantCareReminder>? upcomingReminders,
    bool? isLoading,
    bool? isLoadingPlants,
    bool? isLoadingLogs,
    bool? isLoadingReminders,
    bool? isCreating,
    bool? isUpdating,
    bool? isDeleting,
    String? error,
    String? createError,
    String? updateError,
    String? deleteError,
  }) {
    return PlantCareState(
      userPlants: userPlants ?? this.userPlants,
      careLogs: careLogs ?? this.careLogs,
      reminders: reminders ?? this.reminders,
      upcomingReminders: upcomingReminders ?? this.upcomingReminders,
      isLoading: isLoading ?? this.isLoading,
      isLoadingPlants: isLoadingPlants ?? this.isLoadingPlants,
      isLoadingLogs: isLoadingLogs ?? this.isLoadingLogs,
      isLoadingReminders: isLoadingReminders ?? this.isLoadingReminders,
      isCreating: isCreating ?? this.isCreating,
      isUpdating: isUpdating ?? this.isUpdating,
      isDeleting: isDeleting ?? this.isDeleting,
      error: error ?? this.error,
      createError: createError ?? this.createError,
      updateError: updateError ?? this.updateError,
      deleteError: deleteError ?? this.deleteError,
    );
  }
}
// Care type constants
class CareType {
  static const String watering = 'watering';
  static const String fertilizing = 'fertilizing';
  static const String pruning = 'pruning';
  static const String repotting = 'repotting';
  static const String pestControl = 'pest_control';
  static const String observation = 'observation';
  static const String other = 'other';
  static const List<String> all = [
    watering,
    fertilizing,
    pruning,
    repotting,
    pestControl,
    observation,
    other,
  ];
  static String getDisplayName(String careType) {
    switch (careType) {
      case watering:
        return 'Watering';
      case fertilizing:
        return 'Fertilizing';
      case pruning:
        return 'Pruning';
      case repotting:
        return 'Repotting';
      case pestControl:
        return 'Pest Control';
      case observation:
        return 'Observation';
      case other:
        return 'Other';
      default:
        return careType;
    }
  }
  static String getIcon(String careType) {
    switch (careType) {
      case watering:
        return '💧';
      case fertilizing:
        return '🌱';
      case pruning:
        return '✂️';
      case repotting:
        return '🪴';
      case pestControl:
        return '🐛';
      case observation:
        return '👁️';
      case other:
        return '📝';
      default:
        return '🌿';
    }
  }
}
</file>

<file path="lib/features/plant_care/models/plant_care_models.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'plant_care_models.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
PlantCareLog _$PlantCareLogFromJson(Map<String, dynamic> json) => PlantCareLog(
      id: json['id'] as String,
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      careDate: DateTime.parse(json['careDate'] as String),
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
    );
Map<String, dynamic> _$PlantCareLogToJson(PlantCareLog instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userPlantId': instance.userPlantId,
      'careType': instance.careType,
      'careDate': instance.careDate.toIso8601String(),
      'notes': instance.notes,
      'imageUrl': instance.imageUrl,
      'metadata': instance.metadata,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt.toIso8601String(),
    };
PlantCareReminder _$PlantCareReminderFromJson(Map<String, dynamic> json) =>
    PlantCareReminder(
      id: json['id'] as String,
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      nextDueDate: DateTime.parse(json['nextDueDate'] as String),
      frequencyDays: (json['frequencyDays'] as num).toInt(),
      isActive: json['isActive'] as bool,
      notes: json['notes'] as String?,
      lastCompletedDate: json['lastCompletedDate'] == null
          ? null
          : DateTime.parse(json['lastCompletedDate'] as String),
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
      plant: json['plant'] == null
          ? null
          : UserPlant.fromJson(json['plant'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$PlantCareReminderToJson(PlantCareReminder instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userPlantId': instance.userPlantId,
      'careType': instance.careType,
      'nextDueDate': instance.nextDueDate.toIso8601String(),
      'frequencyDays': instance.frequencyDays,
      'isActive': instance.isActive,
      'notes': instance.notes,
      'lastCompletedDate': instance.lastCompletedDate?.toIso8601String(),
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt.toIso8601String(),
      'plant': instance.plant,
    };
UserPlant _$UserPlantFromJson(Map<String, dynamic> json) => UserPlant(
      id: json['id'] as String,
      userId: json['userId'] as String,
      speciesId: json['speciesId'] as String,
      nickname: json['nickname'] as String,
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      acquiredDate: DateTime.parse(json['acquiredDate'] as String),
      location: json['location'] as String?,
      customCareSchedule: json['customCareSchedule'] as Map<String, dynamic>?,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
      species: json['species'] == null
          ? null
          : PlantSpecies.fromJson(json['species'] as Map<String, dynamic>),
      careLogs: (json['careLogs'] as List<dynamic>?)
          ?.map((e) => PlantCareLog.fromJson(e as Map<String, dynamic>))
          .toList(),
      reminders: (json['reminders'] as List<dynamic>?)
          ?.map((e) => PlantCareReminder.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
Map<String, dynamic> _$UserPlantToJson(UserPlant instance) => <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'speciesId': instance.speciesId,
      'nickname': instance.nickname,
      'notes': instance.notes,
      'imageUrl': instance.imageUrl,
      'acquiredDate': instance.acquiredDate.toIso8601String(),
      'location': instance.location,
      'customCareSchedule': instance.customCareSchedule,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt.toIso8601String(),
      'species': instance.species,
      'careLogs': instance.careLogs,
      'reminders': instance.reminders,
    };
PlantSpecies _$PlantSpeciesFromJson(Map<String, dynamic> json) => PlantSpecies(
      id: json['id'] as String,
      commonName: json['commonName'] as String,
      scientificName: json['scientificName'] as String,
      family: json['family'] as String?,
      description: json['description'] as String?,
      imageUrl: json['imageUrl'] as String?,
      alternativeNames: (json['alternativeNames'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      nativeRegions: (json['nativeRegions'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
      maxHeight: json['maxHeight'] as String?,
      bloomTime: json['bloomTime'] as String?,
      plantType: json['plantType'] as String?,
      careInfo: json['careInfo'] == null
          ? null
          : PlantCareInfo.fromJson(json['careInfo'] as Map<String, dynamic>),
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
    );
Map<String, dynamic> _$PlantSpeciesToJson(PlantSpecies instance) =>
    <String, dynamic>{
      'id': instance.id,
      'commonName': instance.commonName,
      'scientificName': instance.scientificName,
      'family': instance.family,
      'description': instance.description,
      'imageUrl': instance.imageUrl,
      'alternativeNames': instance.alternativeNames,
      'nativeRegions': instance.nativeRegions,
      'maxHeight': instance.maxHeight,
      'bloomTime': instance.bloomTime,
      'plantType': instance.plantType,
      'careInfo': instance.careInfo,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt.toIso8601String(),
    };
PlantCareInfo _$PlantCareInfoFromJson(Map<String, dynamic> json) =>
    PlantCareInfo(
      lightRequirement: json['lightRequirement'] as String,
      waterFrequency: json['waterFrequency'] as String,
      careLevel: json['careLevel'] as String,
      humidity: json['humidity'] as String?,
      temperature: json['temperature'] as String?,
      toxicity: json['toxicity'] as String?,
      fertilizer: json['fertilizer'] as String?,
      repotting: json['repotting'] as String?,
      pruning: json['pruning'] as String?,
      additionalCare: json['additionalCare'] as Map<String, dynamic>?,
    );
Map<String, dynamic> _$PlantCareInfoToJson(PlantCareInfo instance) =>
    <String, dynamic>{
      'lightRequirement': instance.lightRequirement,
      'waterFrequency': instance.waterFrequency,
      'careLevel': instance.careLevel,
      'humidity': instance.humidity,
      'temperature': instance.temperature,
      'toxicity': instance.toxicity,
      'fertilizer': instance.fertilizer,
      'repotting': instance.repotting,
      'pruning': instance.pruning,
      'additionalCare': instance.additionalCare,
    };
PlantCareRequest _$PlantCareRequestFromJson(Map<String, dynamic> json) =>
    PlantCareRequest(
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      careDate: DateTime.parse(json['careDate'] as String),
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      metadata: json['metadata'] as Map<String, dynamic>?,
    );
Map<String, dynamic> _$PlantCareRequestToJson(PlantCareRequest instance) =>
    <String, dynamic>{
      'userPlantId': instance.userPlantId,
      'careType': instance.careType,
      'careDate': instance.careDate.toIso8601String(),
      'notes': instance.notes,
      'imageUrl': instance.imageUrl,
      'metadata': instance.metadata,
    };
PlantCareReminderRequest _$PlantCareReminderRequestFromJson(
        Map<String, dynamic> json) =>
    PlantCareReminderRequest(
      userPlantId: json['userPlantId'] as String,
      careType: json['careType'] as String,
      nextDueDate: DateTime.parse(json['nextDueDate'] as String),
      frequencyDays: (json['frequencyDays'] as num).toInt(),
      notes: json['notes'] as String?,
    );
Map<String, dynamic> _$PlantCareReminderRequestToJson(
        PlantCareReminderRequest instance) =>
    <String, dynamic>{
      'userPlantId': instance.userPlantId,
      'careType': instance.careType,
      'nextDueDate': instance.nextDueDate.toIso8601String(),
      'frequencyDays': instance.frequencyDays,
      'notes': instance.notes,
    };
UserPlantRequest _$UserPlantRequestFromJson(Map<String, dynamic> json) =>
    UserPlantRequest(
      speciesId: json['speciesId'] as String,
      nickname: json['nickname'] as String,
      notes: json['notes'] as String?,
      imageUrl: json['imageUrl'] as String?,
      acquiredDate: DateTime.parse(json['acquiredDate'] as String),
      location: json['location'] as String?,
      customCareSchedule: json['customCareSchedule'] as Map<String, dynamic>?,
    );
Map<String, dynamic> _$UserPlantRequestToJson(UserPlantRequest instance) =>
    <String, dynamic>{
      'speciesId': instance.speciesId,
      'nickname': instance.nickname,
      'notes': instance.notes,
      'imageUrl': instance.imageUrl,
      'acquiredDate': instance.acquiredDate.toIso8601String(),
      'location': instance.location,
      'customCareSchedule': instance.customCareSchedule,
    };
PlantCareState _$PlantCareStateFromJson(Map<String, dynamic> json) =>
    PlantCareState(
      userPlants: (json['userPlants'] as List<dynamic>?)
              ?.map((e) => UserPlant.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      careLogs: (json['careLogs'] as List<dynamic>?)
              ?.map((e) => PlantCareLog.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      reminders: (json['reminders'] as List<dynamic>?)
              ?.map(
                  (e) => PlantCareReminder.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      upcomingReminders: (json['upcomingReminders'] as List<dynamic>?)
              ?.map(
                  (e) => PlantCareReminder.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      isLoading: json['isLoading'] as bool? ?? false,
      isLoadingPlants: json['isLoadingPlants'] as bool? ?? false,
      isLoadingLogs: json['isLoadingLogs'] as bool? ?? false,
      isLoadingReminders: json['isLoadingReminders'] as bool? ?? false,
      isCreating: json['isCreating'] as bool? ?? false,
      isUpdating: json['isUpdating'] as bool? ?? false,
      isDeleting: json['isDeleting'] as bool? ?? false,
      error: json['error'] as String?,
      createError: json['createError'] as String?,
      updateError: json['updateError'] as String?,
      deleteError: json['deleteError'] as String?,
    );
Map<String, dynamic> _$PlantCareStateToJson(PlantCareState instance) =>
    <String, dynamic>{
      'userPlants': instance.userPlants,
      'careLogs': instance.careLogs,
      'reminders': instance.reminders,
      'upcomingReminders': instance.upcomingReminders,
      'isLoading': instance.isLoading,
      'isLoadingPlants': instance.isLoadingPlants,
      'isLoadingLogs': instance.isLoadingLogs,
      'isLoadingReminders': instance.isLoadingReminders,
      'isCreating': instance.isCreating,
      'isUpdating': instance.isUpdating,
      'isDeleting': instance.isDeleting,
      'error': instance.error,
      'createError': instance.createError,
      'updateError': instance.updateError,
      'deleteError': instance.deleteError,
    };
</file>

<file path="lib/features/plant_care/presentation/screens/add_plant_screen.dart">
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/features/plant_care/providers/plant_care_provider.dart';
import 'package:plant_social/features/plant_identification/models/plant_identification_models.dart';
import 'package:plant_social/features/plant_identification/providers/plant_identification_provider.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/widgets/custom_button.dart';
import 'package:plant_social/core/widgets/custom_text_field.dart';
class AddPlantScreen extends ConsumerStatefulWidget {
  final PlantSpecies? preselectedSpecies;
  final String? preselectedImagePath;
  const AddPlantScreen({
    super.key,
    this.preselectedSpecies,
    this.preselectedImagePath,
  });
  @override
  ConsumerState<AddPlantScreen> createState() => _AddPlantScreenState();
}
class _AddPlantScreenState extends ConsumerState<AddPlantScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nicknameController = TextEditingController();
  final _locationController = TextEditingController();
  final _notesController = TextEditingController();
  final _searchController = TextEditingController();
  PlantSpecies? _selectedSpecies;
  File? _selectedImage;
  DateTime _acquiredDate = DateTime.now();
  bool _isSearching = false;
  List<PlantSpecies> _searchResults = [];
  @override
  void initState() {
    super.initState();
    _selectedSpecies = widget.preselectedSpecies;
    if (widget.preselectedImagePath != null) {
      _selectedImage = File(widget.preselectedImagePath!);
    }
    if (_selectedSpecies != null) {
      _searchController.text = _selectedSpecies!.commonName;
    }
  }
  @override
  void dispose() {
    _nicknameController.dispose();
    _locationController.dispose();
    _notesController.dispose();
    _searchController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final plantCareState = ref.watch(plantCareProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Plant'),
        elevation: 0,
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Plant image section
              _buildImageSection(theme),
              const SizedBox(height: 24),
              // Plant species search
              _buildSpeciesSection(theme),
              const SizedBox(height: 24),
              // Plant details
              _buildDetailsSection(theme),
              const SizedBox(height: 32),
              // Add button
              SizedBox(
                width: double.infinity,
                child: CustomButton(
                  text: 'Add Plant',
                  onPressed: plantCareState.isLoading ? null : _addPlant,
                  isLoading: plantCareState.isLoading,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  Widget _buildImageSection(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Plant Photo',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        Center(
          child: GestureDetector(
            onTap: _showImagePickerOptions,
            child: Container(
              width: 200,
              height: 200,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: Colors.grey[300]!,
                  width: 2,
                  style: BorderStyle.solid,
                ),
                color: Colors.grey[50],
              ),
              child: _selectedImage != null
                  ? ClipRRect(
                      borderRadius: BorderRadius.circular(14),
                      child: Image.file(
                        _selectedImage!,
                        fit: BoxFit.cover,
                      ),
                    )
                  : Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.add_a_photo,
                          size: 48,
                          color: Colors.grey[400],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Add Photo',
                          style: theme.textTheme.bodyMedium?.copyWith(
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
            ),
          ),
        ),
      ],
    );
  }
  Widget _buildSpeciesSection(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Plant Species',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        CustomTextField(
          controller: _searchController,
          hint: 'Search for plant species...',
          prefixIcon: const Icon(Icons.search),
          onChanged: _searchSpecies,
          validator: (value) {
            if (_selectedSpecies == null) {
              return 'Please select a plant species';
            }
            return null;
          },
        ),
        if (_isSearching)
          const Padding(
            padding: EdgeInsets.all(16),
            child: Center(child: CircularProgressIndicator()),
          )
        else if (_searchResults.isNotEmpty)
          Container(
            margin: const EdgeInsets.only(top: 8),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey[300]!),
              borderRadius: BorderRadius.circular(8),
            ),
            child: ListView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: _searchResults.length,
              itemBuilder: (context, index) {
                final species = _searchResults[index];
                return ListTile(
                  title: Text(species.commonName),
                  subtitle: Text(species.scientificName),
                  onTap: () => _selectSpecies(species),
                  selected: _selectedSpecies?.id == species.id,
                );
              },
            ),
          ),
        if (_selectedSpecies != null)
          Container(
            margin: const EdgeInsets.only(top: 12),
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: theme.primaryColor.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(
                color: theme.primaryColor.withOpacity(0.3),
              ),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.check_circle,
                  color: theme.primaryColor,
                  size: 20,
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _selectedSpecies!.commonName,
                        style: theme.textTheme.bodyMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        _selectedSpecies!.scientificName,
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: Colors.grey[600],
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    ],
                  ),
                ),
                IconButton(
                  onPressed: () {
                    setState(() {
                      _selectedSpecies = null;
                      _searchController.clear();
                    });
                  },
                  icon: const Icon(Icons.close),
                  iconSize: 20,
                ),
              ],
            ),
          ),
      ],
    );
  }
  Widget _buildDetailsSection(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Plant Details',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        CustomTextField(
          controller: _nicknameController,
          label: 'Plant Nickname',
          hint: 'Give your plant a name...',
          prefixIcon: const Icon(Icons.pets),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Please enter a nickname for your plant';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        CustomTextField(
          controller: _locationController,
          label: 'Location (Optional)',
          hint: 'Where is this plant located?',
          prefixIcon: const Icon(Icons.location_on),
        ),
        const SizedBox(height: 16),
        ListTile(
          contentPadding: EdgeInsets.zero,
          leading: Icon(
            Icons.calendar_today,
            color: theme.primaryColor,
          ),
          title: const Text('Date Acquired'),
          subtitle: Text(
            '${_acquiredDate.day}/${_acquiredDate.month}/${_acquiredDate.year}',
          ),
          trailing: const Icon(Icons.chevron_right),
          onTap: _selectAcquiredDate,
        ),
        const SizedBox(height: 16),
        CustomTextField(
          controller: _notesController,
          label: 'Notes (Optional)',
          hint: 'Any additional notes about your plant...',
          prefixIcon: const Icon(Icons.note),
          maxLines: 3,
        ),
      ],
    );
  }
  void _showImagePickerOptions() {
    showModalBottomSheet(
      context: context,
      builder: (context) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.photo_camera),
              title: const Text('Take Photo'),
              onTap: () {
                Navigator.pop(context);
                _pickImage(ImageSource.camera);
              },
            ),
            ListTile(
              leading: const Icon(Icons.photo_library),
              title: const Text('Choose from Gallery'),
              onTap: () {
                Navigator.pop(context);
                _pickImage(ImageSource.gallery);
              },
            ),
            if (_selectedImage != null)
              ListTile(
                leading: const Icon(Icons.delete),
                title: const Text('Remove Photo'),
                onTap: () {
                  Navigator.pop(context);
                  setState(() {
                    _selectedImage = null;
                  });
                },
              ),
          ],
        ),
      ),
    );
  }
  Future<void> _pickImage(ImageSource source) async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(
      source: source,
      maxWidth: 1024,
      maxHeight: 1024,
      imageQuality: 85,
    );
    if (pickedFile != null) {
      setState(() {
        _selectedImage = File(pickedFile.path);
      });
    }
  }
  void _searchSpecies(String query) async {
    if (query.trim().isEmpty) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      return;
    }
    setState(() {
      _isSearching = true;
    });
    try {
      final results = await ref.read(plantSpeciesSearchProvider(query).future);
      setState(() {
        _searchResults = results;
        _isSearching = false;
      });
    } catch (e) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
    }
  }
  void _selectSpecies(PlantSpecies species) {
    setState(() {
      _selectedSpecies = species;
      _searchController.text = species.commonName;
      _searchResults = [];
    });
  }
  Future<void> _selectAcquiredDate() async {
    final selectedDate = await showDatePicker(
      context: context,
      initialDate: _acquiredDate,
      firstDate: DateTime(2000),
      lastDate: DateTime.now(),
    );
    if (selectedDate != null) {
      setState(() {
        _acquiredDate = selectedDate;
      });
    }
  }
  Future<void> _addPlant() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }
    try {
      final request = UserPlantRequest(
        nickname: _nicknameController.text.trim(),
        speciesId: _selectedSpecies!.id,
        location: _locationController.text.trim().isEmpty
            ? null
            : _locationController.text.trim(),
        acquiredDate: _acquiredDate,
        notes: _notesController.text.trim().isEmpty
            ? null
            : _notesController.text.trim(),
      );
      await ref.read(plantCareProvider.notifier).createUserPlant(request);
      if (mounted) {
        Navigator.pop(context, true);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${_nicknameController.text} added successfully!'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to add plant: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
</file>

<file path="lib/features/plant_care/presentation/screens/care_logs_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
/// Screen for viewing and managing plant care logs
class CareLogsScreen extends ConsumerStatefulWidget {
  const CareLogsScreen({super.key});
  @override
  ConsumerState<CareLogsScreen> createState() => _CareLogsScreenState();
}
class _CareLogsScreenState extends ConsumerState<CareLogsScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Care Logs'),
        backgroundColor: Colors.green[50],
        foregroundColor: Colors.green[800],
        elevation: 0,
      ),
      body: const Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            _CareLogsList(),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // TODO: Navigate to add care log screen
        },
        backgroundColor: Colors.green,
        child: const Icon(Icons.add),
      ),
    );
  }
}
/// Widget displaying the list of care logs
class _CareLogsList extends StatelessWidget {
  const _CareLogsList();
  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: ListView.builder(
        itemCount: 5, // Placeholder count
        itemBuilder: (context, index) {
          final careTypes = ['Watered', 'Fertilized', 'Pruned', 'Repotted', 'Checked'];
          final careType = careTypes[index % careTypes.length];
          final icons = {
            'Watered': Icons.water_drop,
            'Fertilized': Icons.eco,
            'Pruned': Icons.content_cut,
            'Repotted': Icons.local_florist,
            'Checked': Icons.visibility,
          };
          return Card(
            margin: const EdgeInsets.only(bottom: 12),
            child: ListTile(
              leading: CircleAvatar(
                backgroundColor: Colors.green[100],
                child: Icon(
                  icons[careType] ?? Icons.local_florist,
                  color: Colors.green[700],
                ),
              ),
              title: Text(careType),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('Plant ${index + 1}'),
                  Text(
                    '${DateTime.now().subtract(Duration(days: index)).day}/${DateTime.now().month}/${DateTime.now().year}',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
              trailing: IconButton(
                icon: const Icon(Icons.more_vert),
                onPressed: () {
                  // TODO: Show options menu
                },
              ),
            ),
          );
        },
      ),
    );
  }
}
</file>

<file path="lib/features/plant_care/presentation/screens/care_reminders_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
/// Screen for managing plant care reminders
class CareRemindersScreen extends ConsumerStatefulWidget {
  const CareRemindersScreen({super.key});
  @override
  ConsumerState<CareRemindersScreen> createState() => _CareRemindersScreenState();
}
class _CareRemindersScreenState extends ConsumerState<CareRemindersScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Care Reminders'),
        backgroundColor: Colors.green[50],
        foregroundColor: Colors.green[800],
        elevation: 0,
      ),
      body: const Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            _RemindersList(),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // TODO: Navigate to add reminder screen
        },
        backgroundColor: Colors.green,
        child: const Icon(Icons.add),
      ),
    );
  }
}
/// Widget displaying the list of care reminders
class _RemindersList extends StatelessWidget {
  const _RemindersList();
  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: ListView.builder(
        itemCount: 3, // Placeholder count
        itemBuilder: (context, index) {
          return Card(
            margin: const EdgeInsets.only(bottom: 12),
            child: ListTile(
              leading: CircleAvatar(
                backgroundColor: Colors.green[100],
                child: Icon(
                  Icons.water_drop,
                  color: Colors.green[700],
                ),
              ),
              title: Text('Water Plant ${index + 1}'),
              subtitle: const Text('Due in 2 days'),
              trailing: Switch(
                value: true,
                onChanged: (value) {
                  // TODO: Toggle reminder
                },
                activeColor: Colors.green,
              ),
            ),
          );
        },
      ),
    );
  }
}
</file>

<file path="lib/features/plant_care/presentation/screens/plant_care_dashboard_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/features/plant_care/providers/plant_care_provider.dart';
import 'package:plant_social/features/plant_care/presentation/screens/add_plant_screen.dart';
import 'package:plant_social/features/plant_care/presentation/screens/plant_detail_screen.dart';
import 'package:plant_social/features/plant_care/presentation/screens/care_reminders_screen.dart';
import 'package:plant_social/features/plant_care/presentation/screens/care_logs_screen.dart';
import 'package:plant_social/features/plant_care/presentation/widgets/plant_card.dart';
import 'package:plant_social/features/plant_care/presentation/widgets/care_reminder_card.dart';
import 'package:plant_social/core/widgets/loading_widget.dart';
import 'package:plant_social/core/widgets/error_widget.dart';
class PlantCareDashboardScreen extends ConsumerStatefulWidget {
  const PlantCareDashboardScreen({super.key});
  @override
  ConsumerState<PlantCareDashboardScreen> createState() =>
      _PlantCareDashboardScreenState();
}
class _PlantCareDashboardScreenState
    extends ConsumerState<PlantCareDashboardScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    // Load initial data
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(plantCareProvider.notifier).loadUserPlants();
      ref.read(plantCareProvider.notifier).loadUpcomingReminders();
    });
  }
  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final state = ref.watch(plantCareProvider);
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('My Plants'),
        backgroundColor: theme.primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              // Navigate to plant search
            },
          ),
          IconButton(
            icon: const Icon(Icons.notifications),
            onPressed: () {
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => const CareRemindersScreen(),
                ),
              );
            },
          ),
        ],
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Colors.white,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          tabs: const [
            Tab(text: 'Plants', icon: Icon(Icons.eco)),
            Tab(text: 'Reminders', icon: Icon(Icons.schedule)),
            Tab(text: 'Care Log', icon: Icon(Icons.history)),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildPlantsTab(state, theme),
          _buildRemindersTab(state, theme),
          _buildCareLogTab(state, theme),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.of(context).push(
            MaterialPageRoute(
              builder: (context) => const AddPlantScreen(),
            ),
          );
        },
        backgroundColor: theme.primaryColor,
        child: const Icon(Icons.add, color: Colors.white),
      ),
    );
  }
  Widget _buildPlantsTab(PlantCareState state, ThemeData theme) {
    if (state.isLoadingPlants) {
      return const Center(child: LoadingWidget());
    }
    if (state.error != null) {
      return Center(
        child: CustomErrorWidget(
          message: state.error!,
          onRetry: () {
            ref.read(plantCareProvider.notifier).loadUserPlants();
          },
        ),
      );
    }
    if (state.userPlants.isEmpty) {
      return _buildEmptyPlantsState(theme);
    }
    return RefreshIndicator(
      onRefresh: () async {
        await ref.read(plantCareProvider.notifier).loadUserPlants();
      },
      child: CustomScrollView(
        slivers: [
          // Quick stats
          SliverToBoxAdapter(
            child: _buildQuickStats(state, theme),
          ),
          // Plants grid
          SliverPadding(
            padding: const EdgeInsets.all(16),
            sliver: SliverGrid(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.8,
                crossAxisSpacing: 12,
                mainAxisSpacing: 12,
              ),
              delegate: SliverChildBuilderDelegate(
                (context, index) {
                  final plant = state.userPlants[index];
                  return PlantCard(
                    plant: plant,
                    onTap: () {
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (context) => PlantDetailScreen(plantId: plant.id),
                        ),
                      );
                    },
                  );
                },
                childCount: state.userPlants.length,
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildRemindersTab(PlantCareState state, ThemeData theme) {
    if (state.isLoadingReminders) {
      return const Center(child: LoadingWidget());
    }
    if (state.error != null) {
      return Center(
        child: CustomErrorWidget(
          message: state.error!,
          onRetry: () {
            ref.read(plantCareProvider.notifier).loadUpcomingReminders();
          },
        ),
      );
    }
    if (state.upcomingReminders.isEmpty) {
      return _buildEmptyRemindersState(theme);
    }
    return RefreshIndicator(
      onRefresh: () async {
        await ref.read(plantCareProvider.notifier).loadUpcomingReminders();
      },
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: state.upcomingReminders.length,
        itemBuilder: (context, index) {
          final reminder = state.upcomingReminders[index];
          return CareReminderCard(
            reminder: reminder,
            onTap: () {},
            onComplete: () {
              ref.read(plantCareProvider.notifier).completeReminder(reminder.id);
            },
            onSnooze: () {
              ref.read(plantCareProvider.notifier).snoozeReminder(reminder.id, 1);
            },
          );
        },
      ),
    );
  }
  Widget _buildCareLogTab(PlantCareState state, ThemeData theme) {
    return const CareLogsScreen();
  }
  Widget _buildQuickStats(PlantCareState state, ThemeData theme) {
    final totalPlants = state.userPlants.length;
    final upcomingReminders = state.upcomingReminders.length;
    final overdueReminders = state.upcomingReminders
        .where((r) => r.nextDueDate.isBefore(DateTime.now()))
        .length;
    return Column(
      children: [
        // Enhanced Stats with ML Analytics
        Container(
          margin: const EdgeInsets.all(16),
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [theme.primaryColor, theme.primaryColor.withValues(alpha: 0.8)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: theme.primaryColor.withValues(alpha: 0.3),
                blurRadius: 8,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            children: [
              Row(
                children: [
                  Icon(Icons.analytics, color: Colors.white, size: 20),
                  const SizedBox(width: 8),
                  Text(
                    'ML-Enhanced Plant Analytics',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: _buildStatItem(
                      'Plants',
                      totalPlants.toString(),
                      Icons.eco,
                      Colors.white,
                    ),
                  ),
                  Container(
                    width: 1,
                    height: 40,
                    color: Colors.white.withValues(alpha: 0.3),
                  ),
                  Expanded(
                    child: _buildStatItem(
                      'ML Health',
                      '87%',
                      Icons.psychology,
                      Colors.white,
                    ),
                  ),
                  Container(
                    width: 1,
                    height: 40,
                    color: Colors.white.withValues(alpha: 0.3),
                  ),
                  Expanded(
                    child: _buildStatItem(
                      'Risk Alerts',
                      overdueReminders.toString(),
                      Icons.warning,
                      overdueReminders > 0 ? Colors.orange[300]! : Colors.white,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
        // Rich Analytics Cards
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(
            children: [
              // ML Health Predictions Card
              _buildMLHealthCard(theme, state),
              const SizedBox(height: 12),
              // RAG Insights Card
              _buildRAGInsightsCard(theme),
              const SizedBox(height: 12),
              // Community Analytics Card
              _buildCommunityAnalyticsCard(theme),
            ],
          ),
        ),
      ],
    );
  }
  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    return Column(
      children: [
        Icon(
          icon,
          color: color,
          size: 24,
        ),
        const SizedBox(height: 8),
        Text(
          value,
          style: TextStyle(
            color: color,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            color: color.withValues(alpha: 0.9),
            fontSize: 12,
          ),
        ),
      ],
    );
  }
  Widget _buildEmptyPlantsState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.eco,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'No plants yet',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Add your first plant to start tracking care',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => const AddPlantScreen(),
                ),
              );
            },
            icon: const Icon(Icons.add),
            label: const Text('Add Plant'),
            style: ElevatedButton.styleFrom(
              backgroundColor: theme.primaryColor,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(
                horizontal: 24,
                vertical: 12,
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildEmptyRemindersState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.schedule,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'No upcoming reminders',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'All your plants are up to date!',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  Widget _buildMLHealthCard(ThemeData theme, PlantCareState state) {
    // Mock ML health data - would come from backend
    final mockHealthData = {
      'overall_health_score': 0.87,
      'risk_level': 'low',
      'model_confidence': 0.92,
      'feature_scores': {
        'watering_consistency': 0.89,
        'light_exposure': 0.85,
        'soil_nutrients': 0.78,
        'growth_rate': 0.91,
      },
      'risk_factors': [],
      'predictions': {
        'next_week_health': 0.89,
        'care_success_rate': 0.85,
      }
    };
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.psychology, color: theme.primaryColor, size: 24),
                const SizedBox(width: 8),
                Text(
                  'ML Plant Health Analytics',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.green.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.green.withValues(alpha: 0.3)),
                  ),
                  child: Text(
                    'LOW RISK',
                    style: theme.textTheme.bodySmall?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: Colors.green[700],
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Overall Health Score
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Overall Health Score',
                        style: theme.textTheme.bodyMedium?.copyWith(
                          color: Colors.grey[600],
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Text(
                            '87%',
                            style: theme.textTheme.headlineSmall?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Icon(Icons.health_and_safety, color: Colors.green, size: 20),
                        ],
                      ),
                    ],
                  ),
                ),
                Column(
                  children: [
                    Text(
                      'Model Confidence',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: Colors.grey[600],
                      ),
                    ),
                    Text(
                      '92%',
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: theme.primaryColor,
                      ),
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Feature Scores
            Text(
              'Health Factors',
              style: theme.textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),
            _buildFeatureScore(theme, 'Watering Consistency', 0.89),
            _buildFeatureScore(theme, 'Light Exposure', 0.85),
            _buildFeatureScore(theme, 'Soil Nutrients', 0.78),
            _buildFeatureScore(theme, 'Growth Rate', 0.91),
            const SizedBox(height: 12),
            // Predictions
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue.withValues(alpha: 0.3)),
              ),
              child: Row(
                children: [
                  Icon(Icons.trending_up, color: Colors.blue),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'ML Predictions',
                          style: theme.textTheme.bodyMedium?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          'Next week health: 89% • Care success rate: 85%',
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildFeatureScore(ThemeData theme, String label, double score) {
    Color scoreColor = score >= 0.8 ? Colors.green : score >= 0.6 ? Colors.orange : Colors.red;
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: theme.textTheme.bodySmall,
            ),
          ),
          Expanded(
            flex: 3,
            child: LinearProgressIndicator(
              value: score,
              backgroundColor: Colors.grey[200],
              valueColor: AlwaysStoppedAnimation<Color>(scoreColor),
            ),
          ),
          const SizedBox(width: 8),
          SizedBox(
            width: 35,
            child: Text(
              '${(score * 100).toInt()}%',
              style: theme.textTheme.bodySmall?.copyWith(
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildRAGInsightsCard(ThemeData theme) {
    // Mock RAG data - would come from backend
    final mockRAGData = {
      'total_queries': 2847,
      'success_rate': 94,
      'avg_response_time': 245,
      'recent_queries': ['Plant Health', 'Watering Tips', 'Pest Control', 'Fertilizer'],
      'response_quality': 0.94,
      'knowledge_coverage': {
        'Plant Care': 89.0,
        'Disease Treatment': 76.0,
        'Nutrition': 82.0,
      }
    };
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.smart_toy, color: theme.primaryColor, size: 24),
                const SizedBox(width: 8),
                Text(
                  'RAG Knowledge Insights',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.green.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    'ACTIVE',
                    style: theme.textTheme.bodySmall?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: Colors.green[700],
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // RAG Statistics
            Row(
              children: [
                Expanded(
                  child: _buildMiniMetric(theme, 'Total Queries', '2,847'),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildMiniMetric(theme, 'Success Rate', '94%'),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildMiniMetric(theme, 'Avg Response', '245ms'),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Knowledge Coverage
            Text(
              'Knowledge Coverage',
              style: theme.textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),
            _buildKnowledgeItem(theme, 'Plant Care', 89),
            _buildKnowledgeItem(theme, 'Disease Treatment', 76),
            _buildKnowledgeItem(theme, 'Nutrition', 82),
            const SizedBox(height: 12),
            // Response Quality
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Response Quality',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: Colors.grey[600],
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          ...List.generate(5, (index) {
                            return Icon(
                              index < 5 ? Icons.star : Icons.star_border,
                              color: Colors.amber,
                              size: 16,
                            );
                          }),
                          const SizedBox(width: 8),
                          Text(
                            '94%',
                            style: theme.textTheme.bodySmall?.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildKnowledgeItem(ThemeData theme, String label, int percentage) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: theme.textTheme.bodySmall,
            ),
          ),
          Expanded(
            flex: 3,
            child: LinearProgressIndicator(
              value: percentage / 100,
              backgroundColor: Colors.grey[200],
              valueColor: AlwaysStoppedAnimation<Color>(theme.primaryColor),
            ),
          ),
          const SizedBox(width: 8),
          Text(
            '$percentage%',
            style: theme.textTheme.bodySmall?.copyWith(
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildCommunityAnalyticsCard(ThemeData theme) {
    // Mock community data - would come from backend
    final mockCommunityData = {
      'avg_similarity_score': 0.76,
      'total_matches': 34,
      'top_interests': [
        {'interest': 'Indoor Plants', 'percentage': 78},
        {'interest': 'Succulents', 'percentage': 62},
        {'interest': 'Herbs', 'percentage': 45},
      ],
      'influence_score': 3.2,
    };
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.group, color: theme.primaryColor, size: 24),
                const SizedBox(width: 8),
                Text(
                  'Community Insights',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey[600]),
              ],
            ),
            const SizedBox(height: 16),
            // Matching Score
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Community Matching Score',
                        style: theme.textTheme.bodyMedium?.copyWith(
                          color: Colors.grey[600],
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '76%',
                        style: theme.textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: theme.primaryColor,
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  width: 40,
                  height: 40,
                  child: CircularProgressIndicator(
                    value: 0.76,
                    backgroundColor: Colors.grey[200],
                    valueColor: AlwaysStoppedAnimation<Color>(theme.primaryColor),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Top Shared Interests
            Text(
              'Top Shared Interests',
              style: theme.textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              runSpacing: 4,
              children: [
                Chip(
                  label: Text('Indoor Plants 78%', style: theme.textTheme.bodySmall),
                  backgroundColor: theme.primaryColor.withValues(alpha: 0.1),
                  side: BorderSide(color: theme.primaryColor.withValues(alpha: 0.3)),
                ),
                Chip(
                  label: Text('Succulents 62%', style: theme.textTheme.bodySmall),
                  backgroundColor: theme.primaryColor.withValues(alpha: 0.1),
                  side: BorderSide(color: theme.primaryColor.withValues(alpha: 0.3)),
                ),
                Chip(
                  label: Text('Herbs 45%', style: theme.textTheme.bodySmall),
                  backgroundColor: theme.primaryColor.withValues(alpha: 0.1),
                  side: BorderSide(color: theme.primaryColor.withValues(alpha: 0.3)),
                ),
              ],
            ),
            const SizedBox(height: 12),
            // Community Stats
            Row(
              children: [
                Expanded(
                  child: _buildMiniMetric(theme, 'Similar Users', '34'),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: _buildMiniMetric(theme, 'Influence Score', '3.2'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildMiniMetric(ThemeData theme, String label, String value) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[200]!),
      ),
      child: Column(
        children: [
          Text(
            value,
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: theme.primaryColor,
            ),
          ),
          const SizedBox(height: 2),
          Text(
            label,
            style: theme.textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/plant_care/presentation/screens/plant_detail_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/features/plant_care/providers/plant_care_provider.dart';
import 'package:plant_social/features/plant_care/presentation/widgets/care_reminder_card.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/widgets/custom_button.dart';
class PlantDetailScreen extends ConsumerStatefulWidget {
  final String plantId;
  const PlantDetailScreen({
    super.key,
    required this.plantId,
  });
  @override
  ConsumerState<PlantDetailScreen> createState() => _PlantDetailScreenState();
}
class _PlantDetailScreenState extends ConsumerState<PlantDetailScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  UserPlant? _plant;
  bool _isLoading = true;
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _loadPlantDetails();
  }
  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
  Future<void> _loadPlantDetails() async {
    try {
      final plant = await ref
          .read(plantCareServiceProvider)
          .getUserPlant(widget.plantId);
      setState(() {
        _plant = plant;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    if (_isLoading) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Plant Details'),
        ),
        body: const Center(
          child: CircularProgressIndicator(),
        ),
      );
    }
    if (_plant == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Plant Details'),
        ),
        body: const Center(
          child: Text('Plant not found'),
        ),
      );
    }
    return Scaffold(
      body: NestedScrollView(
        headerSliverBuilder: (context, innerBoxIsScrolled) => [
          _buildSliverAppBar(theme),
        ],
        body: Column(
          children: [
            _buildTabBar(theme),
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  _buildOverviewTab(),
                  _buildCareLogTab(),
                  _buildRemindersTab(),
                ],
              ),
            ),
          ],
        ),
      ),
      floatingActionButton: _buildFloatingActionButton(theme),
    );
  }
  Widget _buildSliverAppBar(ThemeData theme) {
    return SliverAppBar(
      expandedHeight: 300,
      pinned: true,
      flexibleSpace: FlexibleSpaceBar(
        title: Text(
          _plant!.nickname,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            shadows: [
              Shadow(
                offset: Offset(0, 1),
                blurRadius: 3,
                color: Colors.black54,
              ),
            ],
          ),
        ),
        background: Stack(
          fit: StackFit.expand,
          children: [
            _plant!.imageUrl != null
                ? Image.network(
                    _plant!.imageUrl!,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) {
                      return _buildImagePlaceholder(theme);
                    },
                  )
                : _buildImagePlaceholder(theme),
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.transparent,
                    Colors.black.withOpacity(0.7),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
      actions: [
        IconButton(
          onPressed: _showPlantOptions,
          icon: const Icon(Icons.more_vert),
        ),
      ],
    );
  }
  Widget _buildImagePlaceholder(ThemeData theme) {
    return Container(
      color: theme.primaryColor.withOpacity(0.1),
      child: Icon(
        Icons.eco,
        size: 80,
        color: theme.primaryColor.withOpacity(0.5),
      ),
    );
  }
  Widget _buildTabBar(ThemeData theme) {
    return Container(
      color: theme.scaffoldBackgroundColor,
      child: TabBar(
        controller: _tabController,
        labelColor: theme.primaryColor,
        unselectedLabelColor: Colors.grey,
        indicatorColor: theme.primaryColor,
        tabs: const [
          Tab(text: 'Overview'),
          Tab(text: 'Care Log'),
          Tab(text: 'Reminders'),
        ],
      ),
    );
  }
  Widget _buildOverviewTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Plant info card
          _buildInfoCard(),
          const SizedBox(height: 16),
          // Species info card
          if (_plant!.species != null) _buildSpeciesCard(),
          const SizedBox(height: 16),
          // Care statistics
          _buildCareStatsCard(),
        ],
      ),
    );
  }
  Widget _buildInfoCard() {
    final theme = Theme.of(context);
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Plant Information',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            _buildInfoRow(Icons.pets, 'Nickname', _plant!.nickname),
            if (_plant!.location != null)
              _buildInfoRow(Icons.location_on, 'Location', _plant!.location!),
            _buildInfoRow(
              Icons.calendar_today,
              'Acquired',
              _formatDate(_plant!.acquiredDate),
            ),
            _buildInfoRow(
              Icons.schedule,
              'Days with you',
              '${DateTime.now().difference(_plant!.acquiredDate).inDays} days',
            ),
            if (_plant!.notes != null && _plant!.notes!.isNotEmpty) ...[
              const SizedBox(height: 8),
              Text(
                'Notes',
                style: theme.textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                _plant!.notes!,
                style: theme.textTheme.bodyMedium,
              ),
            ],
          ],
        ),
      ),
    );
  }
  Widget _buildSpeciesCard() {
    final theme = Theme.of(context);
    final species = _plant!.species!;
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Species Information',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            _buildInfoRow(Icons.eco, 'Common Name', species.commonName),
            _buildInfoRow(Icons.science, 'Scientific Name', species.scientificName),
            if (species.family != null)
              _buildInfoRow(Icons.category, 'Family', species.family!),
            if (species.description != null && species.description!.isNotEmpty) ...[
              const SizedBox(height: 12),
              Text(
                'Description',
                style: theme.textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                species.description!,
                style: theme.textTheme.bodyMedium,
              ),
            ],
          ],
        ),
      ),
    );
  }
  Widget _buildCareStatsCard() {
    final theme = Theme.of(context);
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Care Statistics',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: _buildStatItem(
                    'Care Logs',
                    '${_plant!.careLogs?.length ?? 0}',
                    Icons.history,
                    Colors.blue,
                  ),
                ),
                Expanded(
                  child: _buildStatItem(
                    'Active Reminders',
                    '${_plant!.reminders?.where((r) => r.isActive).length ?? 0}',
                    Icons.notifications,
                    Colors.orange,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            if (_plant!.careLogs != null && _plant!.careLogs!.isNotEmpty)
              _buildInfoRow(
                Icons.water_drop,
                'Last Watered',
                _getLastCareDate('watering') ?? 'Never',
              ),
          ],
        ),
      ),
    );
  }
  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    final theme = Theme.of(context);
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            value,
            style: theme.textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            label,
            style: theme.textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  Widget _buildInfoRow(IconData icon, String label, String value) {
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(icon, size: 20, color: Colors.grey[600]),
          const SizedBox(width: 12),
          Text(
            '$label:',
            style: theme.textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              value,
              style: theme.textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildCareLogTab() {
    if (_plant!.careLogs == null || _plant!.careLogs!.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.history, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'No care logs yet',
              style: TextStyle(fontSize: 18, color: Colors.grey),
            ),
            SizedBox(height: 8),
            Text(
              'Start logging your plant care activities',
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
      );
    }
    final sortedLogs = List<PlantCareLog>.from(_plant!.careLogs!)
      ..sort((a, b) => b.careDate.compareTo(a.careDate));
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: sortedLogs.length,
      itemBuilder: (context, index) {
        final log = sortedLogs[index];
        return _buildCareLogCard(log);
      },
    );
  }
  Widget _buildCareLogCard(PlantCareLog log) {
    final theme = Theme.of(context);
    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: _getCareTypeColor(log.careType).withOpacity(0.1),
          child: Icon(
            _getCareTypeIcon(log.careType),
            color: _getCareTypeColor(log.careType),
          ),
        ),
        title: Text(_getCareTypeDisplayName(log.careType)),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(_formatDate(log.careDate)),
            if (log.notes != null && log.notes!.isNotEmpty)
              Text(
                log.notes!,
                style: theme.textTheme.bodySmall?.copyWith(
                  fontStyle: FontStyle.italic,
                ),
              ),
          ],
        ),
        isThreeLine: log.notes != null && log.notes!.isNotEmpty,
      ),
    );
  }
  Widget _buildRemindersTab() {
    if (_plant!.reminders == null || _plant!.reminders!.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.notifications_off, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'No reminders set',
              style: TextStyle(fontSize: 18, color: Colors.grey),
            ),
            SizedBox(height: 8),
            Text(
              'Set up care reminders to never forget',
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
      );
    }
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _plant!.reminders!.length,
      itemBuilder: (context, index) {
        final reminder = _plant!.reminders![index];
        return CareReminderCard(
          reminder: reminder,
          onTap: () => _editReminder(reminder),
          onComplete: () => _completeReminder(reminder),
          onSnooze: () => _snoozeReminder(reminder),
        );
      },
    );
  }
  Widget _buildFloatingActionButton(ThemeData theme) {
    return FloatingActionButton(
      onPressed: _showAddCareOptions,
      child: const Icon(Icons.add),
    );
  }
  void _showPlantOptions() {
    showModalBottomSheet(
      context: context,
      builder: (context) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.edit),
              title: const Text('Edit Plant'),
              onTap: () {
                Navigator.pop(context);
                _editPlant();
              },
            ),
            ListTile(
              leading: const Icon(Icons.photo_camera),
              title: const Text('Update Photo'),
              onTap: () {
                Navigator.pop(context);
                _updatePhoto();
              },
            ),
            ListTile(
              leading: const Icon(Icons.delete, color: Colors.red),
              title: const Text('Delete Plant', style: TextStyle(color: Colors.red)),
              onTap: () {
                Navigator.pop(context);
                _deletePlant();
              },
            ),
          ],
        ),
      ),
    );
  }
  void _showAddCareOptions() {
    showModalBottomSheet(
      context: context,
      builder: (context) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.add),
              title: const Text('Log Care Activity'),
              onTap: () {
                Navigator.pop(context);
                _addCareLog();
              },
            ),
            ListTile(
              leading: const Icon(Icons.notifications),
              title: const Text('Add Reminder'),
              onTap: () {
                Navigator.pop(context);
                _addReminder();
              },
            ),
          ],
        ),
      ),
    );
  }
  // Helper methods
  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
  String? _getLastCareDate(String careType) {
    if (_plant!.careLogs == null || _plant!.careLogs!.isEmpty) return null;
    final logs = _plant!.careLogs!
        .where((log) => log.careType.toLowerCase() == careType.toLowerCase())
        .toList()
      ..sort((a, b) => b.careDate.compareTo(a.careDate));
    if (logs.isEmpty) return null;
    return _formatDate(logs.first.careDate);
  }
  IconData _getCareTypeIcon(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering':
        return Icons.water_drop;
      case 'fertilizing':
        return Icons.eco;
      case 'pruning':
        return Icons.content_cut;
      case 'repotting':
        return Icons.grass;
      default:
        return Icons.schedule;
    }
  }
  Color _getCareTypeColor(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering':
        return Colors.blue;
      case 'fertilizing':
        return Colors.green;
      case 'pruning':
        return Colors.orange;
      case 'repotting':
        return Colors.brown;
      default:
        return Colors.grey;
    }
  }
  String _getCareTypeDisplayName(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering':
        return 'Watering';
      case 'fertilizing':
        return 'Fertilizing';
      case 'pruning':
        return 'Pruning';
      case 'repotting':
        return 'Repotting';
      default:
        return careType;
    }
  }
  // Action methods (to be implemented)
  void _editPlant() {
    // TODO: Navigate to edit plant screen
  }
  void _updatePhoto() {
    // TODO: Implement photo update
  }
  void _deletePlant() {
    // TODO: Implement plant deletion with confirmation
  }
  void _addCareLog() {
    // TODO: Navigate to add care log screen
  }
  void _addReminder() {
    // TODO: Navigate to add reminder screen
  }
  void _editReminder(PlantCareReminder reminder) {
    // TODO: Navigate to edit reminder screen
  }
  void _completeReminder(PlantCareReminder reminder) {
    // TODO: Mark reminder as completed and log care activity
  }
  void _snoozeReminder(PlantCareReminder reminder) {
    // TODO: Snooze reminder for a specified duration
  }
}
</file>

<file path="lib/features/plant_care/presentation/widgets/care_reminder_card.dart">
import 'package:flutter/material.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/core/theme/app_theme.dart';
class CareReminderCard extends StatelessWidget {
  final PlantCareReminder reminder;
  final VoidCallback onTap;
  final VoidCallback? onComplete;
  final VoidCallback? onSnooze;
  const CareReminderCard({
    super.key,
    required this.reminder,
    required this.onTap,
    this.onComplete,
    this.onSnooze,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isOverdue = reminder.nextDueDate.isBefore(DateTime.now());
    final isUpcoming = reminder.nextDueDate.isAfter(DateTime.now()) &&
        reminder.nextDueDate.isBefore(DateTime.now().add(const Duration(days: 1)));
    return Card(
      elevation: isOverdue ? 6 : 2,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(
          color: isOverdue
              ? Colors.red.withOpacity(0.3)
              : isUpcoming
                  ? Colors.orange.withOpacity(0.3)
                  : Colors.transparent,
          width: isOverdue || isUpcoming ? 1 : 0,
        ),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              // Care type icon
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: _getCareTypeColor(reminder.careType).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  _getCareTypeIcon(reminder.careType),
                  color: _getCareTypeColor(reminder.careType),
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              // Reminder details
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Care type and plant name
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            _getCareTypeDisplayName(reminder.careType),
                            style: theme.textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: isOverdue ? Colors.red[700] : null,
                            ),
                          ),
                        ),
                        if (isOverdue)
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 6,
                              vertical: 2,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.red[100],
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              'OVERDUE',
                              style: TextStyle(
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                                color: Colors.red[700],
                              ),
                            ),
                          )
                        else if (isUpcoming)
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 6,
                              vertical: 2,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.orange[100],
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Text(
                              'DUE SOON',
                              style: TextStyle(
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                                color: Colors.orange[700],
                              ),
                            ),
                          ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    // Plant nickname
                    Text(
                      reminder.plant?.nickname ?? 'Unknown Plant',
                      style: theme.textTheme.bodyMedium?.copyWith(
                        color: Colors.grey[600],
                      ),
                    ),
                    const SizedBox(height: 8),
                    // Due date and frequency
                    Row(
                      children: [
                        Icon(
                          Icons.schedule,
                          size: 14,
                          color: Colors.grey[500],
                        ),
                        const SizedBox(width: 4),
                        Text(
                          _getFormattedDueDate(),
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: isOverdue
                                ? Colors.red[600]
                                : isUpcoming
                                    ? Colors.orange[600]
                                    : Colors.grey[600],
                            fontWeight: isOverdue || isUpcoming
                                ? FontWeight.w600
                                : FontWeight.normal,
                          ),
                        ),
                        const SizedBox(width: 16),
                        Icon(
                          Icons.repeat,
                          size: 14,
                          color: Colors.grey[500],
                        ),
                        const SizedBox(width: 4),
                        Text(
                          _getFrequencyText(),
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                    // Notes if available
                    if (reminder.notes != null && reminder.notes!.isNotEmpty) ...[
                      const SizedBox(height: 8),
                      Text(
                        reminder.notes!,
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: Colors.grey[500],
                          fontStyle: FontStyle.italic,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ],
                ),
              ),
              // Action buttons
              Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  if (onComplete != null)
                    IconButton(
                      onPressed: onComplete,
                      icon: Icon(
                        Icons.check_circle_outline,
                        color: Colors.green[600],
                      ),
                      tooltip: 'Mark as completed',
                    ),
                  if (onSnooze != null && (isOverdue || isUpcoming))
                    IconButton(
                      onPressed: onSnooze,
                      icon: Icon(
                        Icons.snooze,
                        color: Colors.orange[600],
                      ),
                      tooltip: 'Snooze reminder',
                    ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
  IconData _getCareTypeIcon(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering':
        return Icons.water_drop;
      case 'fertilizing':
        return Icons.eco;
      case 'pruning':
        return Icons.content_cut;
      case 'repotting':
        return Icons.grass;
      case 'pest_check':
        return Icons.bug_report;
      case 'rotation':
        return Icons.rotate_right;
      case 'misting':
        return Icons.cloud;
      case 'cleaning':
        return Icons.cleaning_services;
      default:
        return Icons.schedule;
    }
  }
  Color _getCareTypeColor(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering':
        return Colors.blue;
      case 'fertilizing':
        return Colors.green;
      case 'pruning':
        return Colors.orange;
      case 'repotting':
        return Colors.brown;
      case 'pest_check':
        return Colors.red;
      case 'rotation':
        return Colors.purple;
      case 'misting':
        return Colors.lightBlue;
      case 'cleaning':
        return Colors.teal;
      default:
        return Colors.grey;
    }
  }
  String _getCareTypeDisplayName(String careType) {
    switch (careType.toLowerCase()) {
      case 'watering':
        return 'Watering';
      case 'fertilizing':
        return 'Fertilizing';
      case 'pruning':
        return 'Pruning';
      case 'repotting':
        return 'Repotting';
      case 'pest_check':
        return 'Pest Check';
      case 'rotation':
        return 'Rotation';
      case 'misting':
        return 'Misting';
      case 'cleaning':
        return 'Cleaning';
      default:
        return careType.replaceAll('_', ' ').split(' ').map((word) {
          return word.isNotEmpty
              ? word[0].toUpperCase() + word.substring(1).toLowerCase()
              : word;
        }).join(' ');
    }
  }
  String _getFormattedDueDate() {
    final now = DateTime.now();
    final dueDate = reminder.nextDueDate;
    final difference = dueDate.difference(now);
    if (difference.isNegative) {
      final daysPast = difference.inDays.abs();
      if (daysPast == 0) {
        return 'Due today';
      } else if (daysPast == 1) {
        return '1 day overdue';
      } else {
        return '$daysPast days overdue';
      }
    } else if (difference.inDays == 0) {
      return 'Due today';
    } else if (difference.inDays == 1) {
      return 'Due tomorrow';
    } else if (difference.inDays < 7) {
      return 'Due in ${difference.inDays} days';
    } else {
      return 'Due ${dueDate.day}/${dueDate.month}';
    }
  }
  String _getFrequencyText() {
    final frequency = reminder.frequencyDays;
    if (frequency == 1) {
      return 'Daily';
    } else if (frequency == 7) {
      return 'Weekly';
    } else if (frequency == 14) {
      return 'Bi-weekly';
    } else if (frequency == 30) {
      return 'Monthly';
    } else if (frequency < 7) {
      return 'Every $frequency days';
    } else {
      final weeks = (frequency / 7).round();
      return 'Every $weeks weeks';
    }
  }
}
</file>

<file path="lib/features/plant_care/presentation/widgets/plant_card.dart">
import 'package:flutter/material.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/core/theme/app_theme.dart';
class PlantCard extends StatelessWidget {
  final UserPlant plant;
  final VoidCallback onTap;
  final VoidCallback? onLongPress;
  const PlantCard({
    super.key,
    required this.plant,
    required this.onTap,
    this.onLongPress,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: onTap,
        onLongPress: onLongPress,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Plant image
            Expanded(
              flex: 3,
              child: Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(16),
                    topRight: Radius.circular(16),
                  ),
                  color: Colors.grey[200],
                ),
                child: ClipRRect(
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(16),
                    topRight: Radius.circular(16),
                  ),
                  child: plant.imageUrl != null
                      ? Image.network(
                          plant.imageUrl!,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) {
                            return _buildPlaceholder(theme);
                          },
                        )
                      : _buildPlaceholder(theme),
                ),
              ),
            ),
            // Plant info
            Expanded(
              flex: 2,
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Plant nickname
                    Text(
                      plant.nickname,
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    // Species name
                    if (plant.species != null)
                      Text(
                        plant.species!.commonName,
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: Colors.grey[600],
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    const Spacer(),
                    // Care status or location
                    Row(
                      children: [
                        if (plant.location != null) ...[
                          Icon(
                            Icons.location_on,
                            size: 14,
                            color: Colors.grey[500],
                          ),
                          const SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              plant.location!,
                              style: theme.textTheme.bodySmall?.copyWith(
                                color: Colors.grey[500],
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ] else ...[
                          Icon(
                            Icons.schedule,
                            size: 14,
                            color: Colors.grey[500],
                          ),
                          const SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              _getAcquiredDateText(),
                              style: theme.textTheme.bodySmall?.copyWith(
                                color: Colors.grey[500],
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ],
                ),
              ),
            ),
            // Care indicators
            if (plant.reminders != null && plant.reminders!.isNotEmpty)
              _buildCareIndicators(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildPlaceholder(ThemeData theme) {
    return Container(
      width: double.infinity,
      height: double.infinity,
      color: theme.primaryColor.withOpacity(0.1),
      child: Icon(
        Icons.eco,
        size: 40,
        color: theme.primaryColor.withOpacity(0.5),
      ),
    );
  }
  Widget _buildCareIndicators(ThemeData theme) {
    final activeReminders = plant.reminders!
        .where((reminder) => reminder.isActive)
        .toList();
    if (activeReminders.isEmpty) return const SizedBox.shrink();
    final overdueCount = activeReminders
        .where((reminder) => reminder.nextDueDate.isBefore(DateTime.now()))
        .length;
    final upcomingCount = activeReminders
        .where((reminder) => 
            reminder.nextDueDate.isAfter(DateTime.now()) &&
            reminder.nextDueDate.isBefore(DateTime.now().add(const Duration(days: 3))))
        .length;
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(16),
          bottomRight: Radius.circular(16),
        ),
      ),
      child: Row(
        children: [
          if (overdueCount > 0) ...[
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: Colors.red[100],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    Icons.warning,
                    size: 12,
                    color: Colors.red[700],
                  ),
                  const SizedBox(width: 2),
                  Text(
                    overdueCount.toString(),
                    style: TextStyle(
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.red[700],
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 4),
          ],
          if (upcomingCount > 0) ...[
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: Colors.orange[100],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    Icons.schedule,
                    size: 12,
                    color: Colors.orange[700],
                  ),
                  const SizedBox(width: 2),
                  Text(
                    upcomingCount.toString(),
                    style: TextStyle(
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                      color: Colors.orange[700],
                    ),
                  ),
                ],
              ),
            ),
          ],
          const Spacer(),
          Text(
            '${activeReminders.length} reminder${activeReminders.length != 1 ? 's' : ''}',
            style: theme.textTheme.bodySmall?.copyWith(
              color: Colors.grey[600],
              fontSize: 10,
            ),
          ),
        ],
      ),
    );
  }
  String _getAcquiredDateText() {
    final now = DateTime.now();
    final difference = now.difference(plant.acquiredDate);
    if (difference.inDays == 0) {
      return 'Added today';
    } else if (difference.inDays == 1) {
      return 'Added yesterday';
    } else if (difference.inDays < 7) {
      return '${difference.inDays} days ago';
    } else if (difference.inDays < 30) {
      final weeks = (difference.inDays / 7).floor();
      return '$weeks week${weeks != 1 ? 's' : ''} ago';
    } else if (difference.inDays < 365) {
      final months = (difference.inDays / 30).floor();
      return '$months month${months != 1 ? 's' : ''} ago';
    } else {
      final years = (difference.inDays / 365).floor();
      return '$years year${years != 1 ? 's' : ''} ago';
    }
  }
}
</file>

<file path="lib/features/plant_care/providers/plant_care_provider.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/core/services/api_service.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/features/plant_care/services/plant_care_service.dart';
// Service provider
final plantCareServiceProvider = Provider<PlantCareService>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  return PlantCareService(apiService);
});
// Main state provider
final plantCareProvider = StateNotifierProvider<PlantCareNotifier, PlantCareState>((ref) {
  final service = ref.watch(plantCareServiceProvider);
  return PlantCareNotifier(service);
});
// Individual providers for specific use cases
final userPlantsProvider = Provider<List<UserPlant>>((ref) {
  return ref.watch(plantCareProvider).userPlants;
});
final careLogsProvider = Provider<List<PlantCareLog>>((ref) {
  return ref.watch(plantCareProvider).careLogs;
});
final remindersProvider = Provider<List<PlantCareReminder>>((ref) {
  return ref.watch(plantCareProvider).reminders;
});
final upcomingRemindersProvider = Provider<List<PlantCareReminder>>((ref) {
  return ref.watch(plantCareProvider).upcomingReminders;
});
// Individual user plant provider
final userPlantProvider = FutureProvider.family<UserPlant, String>((ref, plantId) async {
  final service = ref.watch(plantCareServiceProvider);
  return service.getUserPlant(plantId);
});
// Plant species provider for selection
final plantSpeciesSearchProvider = FutureProvider.family<List<PlantSpecies>, String>((ref, query) async {
  final service = ref.watch(plantCareServiceProvider);
  return service.searchPlantSpecies(search: query, limit: 20);
});
// Care statistics provider
final careStatisticsProvider = FutureProvider.family<Map<String, dynamic>, CareStatisticsParams>((ref, params) async {
  final service = ref.watch(plantCareServiceProvider);
  return service.getCareStatistics(
    userPlantId: params.userPlantId,
    startDate: params.startDate,
    endDate: params.endDate,
  );
});
class PlantCareNotifier extends StateNotifier<PlantCareState> {
  final PlantCareService _service;
  PlantCareNotifier(this._service) : super(const PlantCareState());
  // User Plants
  Future<void> loadUserPlants() async {
    state = state.copyWith(isLoadingPlants: true, error: null);
    try {
      final plants = await _service.getUserPlants();
      state = state.copyWith(
        userPlants: plants,
        isLoadingPlants: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoadingPlants: false,
        error: e.toString(),
      );
    }
  }
  Future<void> createUserPlant(UserPlantRequest request) async {
    state = state.copyWith(isCreating: true, createError: null);
    try {
      final plant = await _service.createUserPlant(request);
      state = state.copyWith(
        userPlants: [...state.userPlants, plant],
        isCreating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isCreating: false,
        createError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> updateUserPlant(String plantId, UserPlantRequest request) async {
    state = state.copyWith(isUpdating: true, updateError: null);
    try {
      final updatedPlant = await _service.updateUserPlant(plantId, request);
      final updatedPlants = state.userPlants.map((plant) {
        return plant.id == plantId ? updatedPlant : plant;
      }).toList();
      state = state.copyWith(
        userPlants: updatedPlants,
        isUpdating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isUpdating: false,
        updateError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> deleteUserPlant(String plantId) async {
    state = state.copyWith(isDeleting: true, deleteError: null);
    try {
      await _service.deleteUserPlant(plantId);
      final updatedPlants = state.userPlants.where((plant) => plant.id != plantId).toList();
      state = state.copyWith(
        userPlants: updatedPlants,
        isDeleting: false,
      );
    } catch (e) {
      state = state.copyWith(
        isDeleting: false,
        deleteError: e.toString(),
      );
      rethrow;
    }
  }
  // Care Logs
  Future<void> loadCareLogs({
    String? userPlantId,
    String? careType,
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    state = state.copyWith(isLoadingLogs: true, error: null);
    try {
      final logs = await _service.getCareLogs(
        userPlantId: userPlantId,
        careType: careType,
        startDate: startDate,
        endDate: endDate,
      );
      state = state.copyWith(
        careLogs: logs,
        isLoadingLogs: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoadingLogs: false,
        error: e.toString(),
      );
    }
  }
  Future<void> createCareLog(PlantCareRequest request) async {
    state = state.copyWith(isCreating: true, createError: null);
    try {
      final log = await _service.createCareLog(request);
      state = state.copyWith(
        careLogs: [log, ...state.careLogs],
        isCreating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isCreating: false,
        createError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> updateCareLog(String logId, PlantCareRequest request) async {
    state = state.copyWith(isUpdating: true, updateError: null);
    try {
      final updatedLog = await _service.updateCareLog(logId, request);
      final updatedLogs = state.careLogs.map((log) {
        return log.id == logId ? updatedLog : log;
      }).toList();
      state = state.copyWith(
        careLogs: updatedLogs,
        isUpdating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isUpdating: false,
        updateError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> deleteCareLog(String logId) async {
    state = state.copyWith(isDeleting: true, deleteError: null);
    try {
      await _service.deleteCareLog(logId);
      final updatedLogs = state.careLogs.where((log) => log.id != logId).toList();
      state = state.copyWith(
        careLogs: updatedLogs,
        isDeleting: false,
      );
    } catch (e) {
      state = state.copyWith(
        isDeleting: false,
        deleteError: e.toString(),
      );
      rethrow;
    }
  }
  // Care Reminders
  Future<void> loadReminders({
    String? userPlantId,
    String? careType,
    bool? isActive,
  }) async {
    state = state.copyWith(isLoadingReminders: true, error: null);
    try {
      final reminders = await _service.getReminders(
        userPlantId: userPlantId,
        careType: careType,
        isActive: isActive,
      );
      state = state.copyWith(
        reminders: reminders,
        isLoadingReminders: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoadingReminders: false,
        error: e.toString(),
      );
    }
  }
  Future<void> loadUpcomingReminders({int days = 7}) async {
    state = state.copyWith(isLoadingReminders: true, error: null);
    try {
      final reminders = await _service.getUpcomingReminders(days: days);
      state = state.copyWith(
        upcomingReminders: reminders,
        isLoadingReminders: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoadingReminders: false,
        error: e.toString(),
      );
    }
  }
  Future<void> createReminder(PlantCareReminderRequest request) async {
    state = state.copyWith(isCreating: true, createError: null);
    try {
      final reminder = await _service.createReminder(request);
      state = state.copyWith(
        reminders: [...state.reminders, reminder],
        isCreating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isCreating: false,
        createError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> updateReminder(String reminderId, PlantCareReminderRequest request) async {
    state = state.copyWith(isUpdating: true, updateError: null);
    try {
      final updatedReminder = await _service.updateReminder(reminderId, request);
      final updatedReminders = state.reminders.map((reminder) {
        return reminder.id == reminderId ? updatedReminder : reminder;
      }).toList();
      state = state.copyWith(
        reminders: updatedReminders,
        isUpdating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isUpdating: false,
        updateError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> deleteReminder(String reminderId) async {
    state = state.copyWith(isDeleting: true, deleteError: null);
    try {
      await _service.deleteReminder(reminderId);
      final updatedReminders = state.reminders.where((reminder) => reminder.id != reminderId).toList();
      final updatedUpcoming = state.upcomingReminders.where((reminder) => reminder.id != reminderId).toList();
      state = state.copyWith(
        reminders: updatedReminders,
        upcomingReminders: updatedUpcoming,
        isDeleting: false,
      );
    } catch (e) {
      state = state.copyWith(
        isDeleting: false,
        deleteError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> completeReminder(String reminderId) async {
    state = state.copyWith(isUpdating: true, updateError: null);
    try {
      final updatedReminder = await _service.completeReminder(reminderId);
      final updatedReminders = state.reminders.map((reminder) {
        return reminder.id == reminderId ? updatedReminder : reminder;
      }).toList();
      final updatedUpcoming = state.upcomingReminders.where((reminder) => reminder.id != reminderId).toList();
      state = state.copyWith(
        reminders: updatedReminders,
        upcomingReminders: updatedUpcoming,
        isUpdating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isUpdating: false,
        updateError: e.toString(),
      );
      rethrow;
    }
  }
  Future<void> snoozeReminder(String reminderId, int days) async {
    state = state.copyWith(isUpdating: true, updateError: null);
    try {
      final updatedReminder = await _service.snoozeReminder(reminderId, days);
      final updatedReminders = state.reminders.map((reminder) {
        return reminder.id == reminderId ? updatedReminder : reminder;
      }).toList();
      final updatedUpcoming = state.upcomingReminders.map((reminder) {
        return reminder.id == reminderId ? updatedReminder : reminder;
      }).toList();
      state = state.copyWith(
        reminders: updatedReminders,
        upcomingReminders: updatedUpcoming,
        isUpdating: false,
      );
    } catch (e) {
      state = state.copyWith(
        isUpdating: false,
        updateError: e.toString(),
      );
      rethrow;
    }
  }
  // Utility methods
  void clearErrors() {
    state = state.copyWith(
      error: null,
      createError: null,
      updateError: null,
      deleteError: null,
    );
  }
  void reset() {
    state = const PlantCareState();
  }
}
// Helper class for care statistics parameters
class CareStatisticsParams {
  final String? userPlantId;
  final DateTime? startDate;
  final DateTime? endDate;
  const CareStatisticsParams({
    this.userPlantId,
    this.startDate,
    this.endDate,
  });
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CareStatisticsParams &&
        other.userPlantId == userPlantId &&
        other.startDate == startDate &&
        other.endDate == endDate;
  }
  @override
  int get hashCode => Object.hash(userPlantId, startDate, endDate);
}
</file>

<file path="lib/features/plant_care/services/plant_care_service.dart">
import 'package:dio/dio.dart';
import 'package:plant_social/core/services/api_service.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
class PlantCareService {
  final ApiService _apiService;
  PlantCareService(this._apiService);
  // User Plants
  Future<List<UserPlant>> getUserPlants() async {
    try {
      final response = await _apiService.get('/user-plants');
      final List<dynamic> data = response.data['data'] ?? [];
      return data.map((json) => UserPlant.fromJson(json)).toList();
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<UserPlant> getUserPlant(String plantId) async {
    try {
      final response = await _apiService.get('/user-plants/$plantId');
      return UserPlant.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<UserPlant> createUserPlant(UserPlantRequest request) async {
    try {
      final response = await _apiService.post(
        '/user-plants',
        data: request.toJson(),
      );
      return UserPlant.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<UserPlant> updateUserPlant(String plantId, UserPlantRequest request) async {
    try {
      final response = await _apiService.put(
        '/user-plants/$plantId',
        data: request.toJson(),
      );
      return UserPlant.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<void> deleteUserPlant(String plantId) async {
    try {
      await _apiService.delete('/user-plants/$plantId');
    } catch (e) {
      throw _handleError(e);
    }
  }
  // Care Logs
  Future<List<PlantCareLog>> getCareLogs({
    String? userPlantId,
    String? careType,
    DateTime? startDate,
    DateTime? endDate,
    int? limit,
  }) async {
    try {
      final queryParams = <String, dynamic>{};
      if (userPlantId != null) queryParams['user_plant_id'] = userPlantId;
      if (careType != null) queryParams['care_type'] = careType;
      if (startDate != null) queryParams['start_date'] = startDate.toIso8601String();
      if (endDate != null) queryParams['end_date'] = endDate.toIso8601String();
      if (limit != null) queryParams['limit'] = limit;
      final response = await _apiService.get(
        '/care-logs',
        queryParameters: queryParams,
      );
      final List<dynamic> data = response.data['data'] ?? [];
      return data.map((json) => PlantCareLog.fromJson(json)).toList();
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareLog> getCareLog(String logId) async {
    try {
      final response = await _apiService.get('/care-logs/$logId');
      return PlantCareLog.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareLog> createCareLog(PlantCareRequest request) async {
    try {
      final response = await _apiService.post(
        '/care-logs',
        data: request.toJson(),
      );
      return PlantCareLog.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareLog> updateCareLog(String logId, PlantCareRequest request) async {
    try {
      final response = await _apiService.put(
        '/care-logs/$logId',
        data: request.toJson(),
      );
      return PlantCareLog.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<void> deleteCareLog(String logId) async {
    try {
      await _apiService.delete('/care-logs/$logId');
    } catch (e) {
      throw _handleError(e);
    }
  }
  // Care Reminders
  Future<List<PlantCareReminder>> getReminders({
    String? userPlantId,
    String? careType,
    bool? isActive,
    bool? isDue,
  }) async {
    try {
      final queryParams = <String, dynamic>{};
      if (userPlantId != null) queryParams['user_plant_id'] = userPlantId;
      if (careType != null) queryParams['care_type'] = careType;
      if (isActive != null) queryParams['is_active'] = isActive;
      if (isDue != null) queryParams['is_due'] = isDue;
      final response = await _apiService.get(
        '/care-reminders',
        queryParameters: queryParams,
      );
      final List<dynamic> data = response.data['data'] ?? [];
      return data.map((json) => PlantCareReminder.fromJson(json)).toList();
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<List<PlantCareReminder>> getUpcomingReminders({int? days}) async {
    try {
      final queryParams = <String, dynamic>{};
      if (days != null) queryParams['days'] = days;
      final response = await _apiService.get(
        '/care-reminders/upcoming',
        queryParameters: queryParams,
      );
      final List<dynamic> data = response.data['data'] ?? [];
      return data.map((json) => PlantCareReminder.fromJson(json)).toList();
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareReminder> getReminder(String reminderId) async {
    try {
      final response = await _apiService.get('/care-reminders/$reminderId');
      return PlantCareReminder.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareReminder> createReminder(PlantCareReminderRequest request) async {
    try {
      final response = await _apiService.post(
        '/care-reminders',
        data: request.toJson(),
      );
      return PlantCareReminder.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareReminder> updateReminder(
    String reminderId,
    PlantCareReminderRequest request,
  ) async {
    try {
      final response = await _apiService.put(
        '/care-reminders/$reminderId',
        data: request.toJson(),
      );
      return PlantCareReminder.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<void> deleteReminder(String reminderId) async {
    try {
      await _apiService.delete('/care-reminders/$reminderId');
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareReminder> completeReminder(String reminderId) async {
    try {
      final response = await _apiService.post('/care-reminders/$reminderId/complete');
      return PlantCareReminder.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantCareReminder> snoozeReminder(
    String reminderId,
    int days,
  ) async {
    try {
      final response = await _apiService.post(
        '/care-reminders/$reminderId/snooze',
        data: {'days': days},
      );
      return PlantCareReminder.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  // Plant Species (for reference)
  Future<List<PlantSpecies>> searchPlantSpecies({
    String? search,
    int? limit,
  }) async {
    try {
      final queryParams = <String, dynamic>{};
      if (search != null) queryParams['search'] = search;
      if (limit != null) queryParams['limit'] = limit;
      final response = await _apiService.get(
        '/plant-species',
        queryParameters: queryParams,
      );
      final List<dynamic> data = response.data['data'] ?? [];
      return data.map((json) => PlantSpecies.fromJson(json)).toList();
    } catch (e) {
      throw _handleError(e);
    }
  }
  Future<PlantSpecies> getPlantSpecies(String speciesId) async {
    try {
      final response = await _apiService.get('/plant-species/$speciesId');
      return PlantSpecies.fromJson(response.data['data']);
    } catch (e) {
      throw _handleError(e);
    }
  }
  // Statistics
  Future<Map<String, dynamic>> getCareStatistics({
    String? userPlantId,
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      final queryParams = <String, dynamic>{};
      if (userPlantId != null) queryParams['user_plant_id'] = userPlantId;
      if (startDate != null) queryParams['start_date'] = startDate.toIso8601String();
      if (endDate != null) queryParams['end_date'] = endDate.toIso8601String();
      final response = await _apiService.get(
        '/care-logs/statistics',
        queryParameters: queryParams,
      );
      return response.data['data'] ?? {};
    } catch (e) {
      throw _handleError(e);
    }
  }
  // Image upload
  Future<String> uploadPlantImage(String filePath) async {
    try {
      final formData = FormData.fromMap({
        'image': await MultipartFile.fromFile(filePath),
      });
      final response = await _apiService.post(
        '/upload/plant-image',
        data: formData,
      );
      return response.data['data']['url'];
    } catch (e) {
      throw _handleError(e);
    }
  }
  String _handleError(dynamic error) {
    if (error is DioException) {
      if (error.response?.data != null) {
        final data = error.response!.data;
        if (data is Map<String, dynamic> && data.containsKey('message')) {
          return data['message'];
        }
      }
      return error.message ?? 'Network error occurred';
    }
    return error.toString();
  }
}
</file>

<file path="lib/features/plant_community/models/plant_community_models.dart">
import 'package:json_annotation/json_annotation.dart';
part 'plant_community_models.g.dart';
@JsonSerializable()
class PlantQuestion {
  final String id;
  final String userId;
  final String title;
  final String content;
  final String? imageUrl;
  final String? plantSpeciesId;
  final String category;
  final List<String> tags;
  final int upvotes;
  final int downvotes;
  final int views;
  final int answerCount;
  final bool isSolved;
  final String? acceptedAnswerId;
  final DateTime createdAt;
  final DateTime? updatedAt;
  // User info
  final String? userDisplayName;
  final String? userAvatarUrl;
  // Plant species info
  final String? speciesCommonName;
  final String? speciesScientificName;
  // User interaction
  final String? userVote; // 'up', 'down', or null
  final bool isBookmarked;
  const PlantQuestion({
    required this.id,
    required this.userId,
    required this.title,
    required this.content,
    this.imageUrl,
    this.plantSpeciesId,
    this.category = QuestionCategory.general,
    this.tags = const [],
    this.upvotes = 0,
    this.downvotes = 0,
    this.views = 0,
    this.answerCount = 0,
    this.isSolved = false,
    this.acceptedAnswerId,
    required this.createdAt,
    this.updatedAt,
    this.userDisplayName,
    this.userAvatarUrl,
    this.speciesCommonName,
    this.speciesScientificName,
    this.userVote,
    this.isBookmarked = false,
  });
  factory PlantQuestion.fromJson(Map<String, dynamic> json) {
    return PlantQuestion(
      id: json['id'] as String,
      userId: json['userId'] as String,
      title: json['title'] as String,
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      category: json['category'] as String? ?? QuestionCategory.general,
      tags: (json['tags'] as List<dynamic>?)?.cast<String>() ?? [],
      upvotes: json['upvotes'] as int? ?? 0,
      downvotes: json['downvotes'] as int? ?? 0,
      views: json['views'] as int? ?? 0,
      answerCount: json['answerCount'] as int? ?? 0,
      isSolved: json['isSolved'] as bool? ?? false,
      acceptedAnswerId: json['acceptedAnswerId'] as String?,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] != null ? DateTime.parse(json['updatedAt'] as String) : null,
      userDisplayName: json['userDisplayName'] as String?,
      userAvatarUrl: json['userAvatarUrl'] as String?,
      speciesCommonName: json['speciesCommonName'] as String?,
      speciesScientificName: json['speciesScientificName'] as String?,
      userVote: json['userVote'] as String?,
      isBookmarked: json['isBookmarked'] as bool? ?? false,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'title': title,
      'content': content,
      'imageUrl': imageUrl,
      'plantSpeciesId': plantSpeciesId,
      'category': category,
      'tags': tags,
      'upvotes': upvotes,
      'downvotes': downvotes,
      'views': views,
      'answerCount': answerCount,
      'isSolved': isSolved,
      'acceptedAnswerId': acceptedAnswerId,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt?.toIso8601String(),
      'userDisplayName': userDisplayName,
      'userAvatarUrl': userAvatarUrl,
      'speciesCommonName': speciesCommonName,
      'speciesScientificName': speciesScientificName,
      'userVote': userVote,
      'isBookmarked': isBookmarked,
    };
  }
  PlantQuestion copyWith({
    String? id,
    String? userId,
    String? title,
    String? content,
    String? imageUrl,
    String? plantSpeciesId,
    String? category,
    List<String>? tags,
    int? upvotes,
    int? downvotes,
    int? views,
    int? answerCount,
    bool? isSolved,
    String? acceptedAnswerId,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? userDisplayName,
    String? userAvatarUrl,
    String? speciesCommonName,
    String? speciesScientificName,
    String? userVote,
    bool? isBookmarked,
  }) {
    return PlantQuestion(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      title: title ?? this.title,
      content: content ?? this.content,
      imageUrl: imageUrl ?? this.imageUrl,
      plantSpeciesId: plantSpeciesId ?? this.plantSpeciesId,
      category: category ?? this.category,
      tags: tags ?? this.tags,
      upvotes: upvotes ?? this.upvotes,
      downvotes: downvotes ?? this.downvotes,
      views: views ?? this.views,
      answerCount: answerCount ?? this.answerCount,
      isSolved: isSolved ?? this.isSolved,
      acceptedAnswerId: acceptedAnswerId ?? this.acceptedAnswerId,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      userDisplayName: userDisplayName ?? this.userDisplayName,
      userAvatarUrl: userAvatarUrl ?? this.userAvatarUrl,
      speciesCommonName: speciesCommonName ?? this.speciesCommonName,
      speciesScientificName: speciesScientificName ?? this.speciesScientificName,
      userVote: userVote ?? this.userVote,
      isBookmarked: isBookmarked ?? this.isBookmarked,
    );
  }
}
@JsonSerializable()
class PlantAnswer {
  final String id;
  final String questionId;
  final String userId;
  final String content;
  final String? imageUrl;
  final int upvotes;
  final int downvotes;
  final bool isAccepted;
  final DateTime createdAt;
  final DateTime? updatedAt;
  // User info
  final String? userDisplayName;
  final String? userAvatarUrl;
  // User interaction
  final String? userVote; // 'up', 'down', or null
  const PlantAnswer({
    required this.id,
    required this.questionId,
    required this.userId,
    required this.content,
    this.imageUrl,
    this.upvotes = 0,
    this.downvotes = 0,
    this.isAccepted = false,
    required this.createdAt,
    this.updatedAt,
    this.userDisplayName,
    this.userAvatarUrl,
    this.userVote,
  });
  factory PlantAnswer.fromJson(Map<String, dynamic> json) {
    return PlantAnswer(
      id: json['id'] as String,
      questionId: json['questionId'] as String,
      userId: json['userId'] as String,
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
      upvotes: json['upvotes'] as int? ?? 0,
      downvotes: json['downvotes'] as int? ?? 0,
      isAccepted: json['isAccepted'] as bool? ?? false,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] != null ? DateTime.parse(json['updatedAt'] as String) : null,
      userDisplayName: json['userDisplayName'] as String?,
      userAvatarUrl: json['userAvatarUrl'] as String?,
      userVote: json['userVote'] as String?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'questionId': questionId,
      'userId': userId,
      'content': content,
      'imageUrl': imageUrl,
      'upvotes': upvotes,
      'downvotes': downvotes,
      'isAccepted': isAccepted,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt?.toIso8601String(),
      'userDisplayName': userDisplayName,
      'userAvatarUrl': userAvatarUrl,
      'userVote': userVote,
    };
  }
}
@JsonSerializable()
class PlantTrade {
  final String id;
  final String userId;
  final String title;
  final String description;
  final String tradeType; // 'trade', 'sell', 'give_away'
  final String? price;
  final List<String> imageUrls;
  final String location;
  final String? plantSpeciesId;
  final List<String> tags;
  final String status; // 'active', 'completed', 'cancelled'
  final int viewCount;
  final int interestedCount;
  final DateTime createdAt;
  final DateTime? updatedAt;
  // User info
  final String? userDisplayName;
  final String? userAvatarUrl;
  // Plant species info
  final String? speciesCommonName;
  final String? speciesScientificName;
  // User interaction
  final bool isBookmarked;
  final bool hasExpressedInterest;
  const PlantTrade({
    required this.id,
    required this.userId,
    required this.title,
    required this.description,
    required this.tradeType,
    this.price,
    this.imageUrls = const [],
    required this.location,
    this.plantSpeciesId,
    this.tags = const [],
    this.status = 'active',
    this.viewCount = 0,
    this.interestedCount = 0,
    required this.createdAt,
    this.updatedAt,
    this.userDisplayName,
    this.userAvatarUrl,
    this.speciesCommonName,
    this.speciesScientificName,
    this.isBookmarked = false,
    this.hasExpressedInterest = false,
  });
  factory PlantTrade.fromJson(Map<String, dynamic> json) {
    return PlantTrade(
      id: json['id'] as String,
      userId: json['userId'] as String,
      title: json['title'] as String,
      description: json['description'] as String,
      tradeType: json['tradeType'] as String,
      price: json['price'] as String?,
      imageUrls: (json['imageUrls'] as List<dynamic>?)?.cast<String>() ?? [],
      location: json['location'] as String,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      tags: (json['tags'] as List<dynamic>?)?.cast<String>() ?? [],
      status: json['status'] as String? ?? 'active',
      viewCount: json['viewCount'] as int? ?? 0,
      interestedCount: json['interestedCount'] as int? ?? 0,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] != null ? DateTime.parse(json['updatedAt'] as String) : null,
      userDisplayName: json['userDisplayName'] as String?,
      userAvatarUrl: json['userAvatarUrl'] as String?,
      speciesCommonName: json['speciesCommonName'] as String?,
      speciesScientificName: json['speciesScientificName'] as String?,
      isBookmarked: json['isBookmarked'] as bool? ?? false,
      hasExpressedInterest: json['hasExpressedInterest'] as bool? ?? false,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'title': title,
      'description': description,
      'tradeType': tradeType,
      'price': price,
      'imageUrls': imageUrls,
      'location': location,
      'plantSpeciesId': plantSpeciesId,
      'tags': tags,
      'status': status,
      'viewCount': viewCount,
      'interestedCount': interestedCount,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt?.toIso8601String(),
      'userDisplayName': userDisplayName,
      'userAvatarUrl': userAvatarUrl,
      'speciesCommonName': speciesCommonName,
      'speciesScientificName': speciesScientificName,
      'isBookmarked': isBookmarked,
      'hasExpressedInterest': hasExpressedInterest,
    };
  }
}
@JsonSerializable()
class PlantQuestionRequest {
  final String title;
  final String content;
  final String? imageUrl;
  final String? plantSpeciesId;
  final List<String> tags;
  const PlantQuestionRequest({
    required this.title,
    required this.content,
    this.imageUrl,
    this.plantSpeciesId,
    this.tags = const [],
  });
  factory PlantQuestionRequest.fromJson(Map<String, dynamic> json) {
    return PlantQuestionRequest(
      title: json['title'] as String,
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      tags: (json['tags'] as List<dynamic>?)?.cast<String>() ?? [],
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'title': title,
      'content': content,
      'imageUrl': imageUrl,
      'plantSpeciesId': plantSpeciesId,
      'tags': tags,
    };
  }
}
@JsonSerializable()
class PlantAnswerRequest {
  final String content;
  final String? imageUrl;
  const PlantAnswerRequest({
    required this.content,
    this.imageUrl,
  });
  factory PlantAnswerRequest.fromJson(Map<String, dynamic> json) {
    return PlantAnswerRequest(
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'content': content,
      'imageUrl': imageUrl,
    };
  }
}
@JsonSerializable()
class PlantTradeRequest {
  final String title;
  final String description;
  final String tradeType;
  final String? price;
  final List<String> imageUrls;
  final String location;
  final String? plantSpeciesId;
  final List<String> tags;
  const PlantTradeRequest({
    required this.title,
    required this.description,
    required this.tradeType,
    this.price,
    this.imageUrls = const [],
    required this.location,
    this.plantSpeciesId,
    this.tags = const [],
  });
  factory PlantTradeRequest.fromJson(Map<String, dynamic> json) {
    return PlantTradeRequest(
      title: json['title'] as String,
      description: json['description'] as String,
      tradeType: json['tradeType'] as String,
      price: json['price'] as String?,
      imageUrls: (json['imageUrls'] as List<dynamic>?)?.cast<String>() ?? [],
      location: json['location'] as String,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      tags: (json['tags'] as List<dynamic>?)?.cast<String>() ?? [],
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'title': title,
      'description': description,
      'tradeType': tradeType,
      'price': price,
      'imageUrls': imageUrls,
      'location': location,
      'plantSpeciesId': plantSpeciesId,
      'tags': tags,
    };
  }
}
@JsonSerializable()
class PlantCommunityState {
  final bool isLoading;
  final List<PlantQuestion> questions;
  final List<PlantAnswer> answers;
  final List<PlantTrade> trades;
  final String? error;
  // Pagination
  final bool hasMoreQuestions;
  final bool hasMoreTrades;
  final int currentQuestionPage;
  final int currentTradePage;
  // Filters
  final String? selectedCategory;
  final String? searchQuery;
  final String? sortBy;
  const PlantCommunityState({
    this.isLoading = false,
    this.questions = const [],
    this.answers = const [],
    this.trades = const [],
    this.error,
    this.hasMoreQuestions = false,
    this.hasMoreTrades = false,
    this.currentQuestionPage = 1,
    this.currentTradePage = 1,
    this.selectedCategory,
    this.searchQuery,
    this.sortBy,
  });
  factory PlantCommunityState.fromJson(Map<String, dynamic> json) {
    return PlantCommunityState(
      isLoading: json['isLoading'] as bool? ?? false,
      questions: (json['questions'] as List<dynamic>?)?.map((e) => PlantQuestion.fromJson(e as Map<String, dynamic>)).toList() ?? [],
      answers: (json['answers'] as List<dynamic>?)?.map((e) => PlantAnswer.fromJson(e as Map<String, dynamic>)).toList() ?? [],
      trades: (json['trades'] as List<dynamic>?)?.map((e) => PlantTrade.fromJson(e as Map<String, dynamic>)).toList() ?? [],
      error: json['error'] as String?,
      hasMoreQuestions: json['hasMoreQuestions'] as bool? ?? false,
      hasMoreTrades: json['hasMoreTrades'] as bool? ?? false,
      currentQuestionPage: json['currentQuestionPage'] as int? ?? 1,
      currentTradePage: json['currentTradePage'] as int? ?? 1,
      selectedCategory: json['selectedCategory'] as String?,
      searchQuery: json['searchQuery'] as String?,
      sortBy: json['sortBy'] as String?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'isLoading': isLoading,
      'questions': questions.map((e) => e.toJson()).toList(),
      'answers': answers.map((e) => e.toJson()).toList(),
      'trades': trades.map((e) => e.toJson()).toList(),
      'error': error,
      'hasMoreQuestions': hasMoreQuestions,
      'hasMoreTrades': hasMoreTrades,
      'currentQuestionPage': currentQuestionPage,
      'currentTradePage': currentTradePage,
      'selectedCategory': selectedCategory,
      'searchQuery': searchQuery,
      'sortBy': sortBy,
    };
  }
  PlantCommunityState copyWith({
    bool? isLoading,
    List<PlantQuestion>? questions,
    List<PlantAnswer>? answers,
    List<PlantTrade>? trades,
    String? error,
    bool? hasMoreQuestions,
    bool? hasMoreTrades,
    int? currentQuestionPage,
    int? currentTradePage,
    String? selectedCategory,
    String? searchQuery,
    String? sortBy,
  }) {
    return PlantCommunityState(
      isLoading: isLoading ?? this.isLoading,
      questions: questions ?? this.questions,
      answers: answers ?? this.answers,
      trades: trades ?? this.trades,
      error: error ?? this.error,
      hasMoreQuestions: hasMoreQuestions ?? this.hasMoreQuestions,
      hasMoreTrades: hasMoreTrades ?? this.hasMoreTrades,
      currentQuestionPage: currentQuestionPage ?? this.currentQuestionPage,
      currentTradePage: currentTradePage ?? this.currentTradePage,
      selectedCategory: selectedCategory ?? this.selectedCategory,
      searchQuery: searchQuery ?? this.searchQuery,
      sortBy: sortBy ?? this.sortBy,
    );
  }
}
// Constants
class TradeType {
  static const String trade = 'trade';
  static const String sell = 'sell';
  static const String giveAway = 'give_away';
  static const List<String> all = [trade, sell, giveAway];
  static String getDisplayName(String type) {
    switch (type) {
      case trade:
        return 'Trade';
      case sell:
        return 'Sell';
      case giveAway:
        return 'Give Away';
      default:
        return type;
    }
  }
}
class QuestionCategory {
  static const String general = 'general';
  static const String care = 'care';
  static const String identification = 'identification';
  static const String pests = 'pests';
  static const String diseases = 'diseases';
  static const String propagation = 'propagation';
  static const String troubleshooting = 'troubleshooting';
  static const List<String> all = [
    general,
    care,
    identification,
    pests,
    diseases,
    propagation,
    troubleshooting,
  ];
  static String getDisplayName(String category) {
    switch (category) {
      case general:
        return 'General';
      case care:
        return 'Plant Care';
      case identification:
        return 'Plant ID';
      case pests:
        return 'Pests';
      case diseases:
        return 'Diseases';
      case propagation:
        return 'Propagation';
      case troubleshooting:
        return 'Troubleshooting';
      default:
        return category;
    }
  }
  static String getIcon(String category) {
    switch (category) {
      case general:
        return '💬';
      case care:
        return '🌱';
      case identification:
        return '🔍';
      case pests:
        return '🐛';
      case diseases:
        return '🦠';
      case propagation:
        return '🌿';
      case troubleshooting:
        return '🔧';
      default:
        return '❓';
    }
  }
}
class SortOption {
  static const String newest = 'newest';
  static const String oldest = 'oldest';
  static const String mostUpvoted = 'most_upvoted';
  static const String mostAnswered = 'most_answered';
  static const String unsolved = 'unsolved';
  static const List<String> questionSortOptions = [
    newest,
    oldest,
    mostUpvoted,
    mostAnswered,
    unsolved,
  ];
  static const List<String> tradeSortOptions = [
    newest,
    oldest,
  ];
  static String getDisplayName(String option) {
    switch (option) {
      case newest:
        return 'Newest';
      case oldest:
        return 'Oldest';
      case mostUpvoted:
        return 'Most Upvoted';
      case mostAnswered:
        return 'Most Answered';
      case unsolved:
        return 'Unsolved';
      default:
        return option;
    }
  }
}
</file>

<file path="lib/features/plant_community/models/plant_community_models.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'plant_community_models.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
PlantQuestion _$PlantQuestionFromJson(Map<String, dynamic> json) =>
    PlantQuestion(
      id: json['id'] as String,
      userId: json['userId'] as String,
      title: json['title'] as String,
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      category: json['category'] as String? ?? QuestionCategory.general,
      tags:
          (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList() ??
              const [],
      upvotes: (json['upvotes'] as num?)?.toInt() ?? 0,
      downvotes: (json['downvotes'] as num?)?.toInt() ?? 0,
      views: (json['views'] as num?)?.toInt() ?? 0,
      answerCount: (json['answerCount'] as num?)?.toInt() ?? 0,
      isSolved: json['isSolved'] as bool? ?? false,
      acceptedAnswerId: json['acceptedAnswerId'] as String?,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      userDisplayName: json['userDisplayName'] as String?,
      userAvatarUrl: json['userAvatarUrl'] as String?,
      speciesCommonName: json['speciesCommonName'] as String?,
      speciesScientificName: json['speciesScientificName'] as String?,
      userVote: json['userVote'] as String?,
      isBookmarked: json['isBookmarked'] as bool? ?? false,
    );
Map<String, dynamic> _$PlantQuestionToJson(PlantQuestion instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'title': instance.title,
      'content': instance.content,
      'imageUrl': instance.imageUrl,
      'plantSpeciesId': instance.plantSpeciesId,
      'category': instance.category,
      'tags': instance.tags,
      'upvotes': instance.upvotes,
      'downvotes': instance.downvotes,
      'views': instance.views,
      'answerCount': instance.answerCount,
      'isSolved': instance.isSolved,
      'acceptedAnswerId': instance.acceptedAnswerId,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'userDisplayName': instance.userDisplayName,
      'userAvatarUrl': instance.userAvatarUrl,
      'speciesCommonName': instance.speciesCommonName,
      'speciesScientificName': instance.speciesScientificName,
      'userVote': instance.userVote,
      'isBookmarked': instance.isBookmarked,
    };
PlantAnswer _$PlantAnswerFromJson(Map<String, dynamic> json) => PlantAnswer(
      id: json['id'] as String,
      questionId: json['questionId'] as String,
      userId: json['userId'] as String,
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
      upvotes: (json['upvotes'] as num?)?.toInt() ?? 0,
      downvotes: (json['downvotes'] as num?)?.toInt() ?? 0,
      isAccepted: json['isAccepted'] as bool? ?? false,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      userDisplayName: json['userDisplayName'] as String?,
      userAvatarUrl: json['userAvatarUrl'] as String?,
      userVote: json['userVote'] as String?,
    );
Map<String, dynamic> _$PlantAnswerToJson(PlantAnswer instance) =>
    <String, dynamic>{
      'id': instance.id,
      'questionId': instance.questionId,
      'userId': instance.userId,
      'content': instance.content,
      'imageUrl': instance.imageUrl,
      'upvotes': instance.upvotes,
      'downvotes': instance.downvotes,
      'isAccepted': instance.isAccepted,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'userDisplayName': instance.userDisplayName,
      'userAvatarUrl': instance.userAvatarUrl,
      'userVote': instance.userVote,
    };
PlantTrade _$PlantTradeFromJson(Map<String, dynamic> json) => PlantTrade(
      id: json['id'] as String,
      userId: json['userId'] as String,
      title: json['title'] as String,
      description: json['description'] as String,
      tradeType: json['tradeType'] as String,
      price: json['price'] as String?,
      imageUrls: (json['imageUrls'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          const [],
      location: json['location'] as String,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      tags:
          (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList() ??
              const [],
      status: json['status'] as String? ?? 'active',
      viewCount: (json['viewCount'] as num?)?.toInt() ?? 0,
      interestedCount: (json['interestedCount'] as num?)?.toInt() ?? 0,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      userDisplayName: json['userDisplayName'] as String?,
      userAvatarUrl: json['userAvatarUrl'] as String?,
      speciesCommonName: json['speciesCommonName'] as String?,
      speciesScientificName: json['speciesScientificName'] as String?,
      isBookmarked: json['isBookmarked'] as bool? ?? false,
      hasExpressedInterest: json['hasExpressedInterest'] as bool? ?? false,
    );
Map<String, dynamic> _$PlantTradeToJson(PlantTrade instance) =>
    <String, dynamic>{
      'id': instance.id,
      'userId': instance.userId,
      'title': instance.title,
      'description': instance.description,
      'tradeType': instance.tradeType,
      'price': instance.price,
      'imageUrls': instance.imageUrls,
      'location': instance.location,
      'plantSpeciesId': instance.plantSpeciesId,
      'tags': instance.tags,
      'status': instance.status,
      'viewCount': instance.viewCount,
      'interestedCount': instance.interestedCount,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'userDisplayName': instance.userDisplayName,
      'userAvatarUrl': instance.userAvatarUrl,
      'speciesCommonName': instance.speciesCommonName,
      'speciesScientificName': instance.speciesScientificName,
      'isBookmarked': instance.isBookmarked,
      'hasExpressedInterest': instance.hasExpressedInterest,
    };
PlantQuestionRequest _$PlantQuestionRequestFromJson(
        Map<String, dynamic> json) =>
    PlantQuestionRequest(
      title: json['title'] as String,
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      tags:
          (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList() ??
              const [],
    );
Map<String, dynamic> _$PlantQuestionRequestToJson(
        PlantQuestionRequest instance) =>
    <String, dynamic>{
      'title': instance.title,
      'content': instance.content,
      'imageUrl': instance.imageUrl,
      'plantSpeciesId': instance.plantSpeciesId,
      'tags': instance.tags,
    };
PlantAnswerRequest _$PlantAnswerRequestFromJson(Map<String, dynamic> json) =>
    PlantAnswerRequest(
      content: json['content'] as String,
      imageUrl: json['imageUrl'] as String?,
    );
Map<String, dynamic> _$PlantAnswerRequestToJson(PlantAnswerRequest instance) =>
    <String, dynamic>{
      'content': instance.content,
      'imageUrl': instance.imageUrl,
    };
PlantTradeRequest _$PlantTradeRequestFromJson(Map<String, dynamic> json) =>
    PlantTradeRequest(
      title: json['title'] as String,
      description: json['description'] as String,
      tradeType: json['tradeType'] as String,
      price: json['price'] as String?,
      imageUrls: (json['imageUrls'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          const [],
      location: json['location'] as String,
      plantSpeciesId: json['plantSpeciesId'] as String?,
      tags:
          (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList() ??
              const [],
    );
Map<String, dynamic> _$PlantTradeRequestToJson(PlantTradeRequest instance) =>
    <String, dynamic>{
      'title': instance.title,
      'description': instance.description,
      'tradeType': instance.tradeType,
      'price': instance.price,
      'imageUrls': instance.imageUrls,
      'location': instance.location,
      'plantSpeciesId': instance.plantSpeciesId,
      'tags': instance.tags,
    };
PlantCommunityState _$PlantCommunityStateFromJson(Map<String, dynamic> json) =>
    PlantCommunityState(
      isLoading: json['isLoading'] as bool? ?? false,
      questions: (json['questions'] as List<dynamic>?)
              ?.map((e) => PlantQuestion.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      answers: (json['answers'] as List<dynamic>?)
              ?.map((e) => PlantAnswer.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      trades: (json['trades'] as List<dynamic>?)
              ?.map((e) => PlantTrade.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      error: json['error'] as String?,
      hasMoreQuestions: json['hasMoreQuestions'] as bool? ?? false,
      hasMoreTrades: json['hasMoreTrades'] as bool? ?? false,
      currentQuestionPage: (json['currentQuestionPage'] as num?)?.toInt() ?? 1,
      currentTradePage: (json['currentTradePage'] as num?)?.toInt() ?? 1,
      selectedCategory: json['selectedCategory'] as String?,
      searchQuery: json['searchQuery'] as String?,
      sortBy: json['sortBy'] as String?,
    );
Map<String, dynamic> _$PlantCommunityStateToJson(
        PlantCommunityState instance) =>
    <String, dynamic>{
      'isLoading': instance.isLoading,
      'questions': instance.questions,
      'answers': instance.answers,
      'trades': instance.trades,
      'error': instance.error,
      'hasMoreQuestions': instance.hasMoreQuestions,
      'hasMoreTrades': instance.hasMoreTrades,
      'currentQuestionPage': instance.currentQuestionPage,
      'currentTradePage': instance.currentTradePage,
      'selectedCategory': instance.selectedCategory,
      'searchQuery': instance.searchQuery,
      'sortBy': instance.sortBy,
    };
</file>

<file path="lib/features/plant_community/presentation/screens/plant_community_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_community/presentation/screens/plant_questions_screen.dart';
import 'package:plant_social/features/plant_community/presentation/screens/plant_trades_screen.dart';
import 'package:plant_social/core/theme/app_theme.dart';
class PlantCommunityScreen extends ConsumerStatefulWidget {
  const PlantCommunityScreen({super.key});
  @override
  ConsumerState<PlantCommunityScreen> createState() => _PlantCommunityScreenState();
}
class _PlantCommunityScreenState extends ConsumerState<PlantCommunityScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  int _currentIndex = 0;
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _tabController.addListener(() {
      if (_tabController.indexIsChanging) {
        setState(() {
          _currentIndex = _tabController.index;
        });
      }
    });
  }
  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Plant Community'),
        elevation: 0,
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(
              icon: Icon(Icons.help_outline),
              text: 'Q&A',
            ),
            Tab(
              icon: Icon(Icons.swap_horiz),
              text: 'Trades',
            ),
          ],
          indicatorColor: theme.primaryColor,
          labelColor: theme.primaryColor,
          unselectedLabelColor: Colors.grey[600],
        ),
        actions: [
          IconButton(
            onPressed: _navigateToMyContent,
            icon: const Icon(Icons.person_outline),
            tooltip: 'My Content',
          ),
          IconButton(
            onPressed: _navigateToBookmarks,
            icon: const Icon(Icons.bookmark_outline),
            tooltip: 'Bookmarks',
          ),
        ],
      ),
      body: TabBarView(
        controller: _tabController,
        children: const [
          PlantQuestionsScreen(),
          PlantTradesScreen(),
        ],
      ),
      floatingActionButton: _buildFloatingActionButton(),
    );
  }
  Widget _buildFloatingActionButton() {
    final theme = Theme.of(context);
    return FloatingActionButton(
      onPressed: _onFabPressed,
      child: Icon(
        _currentIndex == 0 ? Icons.add_comment : Icons.add_business,
      ),
      tooltip: _currentIndex == 0 ? 'Ask Question' : 'Create Trade',
      backgroundColor: theme.primaryColor,
    );
  }
  void _onFabPressed() {
    if (_currentIndex == 0) {
      _navigateToAskQuestion();
    } else {
      _navigateToCreateTrade();
    }
  }
  void _navigateToAskQuestion() {
    Navigator.pushNamed(context, '/ask-question');
  }
  void _navigateToCreateTrade() {
    Navigator.pushNamed(context, '/create-trade');
  }
  void _navigateToMyContent() {
    Navigator.pushNamed(context, '/my-community-content');
  }
  void _navigateToBookmarks() {
    Navigator.pushNamed(context, '/community-bookmarks');
  }
}
// Alternative layout with bottom navigation
class PlantCommunityBottomNavScreen extends ConsumerStatefulWidget {
  const PlantCommunityBottomNavScreen({super.key});
  @override
  ConsumerState<PlantCommunityBottomNavScreen> createState() => _PlantCommunityBottomNavScreenState();
}
class _PlantCommunityBottomNavScreenState extends ConsumerState<PlantCommunityBottomNavScreen> {
  int _currentIndex = 0;
  final List<Widget> _screens = const [
    PlantQuestionsScreen(),
    PlantTradesScreen(),
  ];
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: _screens,
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) => setState(() => _currentIndex = index),
        type: BottomNavigationBarType.fixed,
        selectedItemColor: theme.primaryColor,
        unselectedItemColor: Colors.grey[600],
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.help_outline),
            activeIcon: Icon(Icons.help),
            label: 'Q&A',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.swap_horiz),
            activeIcon: Icon(Icons.swap_horizontal_circle),
            label: 'Trades',
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _onFabPressed,
        child: Icon(
          _currentIndex == 0 ? Icons.add_comment : Icons.add_business,
        ),
        tooltip: _currentIndex == 0 ? 'Ask Question' : 'Create Trade',
      ),
    );
  }
  void _onFabPressed() {
    if (_currentIndex == 0) {
      Navigator.pushNamed(context, '/ask-question');
    } else {
      Navigator.pushNamed(context, '/create-trade');
    }
  }
}
</file>

<file path="lib/features/plant_community/presentation/screens/plant_questions_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_community/models/plant_community_models.dart';
import 'package:plant_social/features/plant_community/providers/plant_community_provider.dart';
import 'package:plant_social/features/plant_community/presentation/widgets/question_card.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/widgets/custom_search_bar.dart';
class PlantQuestionsScreen extends ConsumerStatefulWidget {
  const PlantQuestionsScreen({super.key});
  @override
  ConsumerState<PlantQuestionsScreen> createState() => _PlantQuestionsScreenState();
}
class _PlantQuestionsScreenState extends ConsumerState<PlantQuestionsScreen>
    with SingleTickerProviderStateMixin {
  final _scrollController = ScrollController();
  final _searchController = TextEditingController();
  String? _selectedCategory;
  String? _selectedSort = SortOption.newest;
  bool _showFilters = false;
  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
    // Load initial questions
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(plantCommunityProvider.notifier).loadQuestions(refresh: true);
    });
  }
  @override
  void dispose() {
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }
  void _onScroll() {
    if (_scrollController.position.pixels >=
        _scrollController.position.maxScrollExtent - 200) {
      final state = ref.read(plantCommunityProvider);
      if (!state.isLoading && state.hasMoreQuestions) {
        ref.read(plantCommunityProvider.notifier).loadQuestions(
          category: _selectedCategory,
          search: _searchController.text.trim().isEmpty
              ? null
              : _searchController.text.trim(),
          sortBy: _selectedSort,
        );
      }
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final state = ref.watch(plantCommunityProvider);
    final questions = ref.watch(questionsProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Plant Q&A'),
        elevation: 0,
        actions: [
          IconButton(
            onPressed: () => setState(() => _showFilters = !_showFilters),
            icon: Icon(
              _showFilters ? Icons.filter_list_off : Icons.filter_list,
            ),
          ),
          IconButton(
            onPressed: _navigateToAskQuestion,
            icon: const Icon(Icons.add),
          ),
        ],
      ),
      body: Column(
        children: [
          // Search bar
          Padding(
            padding: const EdgeInsets.all(16),
            child: CustomSearchBar(
              controller: _searchController,
              hintText: 'Search questions...',
              onChanged: _onSearchChanged,
              onSubmitted: _onSearchSubmitted,
            ),
          ),
          // Filters
          if (_showFilters) _buildFilters(theme),
          // Questions list
          Expanded(
            child: _buildQuestionsList(questions, state),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToAskQuestion,
        child: const Icon(Icons.add),
        tooltip: 'Ask a Question',
      ),
    );
  }
  Widget _buildFilters(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        border: Border(
          bottom: BorderSide(color: Colors.grey[200]!),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Categories
          Text(
            'Categories',
            style: theme.textTheme.titleSmall?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          SizedBox(
            height: 40,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: QuestionCategory.all.length + 1,
              itemBuilder: (context, index) {
                if (index == 0) {
                  return _buildCategoryChip(
                    'All',
                    _selectedCategory == null,
                    () => _selectCategory(null),
                  );
                }
                final category = QuestionCategory.all[index - 1];
                return _buildCategoryChip(
                  QuestionCategory.getDisplayName(category),
                  _selectedCategory == category,
                  () => _selectCategory(category),
                );
              },
            ),
          ),
          const SizedBox(height: 16),
          // Sort options
          Row(
            children: [
              Text(
                'Sort by:',
                style: theme.textTheme.titleSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: DropdownButton<String>(
                  value: _selectedSort,
                  isExpanded: true,
                  underline: const SizedBox.shrink(),
                  items: SortOption.questionSortOptions.map((option) {
                    return DropdownMenuItem(
                      value: option,
                      child: Text(SortOption.getDisplayName(option)),
                    );
                  }).toList(),
                  onChanged: _selectSort,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  Widget _buildCategoryChip(
    String label,
    bool isSelected,
    VoidCallback onTap,
  ) {
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.only(right: 8),
      child: FilterChip(
        label: Text(label),
        selected: isSelected,
        onSelected: (_) => onTap(),
        backgroundColor: Colors.grey[100],
        selectedColor: theme.primaryColor.withOpacity(0.2),
        checkmarkColor: theme.primaryColor,
        labelStyle: TextStyle(
          color: isSelected ? theme.primaryColor : Colors.grey[700],
          fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
        ),
      ),
    );
  }
  Widget _buildQuestionsList(
    List<PlantQuestion> questions,
    PlantCommunityState state,
  ) {
    if (state.isLoading && questions.isEmpty) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }
    if (state.error != null && questions.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Failed to load questions',
              style: TextStyle(
                fontSize: 18,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              state.error!,
              style: TextStyle(
                color: Colors.grey[500],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _refreshQuestions,
              child: const Text('Retry'),
            ),
          ],
        ),
      );
    }
    if (questions.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.help_outline,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'No questions found',
              style: TextStyle(
                fontSize: 18,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Be the first to ask a question!',
              style: TextStyle(
                color: Colors.grey[500],
              ),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _navigateToAskQuestion,
              child: const Text('Ask a Question'),
            ),
          ],
        ),
      );
    }
    return RefreshIndicator(
      onRefresh: _refreshQuestions,
      child: ListView.builder(
        controller: _scrollController,
        padding: const EdgeInsets.all(16),
        itemCount: questions.length + (state.hasMoreQuestions ? 1 : 0),
        itemBuilder: (context, index) {
          if (index >= questions.length) {
            return const Padding(
              padding: EdgeInsets.all(16),
              child: Center(
                child: CircularProgressIndicator(),
              ),
            );
          }
          final question = questions[index];
          return QuestionCard(
            question: question,
            onTap: () => _navigateToQuestionDetail(question),
            onVote: (voteType) => _voteQuestion(question.id, voteType),
            onBookmark: () => _bookmarkQuestion(question.id),
          );
        },
      ),
    );
  }
  void _onSearchChanged(String value) {
    // Implement debounced search if needed
  }
  void _onSearchSubmitted(String value) {
    _refreshQuestions();
  }
  void _selectCategory(String? category) {
    setState(() {
      _selectedCategory = category;
    });
    _refreshQuestions();
  }
  void _selectSort(String? sortBy) {
    setState(() {
      _selectedSort = sortBy;
    });
    _refreshQuestions();
  }
  Future<void> _refreshQuestions() async {
    await ref.read(plantCommunityProvider.notifier).loadQuestions(
      refresh: true,
      category: _selectedCategory,
      search: _searchController.text.trim().isEmpty
          ? null
          : _searchController.text.trim(),
      sortBy: _selectedSort,
    );
  }
  void _voteQuestion(String questionId, String voteType) {
    ref.read(plantCommunityProvider.notifier).voteQuestion(questionId, voteType);
  }
  void _bookmarkQuestion(String questionId) {
    ref.read(plantCommunityProvider.notifier).bookmarkQuestion(questionId);
  }
  void _navigateToAskQuestion() {
    Navigator.pushNamed(
      context,
      '/ask-question',
    ).then((result) {
      if (result == true) {
        _refreshQuestions();
      }
    });
  }
  void _navigateToQuestionDetail(PlantQuestion question) {
    Navigator.pushNamed(
      context,
      '/question-detail',
      arguments: question.id,
    );
  }
}
</file>

<file path="lib/features/plant_community/presentation/screens/plant_trades_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_community/models/plant_community_models.dart';
import 'package:plant_social/features/plant_community/providers/plant_community_provider.dart';
import 'package:plant_social/features/plant_community/presentation/widgets/trade_card.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/widgets/custom_search_bar.dart';
class PlantTradesScreen extends ConsumerStatefulWidget {
  const PlantTradesScreen({super.key});
  @override
  ConsumerState<PlantTradesScreen> createState() => _PlantTradesScreenState();
}
class _PlantTradesScreenState extends ConsumerState<PlantTradesScreen>
    with SingleTickerProviderStateMixin {
  final _scrollController = ScrollController();
  final _searchController = TextEditingController();
  String? _selectedTradeType;
  String? _selectedSort = SortOption.newest;
  bool _showFilters = false;
  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
    // Load initial trades
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(plantCommunityProvider.notifier).loadTrades(refresh: true);
    });
  }
  @override
  void dispose() {
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }
  void _onScroll() {
    if (_scrollController.position.pixels >=
        _scrollController.position.maxScrollExtent - 200) {
      final state = ref.read(plantCommunityProvider);
      if (!state.isLoading && state.hasMoreTrades) {
        ref.read(plantCommunityProvider.notifier).loadTrades(
          tradeType: _selectedTradeType,
          search: _searchController.text.trim().isEmpty
              ? null
              : _searchController.text.trim(),
          sortBy: _selectedSort,
        );
      }
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final state = ref.watch(plantCommunityProvider);
    final trades = ref.watch(tradesProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Plant Trades'),
        elevation: 0,
        actions: [
          IconButton(
            onPressed: () => setState(() => _showFilters = !_showFilters),
            icon: Icon(
              _showFilters ? Icons.filter_list_off : Icons.filter_list,
            ),
          ),
          IconButton(
            onPressed: _navigateToCreateTrade,
            icon: const Icon(Icons.add),
          ),
        ],
      ),
      body: Column(
        children: [
          // Search bar
          Padding(
            padding: const EdgeInsets.all(16),
            child: CustomSearchBar(
              controller: _searchController,
              hintText: 'Search plants to trade...',
              onChanged: _onSearchChanged,
              onSubmitted: _onSearchSubmitted,
            ),
          ),
          // Filters
          if (_showFilters) _buildFilters(theme),
          // Trades list
          Expanded(
            child: _buildTradesList(trades, state),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToCreateTrade,
        child: const Icon(Icons.add),
        tooltip: 'Create Trade',
      ),
    );
  }
  Widget _buildFilters(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        border: Border(
          bottom: BorderSide(color: Colors.grey[200]!),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Trade types
          Text(
            'Trade Types',
            style: theme.textTheme.titleSmall?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          SizedBox(
            height: 40,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: TradeType.all.length + 1,
              itemBuilder: (context, index) {
                if (index == 0) {
                  return _buildTradeTypeChip(
                    'All',
                    _selectedTradeType == null,
                    () => _selectTradeType(null),
                  );
                }
                final tradeType = TradeType.all[index - 1];
                return _buildTradeTypeChip(
                  TradeType.getDisplayName(tradeType),
                  _selectedTradeType == tradeType,
                  () => _selectTradeType(tradeType),
                );
              },
            ),
          ),
          const SizedBox(height: 16),
          // Sort options
          Row(
            children: [
              Text(
                'Sort by:',
                style: theme.textTheme.titleSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: DropdownButton<String>(
                  value: _selectedSort,
                  isExpanded: true,
                  underline: const SizedBox.shrink(),
                  items: SortOption.tradeSortOptions.map((option) {
                    return DropdownMenuItem(
                      value: option,
                      child: Text(SortOption.getDisplayName(option)),
                    );
                  }).toList(),
                  onChanged: _selectSort,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  Widget _buildTradeTypeChip(
    String label,
    bool isSelected,
    VoidCallback onTap,
  ) {
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.only(right: 8),
      child: FilterChip(
        label: Text(label),
        selected: isSelected,
        onSelected: (_) => onTap(),
        backgroundColor: Colors.grey[100],
        selectedColor: theme.primaryColor.withOpacity(0.2),
        checkmarkColor: theme.primaryColor,
        labelStyle: TextStyle(
          color: isSelected ? theme.primaryColor : Colors.grey[700],
          fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
        ),
      ),
    );
  }
  Widget _buildTradesList(
    List<PlantTrade> trades,
    PlantCommunityState state,
  ) {
    if (state.isLoading && trades.isEmpty) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }
    if (state.error != null && trades.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Failed to load trades',
              style: TextStyle(
                fontSize: 18,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              state.error!,
              style: TextStyle(
                color: Colors.grey[500],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _refreshTrades,
              child: const Text('Retry'),
            ),
          ],
        ),
      );
    }
    if (trades.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.swap_horiz,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'No trades available',
              style: TextStyle(
                fontSize: 18,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Be the first to create a trade!',
              style: TextStyle(
                color: Colors.grey[500],
              ),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _navigateToCreateTrade,
              child: const Text('Create Trade'),
            ),
          ],
        ),
      );
    }
    return RefreshIndicator(
      onRefresh: _refreshTrades,
      child: ListView.builder(
        controller: _scrollController,
        padding: const EdgeInsets.all(16),
        itemCount: trades.length + (state.hasMoreTrades ? 1 : 0),
        itemBuilder: (context, index) {
          if (index >= trades.length) {
            return const Padding(
              padding: EdgeInsets.all(16),
              child: Center(
                child: CircularProgressIndicator(),
              ),
            );
          }
          final trade = trades[index];
          return TradeCard(
            trade: trade,
            onTap: () => _navigateToTradeDetail(trade),
            onBookmark: () => _bookmarkTrade(trade.id),
            onInterest: () => _expressInterest(trade.id),
          );
        },
      ),
    );
  }
  void _onSearchChanged(String value) {
    // Implement debounced search if needed
  }
  void _onSearchSubmitted(String value) {
    _refreshTrades();
  }
  void _selectTradeType(String? tradeType) {
    setState(() {
      _selectedTradeType = tradeType;
    });
    _refreshTrades();
  }
  void _selectSort(String? sortBy) {
    setState(() {
      _selectedSort = sortBy;
    });
    _refreshTrades();
  }
  Future<void> _refreshTrades() async {
    await ref.read(plantCommunityProvider.notifier).loadTrades(
      refresh: true,
      tradeType: _selectedTradeType,
      search: _searchController.text.trim().isEmpty
          ? null
          : _searchController.text.trim(),
      sortBy: _selectedSort,
    );
  }
  void _bookmarkTrade(String tradeId) {
    ref.read(plantCommunityProvider.notifier).bookmarkTrade(tradeId);
  }
  void _expressInterest(String tradeId) {
    ref.read(plantCommunityProvider.notifier).expressInterest(tradeId);
  }
  void _navigateToCreateTrade() {
    Navigator.pushNamed(
      context,
      '/create-trade',
    ).then((result) {
      if (result == true) {
        _refreshTrades();
      }
    });
  }
  void _navigateToTradeDetail(PlantTrade trade) {
    Navigator.pushNamed(
      context,
      '/trade-detail',
      arguments: trade.id,
    );
  }
}
</file>

<file path="lib/features/plant_community/presentation/widgets/question_card.dart">
import 'package:flutter/material.dart';
import 'package:plant_social/features/plant_community/models/plant_community_models.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/utils/date_utils.dart' as AppDateUtils;
import 'package:plant_social/core/widgets/user_avatar.dart';
import 'package:plant_social/core/widgets/vote_buttons.dart';
class QuestionCard extends StatelessWidget {
  final PlantQuestion question;
  final VoidCallback? onTap;
  final Function(String)? onVote;
  final VoidCallback? onBookmark;
  final bool showFullContent;
  const QuestionCard({
    super.key,
    required this.question,
    this.onTap,
    this.onVote,
    this.onBookmark,
    this.showFullContent = false,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header with user info and status
              _buildHeader(theme),
              const SizedBox(height: 12),
              // Title
              Text(
                question.title,
                style: theme.textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onSurface,
                ),
                maxLines: showFullContent ? null : 2,
                overflow: showFullContent ? null : TextOverflow.ellipsis,
              ),
              const SizedBox(height: 8),
              // Content preview
              if (question.content.isNotEmpty)
                Text(
                  question.content,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: Colors.grey[700],
                  ),
                  maxLines: showFullContent ? null : 3,
                  overflow: showFullContent ? null : TextOverflow.ellipsis,
                ),
              const SizedBox(height: 12),
              // Tags
              if (question.tags.isNotEmpty) _buildTags(theme),
              const SizedBox(height: 12),
              // Images preview
              if (question.imageUrl != null) _buildImagePreview(),
              if (question.imageUrl != null) const SizedBox(height: 12),
              // Footer with stats and actions
              _buildFooter(theme),
            ],
          ),
        ),
      ),
    );
  }
  Widget _buildHeader(ThemeData theme) {
    return Row(
      children: [
        // User avatar
        UserAvatar(
          imageUrl: question.userAvatarUrl,
          username: question.userDisplayName ?? 'Anonymous',
          size: 32,
        ),
        const SizedBox(width: 12),
        // User info and timestamp
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                question.userDisplayName ?? 'Anonymous',
                style: theme.textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
              Text(
                AppDateUtils.DateUtils.formatRelativeTime(question.createdAt),
                style: theme.textTheme.bodySmall?.copyWith(
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
        // Category badge
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
          decoration: BoxDecoration(
            color: _getCategoryColor(question.category).withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: _getCategoryColor(question.category).withOpacity(0.3),
            ),
          ),
          child: Text(
            QuestionCategory.getDisplayName(question.category),
            style: theme.textTheme.bodySmall?.copyWith(
              color: _getCategoryColor(question.category),
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        // Solved indicator
        if (question.isSolved)
          Container(
            margin: const EdgeInsets.only(left: 8),
            padding: const EdgeInsets.all(4),
            decoration: BoxDecoration(
              color: Colors.green,
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Icon(
              Icons.check,
              size: 16,
              color: Colors.white,
            ),
          ),
      ],
    );
  }
  Widget _buildTags(ThemeData theme) {
    return Wrap(
      spacing: 6,
      runSpacing: 6,
      children: question.tags.take(showFullContent ? question.tags.length : 3).map((tag) {
        return Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
          decoration: BoxDecoration(
            color: Colors.grey[100],
            borderRadius: BorderRadius.circular(12),
          ),
          child: Text(
            '#$tag',
            style: theme.textTheme.bodySmall?.copyWith(
              color: Colors.grey[700],
              fontWeight: FontWeight.w500,
            ),
          ),
        );
      }).toList(),
    );
  }
  Widget _buildImagePreview() {
    if (question.imageUrl == null) return const SizedBox.shrink();
    return Container(
      height: 80,
      child: ClipRRect(
        borderRadius: BorderRadius.circular(8),
        child: Image.network(
          question.imageUrl!,
          width: 80,
          height: 80,
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) {
            return Container(
              width: 80,
              height: 80,
              color: Colors.grey[200],
              child: const Icon(
                Icons.image_not_supported,
                color: Colors.grey,
              ),
            );
          },
        ),
      ),
    );
  }
  Widget _buildFooter(ThemeData theme) {
    return Row(
      children: [
        // Vote buttons
        VoteButtons(
          upvotes: question.upvotes,
          downvotes: question.downvotes,
          userVote: question.userVote,
          onVote: onVote,
          size: VoteButtonSize.small,
        ),
        const SizedBox(width: 16),
        // Answer count
        Row(
          children: [
            Icon(
              Icons.chat_bubble_outline,
              size: 16,
              color: Colors.grey[600],
            ),
            const SizedBox(width: 4),
            Text(
              '${question.answerCount}',
              style: theme.textTheme.bodySmall?.copyWith(
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
        const SizedBox(width: 16),
        // View count
        Row(
          children: [
            Icon(
              Icons.visibility_outlined,
              size: 16,
              color: Colors.grey[600],
            ),
            const SizedBox(width: 4),
            Text(
              '${question.views}',
              style: theme.textTheme.bodySmall?.copyWith(
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
        const Spacer(),
        // Bookmark button
        IconButton(
          onPressed: onBookmark,
          icon: Icon(
            question.isBookmarked
                ? Icons.bookmark
                : Icons.bookmark_border,
            size: 20,
            color: question.isBookmarked
                ? theme.primaryColor
                : Colors.grey[600],
          ),
          constraints: const BoxConstraints(
            minWidth: 32,
            minHeight: 32,
          ),
          padding: EdgeInsets.zero,
        ),
      ],
    );
  }
  Color _getCategoryColor(String category) {
    switch (category) {
      case QuestionCategory.identification:
        return Colors.blue;
      case QuestionCategory.care:
        return Colors.green;
      case QuestionCategory.diseases:
        return Colors.red;
      case QuestionCategory.pests:
        return Colors.orange;
      case QuestionCategory.propagation:
        return Colors.purple;
      case QuestionCategory.general:
      default:
        return Colors.grey;
    }
  }
}
</file>

<file path="lib/features/plant_community/presentation/widgets/trade_card.dart">
import 'package:flutter/material.dart';
import 'package:plant_social/features/plant_community/models/plant_community_models.dart';
import 'package:plant_social/core/utils/date_utils.dart' as app_date_utils;
import 'package:plant_social/core/widgets/user_avatar.dart';
class TradeCard extends StatelessWidget {
  final PlantTrade trade;
  final VoidCallback? onTap;
  final VoidCallback? onBookmark;
  final VoidCallback? onInterest;
  final bool showFullContent;
  const TradeCard({
    super.key,
    required this.trade,
    this.onTap,
    this.onBookmark,
    this.onInterest,
    this.showFullContent = false,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header with user info and trade type
              _buildHeader(theme),
              const SizedBox(height: 12),
              // Title
              Text(
                trade.title,
                style: theme.textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onSurface,
                ),
                maxLines: showFullContent ? null : 2,
                overflow: showFullContent ? null : TextOverflow.ellipsis,
              ),
              const SizedBox(height: 8),
              // Description preview
              if (trade.description.isNotEmpty)
                Text(
                  trade.description,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: Colors.grey[700],
                  ),
                  maxLines: showFullContent ? null : 2,
                  overflow: showFullContent ? null : TextOverflow.ellipsis,
                ),
              const SizedBox(height: 12),
              // Plant details
              _buildPlantDetails(theme),
              const SizedBox(height: 12),
              // Images
              if (trade.imageUrls.isNotEmpty) _buildImagePreview(),
              if (trade.imageUrls.isNotEmpty) const SizedBox(height: 12),
              // Footer with location, status, and actions
              _buildFooter(theme),
            ],
          ),
        ),
      ),
    );
  }
  Widget _buildHeader(ThemeData theme) {
    return Row(
      children: [
        // User avatar
        UserAvatar(
          imageUrl: trade.userAvatarUrl,
          username: trade.userDisplayName ?? 'Unknown User',
          size: 32,
        ),
        const SizedBox(width: 12),
        // User info and timestamp
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                trade.userDisplayName ?? 'Unknown User',
                style: theme.textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
              Text(
                app_date_utils.DateUtils.formatRelativeTime(trade.createdAt),
                style: theme.textTheme.bodySmall?.copyWith(
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
        // Trade type badge
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
          decoration: BoxDecoration(
            color: _getTradeTypeColor(trade.tradeType).withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: _getTradeTypeColor(trade.tradeType).withOpacity(0.3),
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                _getTradeTypeIcon(trade.tradeType),
                size: 14,
                color: _getTradeTypeColor(trade.tradeType),
              ),
              const SizedBox(width: 4),
              Text(
                TradeType.getDisplayName(trade.tradeType),
                style: theme.textTheme.bodySmall?.copyWith(
                  color: _getTradeTypeColor(trade.tradeType),
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
        // Status indicator
        Container(
          margin: const EdgeInsets.only(left: 8),
          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
          decoration: BoxDecoration(
            color: _getStatusColor(trade.status),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Text(
            _getStatusText(trade.status),
            style: theme.textTheme.bodySmall?.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.w600,
              fontSize: 10,
            ),
          ),
        ),
      ],
    );
  }
  Widget _buildPlantDetails(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[200]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Plant name
          Row(
            children: [
              Icon(
                Icons.local_florist,
                size: 16,
                color: Colors.green[600],
              ),
              const SizedBox(width: 6),
              Expanded(
                child: Text(
                  trade.speciesCommonName ?? trade.title,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: Colors.green[700],
                  ),
                ),
              ),
            ],
          ),
          if (trade.speciesScientificName != null && trade.speciesScientificName!.isNotEmpty) ...[
            const SizedBox(height: 4),
            Text(
              trade.speciesScientificName!,
              style: theme.textTheme.bodySmall?.copyWith(
                color: Colors.grey[600],
                fontStyle: FontStyle.italic,
              ),
            ),
          ],
          // What they want (for trade/swap)
          if (trade.tradeType != TradeType.giveAway && trade.description.isNotEmpty) ...[
            const SizedBox(height: 8),
            Row(
              children: [
                Icon(
                  Icons.swap_horiz,
                  size: 16,
                  color: Colors.blue[600],
                ),
                const SizedBox(width: 6),
                Expanded(
                  child: Text(
                    'Description: ${trade.description}',
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: Colors.blue[700],
                    ),
                  ),
                ),
              ],
            ),
          ],
          // Price (for sale)
          if (trade.tradeType == TradeType.sell && trade.price != null) ...[
            const SizedBox(height: 8),
            Row(
              children: [
                Icon(
                  Icons.attach_money,
                  size: 16,
                  color: Colors.orange[600],
                ),
                const SizedBox(width: 6),
                Text(
                  '\$${trade.price}',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: Colors.orange[700],
                  ),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }
  Widget _buildImagePreview() {
    final imageCount = trade.imageUrls.length;
    final displayCount = showFullContent ? imageCount : (imageCount > 3 ? 3 : imageCount);
    return SizedBox(
      height: 100,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: displayCount,
        itemBuilder: (context, index) {
          final isLast = index == displayCount - 1;
          final hasMore = !showFullContent && imageCount > 3;
          return Container(
            margin: EdgeInsets.only(right: isLast ? 0 : 8),
            child: Stack(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.network(
                    trade.imageUrls[index],
                    width: 100,
                    height: 100,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) {
                      return Container(
                        width: 100,
                        height: 100,
                        color: Colors.grey[200],
                        child: const Icon(
                          Icons.image_not_supported,
                          color: Colors.grey,
                        ),
                      );
                    },
                  ),
                ),
                // Show count overlay on last image if there are more
                if (isLast && hasMore)
                  Positioned.fill(
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.black54,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Center(
                        child: Text(
                          '+${imageCount - 3}',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          );
        },
      ),
    );
  }
  Widget _buildFooter(ThemeData theme) {
    return Row(
      children: [
        // Location
        if (trade.location.isNotEmpty) ...[
          Icon(
            Icons.location_on_outlined,
            size: 16,
            color: Colors.grey[600],
          ),
          const SizedBox(width: 4),
          Expanded(
            child: Text(
              trade.location,
              style: theme.textTheme.bodySmall?.copyWith(
                color: Colors.grey[600],
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ] else
          const Spacer(),
        // Interest count
        if (trade.interestedCount > 0) ...[
          const SizedBox(width: 12),
          Row(
            children: [
              Icon(
                Icons.favorite_outline,
                size: 16,
                color: Colors.grey[600],
              ),
              const SizedBox(width: 4),
              Text(
                '${trade.interestedCount}',
                style: theme.textTheme.bodySmall?.copyWith(
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ],
        // Action buttons
        Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Interest button
            if (trade.status == 'active' && onInterest != null)
              IconButton(
                onPressed: onInterest,
                icon: Icon(
                  trade.hasExpressedInterest
                      ? Icons.favorite
                      : Icons.favorite_outline,
                  size: 20,
                  color: trade.hasExpressedInterest
                      ? Colors.red
                      : Colors.grey[600],
                ),
                constraints: const BoxConstraints(
                  minWidth: 32,
                  minHeight: 32,
                ),
                padding: EdgeInsets.zero,
              ),
            // Bookmark button
            IconButton(
              onPressed: onBookmark,
              icon: Icon(
                trade.isBookmarked
                    ? Icons.bookmark
                    : Icons.bookmark_border,
                size: 20,
                color: trade.isBookmarked
                    ? theme.primaryColor
                    : Colors.grey[600],
              ),
              constraints: const BoxConstraints(
                minWidth: 32,
                minHeight: 32,
              ),
              padding: EdgeInsets.zero,
            ),
          ],
        ),
      ],
    );
  }
  Color _getTradeTypeColor(String tradeType) {
    switch (tradeType) {
      case TradeType.trade:
        return Colors.blue;
      case TradeType.sell:
        return Colors.orange;
      case TradeType.giveAway:
        return Colors.green;
      default:
        return Colors.grey;
    }
  }
  IconData _getTradeTypeIcon(String tradeType) {
    switch (tradeType) {
      case TradeType.trade:
        return Icons.swap_horiz;
      case TradeType.sell:
        return Icons.attach_money;
      case TradeType.giveAway:
        return Icons.card_giftcard;
      default:
        return Icons.help_outline;
    }
  }
  Color _getStatusColor(String status) {
    switch (status) {
      case 'active':
        return Colors.green;
      case 'pending':
        return Colors.orange;
      case 'completed':
        return Colors.blue;
      case 'cancelled':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }
  String _getStatusText(String status) {
    switch (status) {
      case 'active':
        return 'ACTIVE';
      case 'pending':
        return 'PENDING';
      case 'completed':
        return 'DONE';
      case 'cancelled':
        return 'CANCELLED';
      default:
        return status.toUpperCase();
    }
  }
}
</file>

<file path="lib/features/plant_community/providers/plant_community_provider.dart">
import 'dart:io';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_community/models/plant_community_models.dart';
import 'package:plant_social/features/plant_community/services/plant_community_service.dart';
import 'package:plant_social/core/providers/api_provider.dart';
import 'package:plant_social/core/providers/storage_provider.dart';
// Service provider
final plantCommunityServiceProvider = Provider<PlantCommunityService>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  final storageService = ref.watch(storageServiceProvider);
  return PlantCommunityService(apiService, storageService);
});
// State notifier for plant community
class PlantCommunityNotifier extends StateNotifier<PlantCommunityState> {
  final PlantCommunityService _service;
  PlantCommunityNotifier(this._service) : super(const PlantCommunityState());
  // Questions
  Future<void> loadQuestions({
    bool refresh = false,
    String? category,
    String? search,
    String? sortBy,
  }) async {
    if (refresh) {
      state = state.copyWith(
        currentQuestionPage: 1,
        questions: [],
        hasMoreQuestions: true,
      );
    }
    if (state.isLoading) return;
    state = state.copyWith(
      isLoading: true,
      error: null,
      selectedCategory: category,
      searchQuery: search,
      sortBy: sortBy,
    );
    try {
      final questions = await _service.getQuestions(
        page: state.currentQuestionPage,
        category: category,
        search: search,
        sortBy: sortBy,
      );
      final updatedQuestions = refresh
          ? questions
          : [...state.questions, ...questions];
      state = state.copyWith(
        isLoading: false,
        questions: updatedQuestions,
        hasMoreQuestions: questions.length >= 20,
        currentQuestionPage: state.currentQuestionPage + 1,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }
  Future<PlantQuestion?> getQuestion(String questionId) async {
    try {
      return await _service.getQuestion(questionId);
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  Future<PlantQuestion?> createQuestion(
    PlantQuestionRequest request, {
    File? imageFile,
  }) async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final question = await _service.createQuestion(request, imageFile: imageFile);
      // Add to the beginning of the list
      state = state.copyWith(
        isLoading: false,
        questions: [question, ...state.questions],
      );
      return question;
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
      return null;
    }
  }
  Future<PlantQuestion?> updateQuestion(
    String questionId,
    PlantQuestionRequest request, {
    File? imageFile,
  }) async {
    try {
      final updatedQuestion = await _service.updateQuestion(
        questionId,
        request,
        imageFile: imageFile,
      );
      // Update in the list
      final updatedQuestions = state.questions.map((q) {
        return q.id == questionId ? updatedQuestion : q;
      }).toList();
      state = state.copyWith(questions: updatedQuestions);
      return updatedQuestion;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  Future<bool> deleteQuestion(String questionId) async {
    try {
      await _service.deleteQuestion(questionId);
      // Remove from the list
      final updatedQuestions = state.questions
          .where((q) => q.id != questionId)
          .toList();
      state = state.copyWith(questions: updatedQuestions);
      return true;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return false;
    }
  }
  Future<void> voteQuestion(String questionId, String voteType) async {
    try {
      final updatedQuestion = await _service.voteQuestion(questionId, voteType);
      // Update in the list
      final updatedQuestions = state.questions.map((q) {
        return q.id == questionId ? updatedQuestion : q;
      }).toList();
      state = state.copyWith(questions: updatedQuestions);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  Future<void> bookmarkQuestion(String questionId) async {
    try {
      final updatedQuestion = await _service.bookmarkQuestion(questionId);
      // Update in the list
      final updatedQuestions = state.questions.map((q) {
        return q.id == questionId ? updatedQuestion : q;
      }).toList();
      state = state.copyWith(questions: updatedQuestions);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  Future<void> markQuestionSolved(
    String questionId,
    String acceptedAnswerId,
  ) async {
    try {
      final updatedQuestion = await _service.markQuestionSolved(
        questionId,
        acceptedAnswerId,
      );
      // Update in the list
      final updatedQuestions = state.questions.map((q) {
        return q.id == questionId ? updatedQuestion : q;
      }).toList();
      state = state.copyWith(questions: updatedQuestions);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  // Answers
  Future<List<PlantAnswer>?> getAnswers(
    String questionId, {
    String? sortBy,
  }) async {
    try {
      return await _service.getAnswers(questionId, sortBy: sortBy);
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  Future<PlantAnswer?> createAnswer(
    String questionId,
    PlantAnswerRequest request, {
    File? imageFile,
  }) async {
    try {
      final answer = await _service.createAnswer(
        questionId,
        request,
        imageFile: imageFile,
      );
      // Update question answer count
      final updatedQuestions = state.questions.map((q) {
        if (q.id == questionId) {
          return q.copyWith(answerCount: q.answerCount + 1);
        }
        return q;
      }).toList();
      state = state.copyWith(questions: updatedQuestions);
      return answer;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  Future<PlantAnswer?> updateAnswer(
    String answerId,
    PlantAnswerRequest request, {
    File? imageFile,
  }) async {
    try {
      return await _service.updateAnswer(
        answerId,
        request,
        imageFile: imageFile,
      );
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  Future<bool> deleteAnswer(String answerId, String questionId) async {
    try {
      await _service.deleteAnswer(answerId);
      // Update question answer count
      final updatedQuestions = state.questions.map((q) {
        if (q.id == questionId) {
          return q.copyWith(answerCount: q.answerCount - 1);
        }
        return q;
      }).toList();
      state = state.copyWith(questions: updatedQuestions);
      return true;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return false;
    }
  }
  Future<PlantAnswer?> voteAnswer(String answerId, String voteType) async {
    try {
      return await _service.voteAnswer(answerId, voteType);
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  // Trades
  Future<void> loadTrades({
    bool refresh = false,
    String? tradeType,
    String? location,
    String? search,
    String? sortBy,
  }) async {
    if (refresh) {
      state = state.copyWith(
        currentTradePage: 1,
        trades: [],
        hasMoreTrades: true,
      );
    }
    if (state.isLoading) return;
    state = state.copyWith(
      isLoading: true,
      error: null,
      searchQuery: search,
      sortBy: sortBy,
    );
    try {
      final trades = await _service.getTrades(
        page: state.currentTradePage,
        tradeType: tradeType,
        location: location,
        search: search,
        sortBy: sortBy,
      );
      final updatedTrades = refresh
          ? trades
          : [...state.trades, ...trades];
      state = state.copyWith(
        isLoading: false,
        trades: updatedTrades,
        hasMoreTrades: trades.length >= 20,
        currentTradePage: state.currentTradePage + 1,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }
  Future<PlantTrade?> getTrade(String tradeId) async {
    try {
      return await _service.getTrade(tradeId);
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  Future<PlantTrade?> createTrade(
    PlantTradeRequest request, {
    List<File>? imageFiles,
  }) async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final trade = await _service.createTrade(request, imageFiles: imageFiles);
      // Add to the beginning of the list
      state = state.copyWith(
        isLoading: false,
        trades: [trade, ...state.trades],
      );
      return trade;
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
      return null;
    }
  }
  Future<PlantTrade?> updateTrade(
    String tradeId,
    PlantTradeRequest request, {
    List<File>? imageFiles,
  }) async {
    try {
      final updatedTrade = await _service.updateTrade(
        tradeId,
        request,
        imageFiles: imageFiles,
      );
      // Update in the list
      final updatedTrades = state.trades.map((t) {
        return t.id == tradeId ? updatedTrade : t;
      }).toList();
      state = state.copyWith(trades: updatedTrades);
      return updatedTrade;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return null;
    }
  }
  Future<bool> deleteTrade(String tradeId) async {
    try {
      await _service.deleteTrade(tradeId);
      // Remove from the list
      final updatedTrades = state.trades
          .where((t) => t.id != tradeId)
          .toList();
      state = state.copyWith(trades: updatedTrades);
      return true;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return false;
    }
  }
  Future<void> bookmarkTrade(String tradeId) async {
    try {
      final updatedTrade = await _service.bookmarkTrade(tradeId);
      // Update in the list
      final updatedTrades = state.trades.map((t) {
        return t.id == tradeId ? updatedTrade : t;
      }).toList();
      state = state.copyWith(trades: updatedTrades);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  Future<void> expressInterest(String tradeId) async {
    try {
      final updatedTrade = await _service.expressInterest(tradeId);
      // Update in the list
      final updatedTrades = state.trades.map((t) {
        return t.id == tradeId ? updatedTrade : t;
      }).toList();
      state = state.copyWith(trades: updatedTrades);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  Future<void> updateTradeStatus(String tradeId, String status) async {
    try {
      final updatedTrade = await _service.updateTradeStatus(tradeId, status);
      // Update in the list
      final updatedTrades = state.trades.map((t) {
        return t.id == tradeId ? updatedTrade : t;
      }).toList();
      state = state.copyWith(trades: updatedTrades);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  // Clear state
  void clearState() {
    state = const PlantCommunityState();
  }
  // Clear error
  void clearError() {
    state = state.copyWith(error: null);
  }
}
// Main provider
final plantCommunityProvider =
    StateNotifierProvider<PlantCommunityNotifier, PlantCommunityState>((ref) {
  final service = ref.watch(plantCommunityServiceProvider);
  return PlantCommunityNotifier(service);
});
// Individual providers for specific use cases
final questionsProvider = Provider<List<PlantQuestion>>((ref) {
  return ref.watch(plantCommunityProvider).questions;
});
final tradesProvider = Provider<List<PlantTrade>>((ref) {
  return ref.watch(plantCommunityProvider).trades;
});
final questionProvider = FutureProvider.family<PlantQuestion?, String>((ref, questionId) async {
  final notifier = ref.read(plantCommunityProvider.notifier);
  return await notifier.getQuestion(questionId);
});
final tradeProvider = FutureProvider.family<PlantTrade?, String>((ref, tradeId) async {
  final notifier = ref.read(plantCommunityProvider.notifier);
  return await notifier.getTrade(tradeId);
});
final answersProvider = FutureProvider.family<List<PlantAnswer>?, String>((ref, questionId) async {
  final notifier = ref.read(plantCommunityProvider.notifier);
  return await notifier.getAnswers(questionId);
});
// User content providers
final userQuestionsProvider = FutureProvider.family<List<PlantQuestion>, String>((ref, userId) async {
  final service = ref.watch(plantCommunityServiceProvider);
  return await service.getUserQuestions(userId);
});
final userAnswersProvider = FutureProvider.family<List<PlantAnswer>, String>((ref, userId) async {
  final service = ref.watch(plantCommunityServiceProvider);
  return await service.getUserAnswers(userId);
});
final userTradesProvider = FutureProvider.family<List<PlantTrade>, String>((ref, userId) async {
  final service = ref.watch(plantCommunityServiceProvider);
  return await service.getUserTrades(userId);
});
// Bookmark providers
final bookmarkedQuestionsProvider = FutureProvider<List<PlantQuestion>>((ref) async {
  final service = ref.watch(plantCommunityServiceProvider);
  return await service.getBookmarkedQuestions();
});
final bookmarkedTradesProvider = FutureProvider<List<PlantTrade>>((ref) async {
  final service = ref.watch(plantCommunityServiceProvider);
  return await service.getBookmarkedTrades();
});
</file>

<file path="lib/features/plant_community/services/plant_community_service.dart">
import 'dart:io';
import 'package:dio/dio.dart';
import 'package:plant_social/features/plant_community/models/plant_community_models.dart';
import 'package:plant_social/core/services/api_service.dart';
import 'package:plant_social/core/services/storage_service.dart';
class PlantCommunityService {
  final ApiService _apiService;
  final StorageService _storageService;
  PlantCommunityService(this._apiService, this._storageService);
  // Questions
  Future<List<PlantQuestion>> getQuestions({
    int page = 1,
    int limit = 20,
    String? category,
    String? search,
    String? sortBy,
  }) async {
    try {
      final queryParams = {
        'page': page,
        'limit': limit,
        if (category != null) 'category': category,
        if (search != null) 'search': search,
        if (sortBy != null) 'sort_by': sortBy,
      };
      final response = await _apiService.get(
        '/plant-questions',
        queryParameters: queryParams,
      );
      final List<dynamic> questionsJson = response.data['questions'] ?? [];
      return questionsJson
          .map((json) => PlantQuestion.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load questions: $e');
    }
  }
  Future<PlantQuestion> getQuestion(String questionId) async {
    try {
      final response = await _apiService.get('/plant-questions/$questionId');
      return PlantQuestion.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to load question: $e');
    }
  }
  Future<PlantQuestion> createQuestion(
    PlantQuestionRequest request, {
    File? imageFile,
  }) async {
    try {
      String? imageUrl;
      // Upload image if provided
      if (imageFile != null) {
        imageUrl = await _uploadImage(imageFile, 'questions');
      }
      final requestData = {
        ...request.toJson(),
        if (imageUrl != null) 'image_url': imageUrl,
      };
      final response = await _apiService.post(
        '/plant-questions',
        data: requestData,
      );
      return PlantQuestion.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to create question: $e');
    }
  }
  Future<PlantQuestion> updateQuestion(
    String questionId,
    PlantQuestionRequest request, {
    File? imageFile,
  }) async {
    try {
      String? imageUrl;
      // Upload image if provided
      if (imageFile != null) {
        imageUrl = await _uploadImage(imageFile, 'questions');
      }
      final requestData = {
        ...request.toJson(),
        if (imageUrl != null) 'image_url': imageUrl,
      };
      final response = await _apiService.put(
        '/plant-questions/$questionId',
        data: requestData,
      );
      return PlantQuestion.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to update question: $e');
    }
  }
  Future<void> deleteQuestion(String questionId) async {
    try {
      await _apiService.delete('/plant-questions/$questionId');
    } catch (e) {
      throw Exception('Failed to delete question: $e');
    }
  }
  Future<PlantQuestion> voteQuestion(String questionId, String voteType) async {
    try {
      final response = await _apiService.post(
        '/plant-questions/$questionId/vote',
        data: {'vote_type': voteType},
      );
      return PlantQuestion.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to vote on question: $e');
    }
  }
  Future<PlantQuestion> bookmarkQuestion(String questionId) async {
    try {
      final response = await _apiService.post(
        '/plant-questions/$questionId/bookmark',
      );
      return PlantQuestion.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to bookmark question: $e');
    }
  }
  Future<PlantQuestion> markQuestionSolved(
    String questionId,
    String acceptedAnswerId,
  ) async {
    try {
      final response = await _apiService.post(
        '/plant-questions/$questionId/solve',
        data: {'accepted_answer_id': acceptedAnswerId},
      );
      return PlantQuestion.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to mark question as solved: $e');
    }
  }
  // Answers
  Future<List<PlantAnswer>> getAnswers(
    String questionId, {
    int page = 1,
    int limit = 20,
    String? sortBy,
  }) async {
    try {
      final queryParams = {
        'page': page,
        'limit': limit,
        if (sortBy != null) 'sort_by': sortBy,
      };
      final response = await _apiService.get(
        '/plant-questions/$questionId/answers',
        queryParameters: queryParams,
      );
      final List<dynamic> answersJson = response.data['answers'] ?? [];
      return answersJson
          .map((json) => PlantAnswer.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load answers: $e');
    }
  }
  Future<PlantAnswer> createAnswer(
    String questionId,
    PlantAnswerRequest request, {
    File? imageFile,
  }) async {
    try {
      String? imageUrl;
      // Upload image if provided
      if (imageFile != null) {
        imageUrl = await _uploadImage(imageFile, 'answers');
      }
      final requestData = {
        ...request.toJson(),
        if (imageUrl != null) 'image_url': imageUrl,
      };
      final response = await _apiService.post(
        '/plant-questions/$questionId/answers',
        data: requestData,
      );
      return PlantAnswer.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to create answer: $e');
    }
  }
  Future<PlantAnswer> updateAnswer(
    String answerId,
    PlantAnswerRequest request, {
    File? imageFile,
  }) async {
    try {
      String? imageUrl;
      // Upload image if provided
      if (imageFile != null) {
        imageUrl = await _uploadImage(imageFile, 'answers');
      }
      final requestData = {
        ...request.toJson(),
        if (imageUrl != null) 'image_url': imageUrl,
      };
      final response = await _apiService.put(
        '/plant-answers/$answerId',
        data: requestData,
      );
      return PlantAnswer.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to update answer: $e');
    }
  }
  Future<void> deleteAnswer(String answerId) async {
    try {
      await _apiService.delete('/plant-answers/$answerId');
    } catch (e) {
      throw Exception('Failed to delete answer: $e');
    }
  }
  Future<PlantAnswer> voteAnswer(String answerId, String voteType) async {
    try {
      final response = await _apiService.post(
        '/plant-answers/$answerId/vote',
        data: {'vote_type': voteType},
      );
      return PlantAnswer.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to vote on answer: $e');
    }
  }
  // Trades
  Future<List<PlantTrade>> getTrades({
    int page = 1,
    int limit = 20,
    String? tradeType,
    String? location,
    String? search,
    String? sortBy,
  }) async {
    try {
      final queryParams = {
        'page': page,
        'limit': limit,
        if (tradeType != null) 'trade_type': tradeType,
        if (location != null) 'location': location,
        if (search != null) 'search': search,
        if (sortBy != null) 'sort_by': sortBy,
      };
      final response = await _apiService.get(
        '/plant-trades',
        queryParameters: queryParams,
      );
      final List<dynamic> tradesJson = response.data['trades'] ?? [];
      return tradesJson
          .map((json) => PlantTrade.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load trades: $e');
    }
  }
  Future<PlantTrade> getTrade(String tradeId) async {
    try {
      final response = await _apiService.get('/plant-trades/$tradeId');
      return PlantTrade.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to load trade: $e');
    }
  }
  Future<PlantTrade> createTrade(
    PlantTradeRequest request, {
    List<File>? imageFiles,
  }) async {
    try {
      List<String> imageUrls = [];
      // Upload images if provided
      if (imageFiles != null && imageFiles.isNotEmpty) {
        for (final imageFile in imageFiles) {
          final imageUrl = await _uploadImage(imageFile, 'trades');
          imageUrls.add(imageUrl);
        }
      }
      final requestData = {
        ...request.toJson(),
        'image_urls': imageUrls,
      };
      final response = await _apiService.post(
        '/plant-trades',
        data: requestData,
      );
      return PlantTrade.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to create trade: $e');
    }
  }
  Future<PlantTrade> updateTrade(
    String tradeId,
    PlantTradeRequest request, {
    List<File>? imageFiles,
  }) async {
    try {
      List<String> imageUrls = [];
      // Upload images if provided
      if (imageFiles != null && imageFiles.isNotEmpty) {
        for (final imageFile in imageFiles) {
          final imageUrl = await _uploadImage(imageFile, 'trades');
          imageUrls.add(imageUrl);
        }
      }
      final requestData = {
        ...request.toJson(),
        if (imageUrls.isNotEmpty) 'image_urls': imageUrls,
      };
      final response = await _apiService.put(
        '/plant-trades/$tradeId',
        data: requestData,
      );
      return PlantTrade.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to update trade: $e');
    }
  }
  Future<void> deleteTrade(String tradeId) async {
    try {
      await _apiService.delete('/plant-trades/$tradeId');
    } catch (e) {
      throw Exception('Failed to delete trade: $e');
    }
  }
  Future<PlantTrade> bookmarkTrade(String tradeId) async {
    try {
      final response = await _apiService.post(
        '/plant-trades/$tradeId/bookmark',
      );
      return PlantTrade.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to bookmark trade: $e');
    }
  }
  Future<PlantTrade> expressInterest(String tradeId) async {
    try {
      final response = await _apiService.post(
        '/plant-trades/$tradeId/interest',
      );
      return PlantTrade.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to express interest: $e');
    }
  }
  Future<PlantTrade> updateTradeStatus(
    String tradeId,
    String status,
  ) async {
    try {
      final response = await _apiService.put(
        '/plant-trades/$tradeId/status',
        data: {'status': status},
      );
      return PlantTrade.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to update trade status: $e');
    }
  }
  // User's content
  Future<List<PlantQuestion>> getUserQuestions(
    String userId, {
    int page = 1,
    int limit = 20,
  }) async {
    try {
      final response = await _apiService.get(
        '/users/$userId/questions',
        queryParameters: {
          'page': page,
          'limit': limit,
        },
      );
      final List<dynamic> questionsJson = response.data['questions'] ?? [];
      return questionsJson
          .map((json) => PlantQuestion.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load user questions: $e');
    }
  }
  Future<List<PlantAnswer>> getUserAnswers(
    String userId, {
    int page = 1,
    int limit = 20,
  }) async {
    try {
      final response = await _apiService.get(
        '/users/$userId/answers',
        queryParameters: {
          'page': page,
          'limit': limit,
        },
      );
      final List<dynamic> answersJson = response.data['answers'] ?? [];
      return answersJson
          .map((json) => PlantAnswer.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load user answers: $e');
    }
  }
  Future<List<PlantTrade>> getUserTrades(
    String userId, {
    int page = 1,
    int limit = 20,
  }) async {
    try {
      final response = await _apiService.get(
        '/users/$userId/trades',
        queryParameters: {
          'page': page,
          'limit': limit,
        },
      );
      final List<dynamic> tradesJson = response.data['trades'] ?? [];
      return tradesJson
          .map((json) => PlantTrade.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load user trades: $e');
    }
  }
  // Bookmarks
  Future<List<PlantQuestion>> getBookmarkedQuestions({
    int page = 1,
    int limit = 20,
  }) async {
    try {
      final response = await _apiService.get(
        '/bookmarks/questions',
        queryParameters: {
          'page': page,
          'limit': limit,
        },
      );
      final List<dynamic> questionsJson = response.data['questions'] ?? [];
      return questionsJson
          .map((json) => PlantQuestion.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load bookmarked questions: $e');
    }
  }
  Future<List<PlantTrade>> getBookmarkedTrades({
    int page = 1,
    int limit = 20,
  }) async {
    try {
      final response = await _apiService.get(
        '/bookmarks/trades',
        queryParameters: {
          'page': page,
          'limit': limit,
        },
      );
      final List<dynamic> tradesJson = response.data['trades'] ?? [];
      return tradesJson
          .map((json) => PlantTrade.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to load bookmarked trades: $e');
    }
  }
  // Helper method for image upload
  Future<String> _uploadImage(File imageFile, String category) async {
    try {
      final formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(
          imageFile.path,
          filename: imageFile.path.split('/').last,
        ),
        'category': category,
      });
      final response = await _apiService.post(
        '/upload/image',
        data: formData,
      );
      return response.data['url'];
    } catch (e) {
      throw Exception('Failed to upload image: $e');
    }
  }
}
</file>

<file path="lib/features/plant_identification/models/plant_identification_models.dart">
import 'package:freezed_annotation/freezed_annotation.dart';
part 'plant_identification_models.freezed.dart';
part 'plant_identification_models.g.dart';
@freezed
class PlantIdentification with _$PlantIdentification {
  const factory PlantIdentification({
    required String id,
    required String scientificName,
    required String commonName,
    required double confidence,
    required List<String> alternativeNames,
    required String imageUrl,
    required PlantCareInfo careInfo,
    required DateTime identifiedAt,
    String? description,
    List<String>? tags,
  }) = _PlantIdentification;
  factory PlantIdentification.fromJson(Map<String, dynamic> json) =>
      _$PlantIdentificationFromJson(json);
}
@freezed
class PlantCareInfo with _$PlantCareInfo {
  const factory PlantCareInfo({
    required String lightRequirement,
    required String waterFrequency,
    required String careLevel,
    String? humidity,
    String? temperature,
    String? toxicity,
    List<String>? careNotes,
  }) = _PlantCareInfo;
  factory PlantCareInfo.fromJson(Map<String, dynamic> json) =>
      _$PlantCareInfoFromJson(json);
}
@freezed
class PlantIdentificationRequest with _$PlantIdentificationRequest {
  const factory PlantIdentificationRequest({
    required String imageBase64,
    String? location,
    DateTime? timestamp,
  }) = _PlantIdentificationRequest;
  factory PlantIdentificationRequest.fromJson(Map<String, dynamic> json) =>
      _$PlantIdentificationRequestFromJson(json);
}
@freezed
class PlantIdentificationState with _$PlantIdentificationState {
  const factory PlantIdentificationState({
    @Default(false) bool isLoading,
    @Default([]) List<PlantIdentification> identifications,
    @Default([]) List<PlantIdentification> history,
    String? error,
    PlantIdentification? currentIdentification,
  }) = _PlantIdentificationState;
  factory PlantIdentificationState.fromJson(Map<String, dynamic> json) =>
      _$PlantIdentificationStateFromJson(json);
}
@JsonSerializable()
class PlantIdentificationResult {
  final String identifiedName;
  final double confidenceScore;
  final List<PlantSpeciesSuggestion> speciesSuggestions;
  final String? careRecommendations;
  const PlantIdentificationResult({
    required this.identifiedName,
    required this.confidenceScore,
    required this.speciesSuggestions,
    this.careRecommendations,
  });
  factory PlantIdentificationResult.fromJson(Map<String, dynamic> json) {
    return PlantIdentificationResult(
      identifiedName: json['identified_name'] as String,
      confidenceScore: (json['confidence_score'] as num).toDouble(),
      speciesSuggestions: (json['species_suggestions'] as List<dynamic>? ?? [])
          .map(
              (e) => PlantSpeciesSuggestion.fromJson(e as Map<String, dynamic>))
          .toList(),
      careRecommendations: json['care_recommendations'] as String?,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'identified_name': identifiedName,
      'confidence_score': confidenceScore,
      'species_suggestions': speciesSuggestions.map((e) => e.toJson()).toList(),
      'care_recommendations': careRecommendations,
    };
  }
}
@JsonSerializable()
class PlantSpeciesSuggestion {
  final String id;
  final String scientificName;
  final String commonName;
  final String? description;
  final List<String>? commonNames;
  const PlantSpeciesSuggestion({
    required this.id,
    required this.scientificName,
    required this.commonName,
    this.description,
    this.commonNames,
  });
  factory PlantSpeciesSuggestion.fromJson(Map<String, dynamic> json) {
    return PlantSpeciesSuggestion(
      id: json['id'].toString(),
      scientificName: json['scientific_name'] as String,
      commonName: json['common_name'] as String,
      description: json['description'] as String?,
      commonNames: (json['common_names'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'scientific_name': scientificName,
      'common_name': commonName,
      'description': description,
      'common_names': commonNames,
    };
  }
}
</file>

<file path="lib/features/plant_identification/models/plant_identification_models.freezed.dart">
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark
part of 'plant_identification_models.dart';
// **************************************************************************
// FreezedGenerator
// **************************************************************************
T _$identity<T>(T value) => value;
final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');
PlantIdentification _$PlantIdentificationFromJson(Map<String, dynamic> json) {
  return _PlantIdentification.fromJson(json);
}
/// @nodoc
mixin _$PlantIdentification {
  String get id => throw _privateConstructorUsedError;
  String get scientificName => throw _privateConstructorUsedError;
  String get commonName => throw _privateConstructorUsedError;
  double get confidence => throw _privateConstructorUsedError;
  List<String> get alternativeNames => throw _privateConstructorUsedError;
  String get imageUrl => throw _privateConstructorUsedError;
  PlantCareInfo get careInfo => throw _privateConstructorUsedError;
  DateTime get identifiedAt => throw _privateConstructorUsedError;
  String? get description => throw _privateConstructorUsedError;
  List<String>? get tags => throw _privateConstructorUsedError;
  /// Serializes this PlantIdentification to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of PlantIdentification
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $PlantIdentificationCopyWith<PlantIdentification> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $PlantIdentificationCopyWith<$Res> {
  factory $PlantIdentificationCopyWith(
          PlantIdentification value, $Res Function(PlantIdentification) then) =
      _$PlantIdentificationCopyWithImpl<$Res, PlantIdentification>;
  @useResult
  $Res call(
      {String id,
      String scientificName,
      String commonName,
      double confidence,
      List<String> alternativeNames,
      String imageUrl,
      PlantCareInfo careInfo,
      DateTime identifiedAt,
      String? description,
      List<String>? tags});
  $PlantCareInfoCopyWith<$Res> get careInfo;
}
/// @nodoc
class _$PlantIdentificationCopyWithImpl<$Res, $Val extends PlantIdentification>
    implements $PlantIdentificationCopyWith<$Res> {
  _$PlantIdentificationCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of PlantIdentification
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? scientificName = null,
    Object? commonName = null,
    Object? confidence = null,
    Object? alternativeNames = null,
    Object? imageUrl = null,
    Object? careInfo = null,
    Object? identifiedAt = null,
    Object? description = freezed,
    Object? tags = freezed,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      scientificName: null == scientificName
          ? _value.scientificName
          : scientificName // ignore: cast_nullable_to_non_nullable
              as String,
      commonName: null == commonName
          ? _value.commonName
          : commonName // ignore: cast_nullable_to_non_nullable
              as String,
      confidence: null == confidence
          ? _value.confidence
          : confidence // ignore: cast_nullable_to_non_nullable
              as double,
      alternativeNames: null == alternativeNames
          ? _value.alternativeNames
          : alternativeNames // ignore: cast_nullable_to_non_nullable
              as List<String>,
      imageUrl: null == imageUrl
          ? _value.imageUrl
          : imageUrl // ignore: cast_nullable_to_non_nullable
              as String,
      careInfo: null == careInfo
          ? _value.careInfo
          : careInfo // ignore: cast_nullable_to_non_nullable
              as PlantCareInfo,
      identifiedAt: null == identifiedAt
          ? _value.identifiedAt
          : identifiedAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      tags: freezed == tags
          ? _value.tags
          : tags // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ) as $Val);
  }
  /// Create a copy of PlantIdentification
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $PlantCareInfoCopyWith<$Res> get careInfo {
    return $PlantCareInfoCopyWith<$Res>(_value.careInfo, (value) {
      return _then(_value.copyWith(careInfo: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$PlantIdentificationImplCopyWith<$Res>
    implements $PlantIdentificationCopyWith<$Res> {
  factory _$$PlantIdentificationImplCopyWith(_$PlantIdentificationImpl value,
          $Res Function(_$PlantIdentificationImpl) then) =
      __$$PlantIdentificationImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String id,
      String scientificName,
      String commonName,
      double confidence,
      List<String> alternativeNames,
      String imageUrl,
      PlantCareInfo careInfo,
      DateTime identifiedAt,
      String? description,
      List<String>? tags});
  @override
  $PlantCareInfoCopyWith<$Res> get careInfo;
}
/// @nodoc
class __$$PlantIdentificationImplCopyWithImpl<$Res>
    extends _$PlantIdentificationCopyWithImpl<$Res, _$PlantIdentificationImpl>
    implements _$$PlantIdentificationImplCopyWith<$Res> {
  __$$PlantIdentificationImplCopyWithImpl(_$PlantIdentificationImpl _value,
      $Res Function(_$PlantIdentificationImpl) _then)
      : super(_value, _then);
  /// Create a copy of PlantIdentification
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? scientificName = null,
    Object? commonName = null,
    Object? confidence = null,
    Object? alternativeNames = null,
    Object? imageUrl = null,
    Object? careInfo = null,
    Object? identifiedAt = null,
    Object? description = freezed,
    Object? tags = freezed,
  }) {
    return _then(_$PlantIdentificationImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as String,
      scientificName: null == scientificName
          ? _value.scientificName
          : scientificName // ignore: cast_nullable_to_non_nullable
              as String,
      commonName: null == commonName
          ? _value.commonName
          : commonName // ignore: cast_nullable_to_non_nullable
              as String,
      confidence: null == confidence
          ? _value.confidence
          : confidence // ignore: cast_nullable_to_non_nullable
              as double,
      alternativeNames: null == alternativeNames
          ? _value._alternativeNames
          : alternativeNames // ignore: cast_nullable_to_non_nullable
              as List<String>,
      imageUrl: null == imageUrl
          ? _value.imageUrl
          : imageUrl // ignore: cast_nullable_to_non_nullable
              as String,
      careInfo: null == careInfo
          ? _value.careInfo
          : careInfo // ignore: cast_nullable_to_non_nullable
              as PlantCareInfo,
      identifiedAt: null == identifiedAt
          ? _value.identifiedAt
          : identifiedAt // ignore: cast_nullable_to_non_nullable
              as DateTime,
      description: freezed == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String?,
      tags: freezed == tags
          ? _value._tags
          : tags // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$PlantIdentificationImpl implements _PlantIdentification {
  const _$PlantIdentificationImpl(
      {required this.id,
      required this.scientificName,
      required this.commonName,
      required this.confidence,
      required final List<String> alternativeNames,
      required this.imageUrl,
      required this.careInfo,
      required this.identifiedAt,
      this.description,
      final List<String>? tags})
      : _alternativeNames = alternativeNames,
        _tags = tags;
  factory _$PlantIdentificationImpl.fromJson(Map<String, dynamic> json) =>
      _$$PlantIdentificationImplFromJson(json);
  @override
  final String id;
  @override
  final String scientificName;
  @override
  final String commonName;
  @override
  final double confidence;
  final List<String> _alternativeNames;
  @override
  List<String> get alternativeNames {
    if (_alternativeNames is EqualUnmodifiableListView)
      return _alternativeNames;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_alternativeNames);
  }
  @override
  final String imageUrl;
  @override
  final PlantCareInfo careInfo;
  @override
  final DateTime identifiedAt;
  @override
  final String? description;
  final List<String>? _tags;
  @override
  List<String>? get tags {
    final value = _tags;
    if (value == null) return null;
    if (_tags is EqualUnmodifiableListView) return _tags;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }
  @override
  String toString() {
    return 'PlantIdentification(id: $id, scientificName: $scientificName, commonName: $commonName, confidence: $confidence, alternativeNames: $alternativeNames, imageUrl: $imageUrl, careInfo: $careInfo, identifiedAt: $identifiedAt, description: $description, tags: $tags)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PlantIdentificationImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.scientificName, scientificName) ||
                other.scientificName == scientificName) &&
            (identical(other.commonName, commonName) ||
                other.commonName == commonName) &&
            (identical(other.confidence, confidence) ||
                other.confidence == confidence) &&
            const DeepCollectionEquality()
                .equals(other._alternativeNames, _alternativeNames) &&
            (identical(other.imageUrl, imageUrl) ||
                other.imageUrl == imageUrl) &&
            (identical(other.careInfo, careInfo) ||
                other.careInfo == careInfo) &&
            (identical(other.identifiedAt, identifiedAt) ||
                other.identifiedAt == identifiedAt) &&
            (identical(other.description, description) ||
                other.description == description) &&
            const DeepCollectionEquality().equals(other._tags, _tags));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      id,
      scientificName,
      commonName,
      confidence,
      const DeepCollectionEquality().hash(_alternativeNames),
      imageUrl,
      careInfo,
      identifiedAt,
      description,
      const DeepCollectionEquality().hash(_tags));
  /// Create a copy of PlantIdentification
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PlantIdentificationImplCopyWith<_$PlantIdentificationImpl> get copyWith =>
      __$$PlantIdentificationImplCopyWithImpl<_$PlantIdentificationImpl>(
          this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$PlantIdentificationImplToJson(
      this,
    );
  }
}
abstract class _PlantIdentification implements PlantIdentification {
  const factory _PlantIdentification(
      {required final String id,
      required final String scientificName,
      required final String commonName,
      required final double confidence,
      required final List<String> alternativeNames,
      required final String imageUrl,
      required final PlantCareInfo careInfo,
      required final DateTime identifiedAt,
      final String? description,
      final List<String>? tags}) = _$PlantIdentificationImpl;
  factory _PlantIdentification.fromJson(Map<String, dynamic> json) =
      _$PlantIdentificationImpl.fromJson;
  @override
  String get id;
  @override
  String get scientificName;
  @override
  String get commonName;
  @override
  double get confidence;
  @override
  List<String> get alternativeNames;
  @override
  String get imageUrl;
  @override
  PlantCareInfo get careInfo;
  @override
  DateTime get identifiedAt;
  @override
  String? get description;
  @override
  List<String>? get tags;
  /// Create a copy of PlantIdentification
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PlantIdentificationImplCopyWith<_$PlantIdentificationImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
PlantCareInfo _$PlantCareInfoFromJson(Map<String, dynamic> json) {
  return _PlantCareInfo.fromJson(json);
}
/// @nodoc
mixin _$PlantCareInfo {
  String get lightRequirement => throw _privateConstructorUsedError;
  String get waterFrequency => throw _privateConstructorUsedError;
  String get careLevel => throw _privateConstructorUsedError;
  String? get humidity => throw _privateConstructorUsedError;
  String? get temperature => throw _privateConstructorUsedError;
  String? get toxicity => throw _privateConstructorUsedError;
  List<String>? get careNotes => throw _privateConstructorUsedError;
  /// Serializes this PlantCareInfo to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of PlantCareInfo
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $PlantCareInfoCopyWith<PlantCareInfo> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $PlantCareInfoCopyWith<$Res> {
  factory $PlantCareInfoCopyWith(
          PlantCareInfo value, $Res Function(PlantCareInfo) then) =
      _$PlantCareInfoCopyWithImpl<$Res, PlantCareInfo>;
  @useResult
  $Res call(
      {String lightRequirement,
      String waterFrequency,
      String careLevel,
      String? humidity,
      String? temperature,
      String? toxicity,
      List<String>? careNotes});
}
/// @nodoc
class _$PlantCareInfoCopyWithImpl<$Res, $Val extends PlantCareInfo>
    implements $PlantCareInfoCopyWith<$Res> {
  _$PlantCareInfoCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of PlantCareInfo
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? lightRequirement = null,
    Object? waterFrequency = null,
    Object? careLevel = null,
    Object? humidity = freezed,
    Object? temperature = freezed,
    Object? toxicity = freezed,
    Object? careNotes = freezed,
  }) {
    return _then(_value.copyWith(
      lightRequirement: null == lightRequirement
          ? _value.lightRequirement
          : lightRequirement // ignore: cast_nullable_to_non_nullable
              as String,
      waterFrequency: null == waterFrequency
          ? _value.waterFrequency
          : waterFrequency // ignore: cast_nullable_to_non_nullable
              as String,
      careLevel: null == careLevel
          ? _value.careLevel
          : careLevel // ignore: cast_nullable_to_non_nullable
              as String,
      humidity: freezed == humidity
          ? _value.humidity
          : humidity // ignore: cast_nullable_to_non_nullable
              as String?,
      temperature: freezed == temperature
          ? _value.temperature
          : temperature // ignore: cast_nullable_to_non_nullable
              as String?,
      toxicity: freezed == toxicity
          ? _value.toxicity
          : toxicity // ignore: cast_nullable_to_non_nullable
              as String?,
      careNotes: freezed == careNotes
          ? _value.careNotes
          : careNotes // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$PlantCareInfoImplCopyWith<$Res>
    implements $PlantCareInfoCopyWith<$Res> {
  factory _$$PlantCareInfoImplCopyWith(
          _$PlantCareInfoImpl value, $Res Function(_$PlantCareInfoImpl) then) =
      __$$PlantCareInfoImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {String lightRequirement,
      String waterFrequency,
      String careLevel,
      String? humidity,
      String? temperature,
      String? toxicity,
      List<String>? careNotes});
}
/// @nodoc
class __$$PlantCareInfoImplCopyWithImpl<$Res>
    extends _$PlantCareInfoCopyWithImpl<$Res, _$PlantCareInfoImpl>
    implements _$$PlantCareInfoImplCopyWith<$Res> {
  __$$PlantCareInfoImplCopyWithImpl(
      _$PlantCareInfoImpl _value, $Res Function(_$PlantCareInfoImpl) _then)
      : super(_value, _then);
  /// Create a copy of PlantCareInfo
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? lightRequirement = null,
    Object? waterFrequency = null,
    Object? careLevel = null,
    Object? humidity = freezed,
    Object? temperature = freezed,
    Object? toxicity = freezed,
    Object? careNotes = freezed,
  }) {
    return _then(_$PlantCareInfoImpl(
      lightRequirement: null == lightRequirement
          ? _value.lightRequirement
          : lightRequirement // ignore: cast_nullable_to_non_nullable
              as String,
      waterFrequency: null == waterFrequency
          ? _value.waterFrequency
          : waterFrequency // ignore: cast_nullable_to_non_nullable
              as String,
      careLevel: null == careLevel
          ? _value.careLevel
          : careLevel // ignore: cast_nullable_to_non_nullable
              as String,
      humidity: freezed == humidity
          ? _value.humidity
          : humidity // ignore: cast_nullable_to_non_nullable
              as String?,
      temperature: freezed == temperature
          ? _value.temperature
          : temperature // ignore: cast_nullable_to_non_nullable
              as String?,
      toxicity: freezed == toxicity
          ? _value.toxicity
          : toxicity // ignore: cast_nullable_to_non_nullable
              as String?,
      careNotes: freezed == careNotes
          ? _value._careNotes
          : careNotes // ignore: cast_nullable_to_non_nullable
              as List<String>?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$PlantCareInfoImpl implements _PlantCareInfo {
  const _$PlantCareInfoImpl(
      {required this.lightRequirement,
      required this.waterFrequency,
      required this.careLevel,
      this.humidity,
      this.temperature,
      this.toxicity,
      final List<String>? careNotes})
      : _careNotes = careNotes;
  factory _$PlantCareInfoImpl.fromJson(Map<String, dynamic> json) =>
      _$$PlantCareInfoImplFromJson(json);
  @override
  final String lightRequirement;
  @override
  final String waterFrequency;
  @override
  final String careLevel;
  @override
  final String? humidity;
  @override
  final String? temperature;
  @override
  final String? toxicity;
  final List<String>? _careNotes;
  @override
  List<String>? get careNotes {
    final value = _careNotes;
    if (value == null) return null;
    if (_careNotes is EqualUnmodifiableListView) return _careNotes;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(value);
  }
  @override
  String toString() {
    return 'PlantCareInfo(lightRequirement: $lightRequirement, waterFrequency: $waterFrequency, careLevel: $careLevel, humidity: $humidity, temperature: $temperature, toxicity: $toxicity, careNotes: $careNotes)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PlantCareInfoImpl &&
            (identical(other.lightRequirement, lightRequirement) ||
                other.lightRequirement == lightRequirement) &&
            (identical(other.waterFrequency, waterFrequency) ||
                other.waterFrequency == waterFrequency) &&
            (identical(other.careLevel, careLevel) ||
                other.careLevel == careLevel) &&
            (identical(other.humidity, humidity) ||
                other.humidity == humidity) &&
            (identical(other.temperature, temperature) ||
                other.temperature == temperature) &&
            (identical(other.toxicity, toxicity) ||
                other.toxicity == toxicity) &&
            const DeepCollectionEquality()
                .equals(other._careNotes, _careNotes));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      lightRequirement,
      waterFrequency,
      careLevel,
      humidity,
      temperature,
      toxicity,
      const DeepCollectionEquality().hash(_careNotes));
  /// Create a copy of PlantCareInfo
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PlantCareInfoImplCopyWith<_$PlantCareInfoImpl> get copyWith =>
      __$$PlantCareInfoImplCopyWithImpl<_$PlantCareInfoImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$PlantCareInfoImplToJson(
      this,
    );
  }
}
abstract class _PlantCareInfo implements PlantCareInfo {
  const factory _PlantCareInfo(
      {required final String lightRequirement,
      required final String waterFrequency,
      required final String careLevel,
      final String? humidity,
      final String? temperature,
      final String? toxicity,
      final List<String>? careNotes}) = _$PlantCareInfoImpl;
  factory _PlantCareInfo.fromJson(Map<String, dynamic> json) =
      _$PlantCareInfoImpl.fromJson;
  @override
  String get lightRequirement;
  @override
  String get waterFrequency;
  @override
  String get careLevel;
  @override
  String? get humidity;
  @override
  String? get temperature;
  @override
  String? get toxicity;
  @override
  List<String>? get careNotes;
  /// Create a copy of PlantCareInfo
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PlantCareInfoImplCopyWith<_$PlantCareInfoImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
PlantIdentificationRequest _$PlantIdentificationRequestFromJson(
    Map<String, dynamic> json) {
  return _PlantIdentificationRequest.fromJson(json);
}
/// @nodoc
mixin _$PlantIdentificationRequest {
  String get imageBase64 => throw _privateConstructorUsedError;
  String? get location => throw _privateConstructorUsedError;
  DateTime? get timestamp => throw _privateConstructorUsedError;
  /// Serializes this PlantIdentificationRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of PlantIdentificationRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $PlantIdentificationRequestCopyWith<PlantIdentificationRequest>
      get copyWith => throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $PlantIdentificationRequestCopyWith<$Res> {
  factory $PlantIdentificationRequestCopyWith(PlantIdentificationRequest value,
          $Res Function(PlantIdentificationRequest) then) =
      _$PlantIdentificationRequestCopyWithImpl<$Res,
          PlantIdentificationRequest>;
  @useResult
  $Res call({String imageBase64, String? location, DateTime? timestamp});
}
/// @nodoc
class _$PlantIdentificationRequestCopyWithImpl<$Res,
        $Val extends PlantIdentificationRequest>
    implements $PlantIdentificationRequestCopyWith<$Res> {
  _$PlantIdentificationRequestCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of PlantIdentificationRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? imageBase64 = null,
    Object? location = freezed,
    Object? timestamp = freezed,
  }) {
    return _then(_value.copyWith(
      imageBase64: null == imageBase64
          ? _value.imageBase64
          : imageBase64 // ignore: cast_nullable_to_non_nullable
              as String,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      timestamp: freezed == timestamp
          ? _value.timestamp
          : timestamp // ignore: cast_nullable_to_non_nullable
              as DateTime?,
    ) as $Val);
  }
}
/// @nodoc
abstract class _$$PlantIdentificationRequestImplCopyWith<$Res>
    implements $PlantIdentificationRequestCopyWith<$Res> {
  factory _$$PlantIdentificationRequestImplCopyWith(
          _$PlantIdentificationRequestImpl value,
          $Res Function(_$PlantIdentificationRequestImpl) then) =
      __$$PlantIdentificationRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String imageBase64, String? location, DateTime? timestamp});
}
/// @nodoc
class __$$PlantIdentificationRequestImplCopyWithImpl<$Res>
    extends _$PlantIdentificationRequestCopyWithImpl<$Res,
        _$PlantIdentificationRequestImpl>
    implements _$$PlantIdentificationRequestImplCopyWith<$Res> {
  __$$PlantIdentificationRequestImplCopyWithImpl(
      _$PlantIdentificationRequestImpl _value,
      $Res Function(_$PlantIdentificationRequestImpl) _then)
      : super(_value, _then);
  /// Create a copy of PlantIdentificationRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? imageBase64 = null,
    Object? location = freezed,
    Object? timestamp = freezed,
  }) {
    return _then(_$PlantIdentificationRequestImpl(
      imageBase64: null == imageBase64
          ? _value.imageBase64
          : imageBase64 // ignore: cast_nullable_to_non_nullable
              as String,
      location: freezed == location
          ? _value.location
          : location // ignore: cast_nullable_to_non_nullable
              as String?,
      timestamp: freezed == timestamp
          ? _value.timestamp
          : timestamp // ignore: cast_nullable_to_non_nullable
              as DateTime?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$PlantIdentificationRequestImpl implements _PlantIdentificationRequest {
  const _$PlantIdentificationRequestImpl(
      {required this.imageBase64, this.location, this.timestamp});
  factory _$PlantIdentificationRequestImpl.fromJson(
          Map<String, dynamic> json) =>
      _$$PlantIdentificationRequestImplFromJson(json);
  @override
  final String imageBase64;
  @override
  final String? location;
  @override
  final DateTime? timestamp;
  @override
  String toString() {
    return 'PlantIdentificationRequest(imageBase64: $imageBase64, location: $location, timestamp: $timestamp)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PlantIdentificationRequestImpl &&
            (identical(other.imageBase64, imageBase64) ||
                other.imageBase64 == imageBase64) &&
            (identical(other.location, location) ||
                other.location == location) &&
            (identical(other.timestamp, timestamp) ||
                other.timestamp == timestamp));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode =>
      Object.hash(runtimeType, imageBase64, location, timestamp);
  /// Create a copy of PlantIdentificationRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PlantIdentificationRequestImplCopyWith<_$PlantIdentificationRequestImpl>
      get copyWith => __$$PlantIdentificationRequestImplCopyWithImpl<
          _$PlantIdentificationRequestImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$PlantIdentificationRequestImplToJson(
      this,
    );
  }
}
abstract class _PlantIdentificationRequest
    implements PlantIdentificationRequest {
  const factory _PlantIdentificationRequest(
      {required final String imageBase64,
      final String? location,
      final DateTime? timestamp}) = _$PlantIdentificationRequestImpl;
  factory _PlantIdentificationRequest.fromJson(Map<String, dynamic> json) =
      _$PlantIdentificationRequestImpl.fromJson;
  @override
  String get imageBase64;
  @override
  String? get location;
  @override
  DateTime? get timestamp;
  /// Create a copy of PlantIdentificationRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PlantIdentificationRequestImplCopyWith<_$PlantIdentificationRequestImpl>
      get copyWith => throw _privateConstructorUsedError;
}
PlantIdentificationState _$PlantIdentificationStateFromJson(
    Map<String, dynamic> json) {
  return _PlantIdentificationState.fromJson(json);
}
/// @nodoc
mixin _$PlantIdentificationState {
  bool get isLoading => throw _privateConstructorUsedError;
  List<PlantIdentification> get identifications =>
      throw _privateConstructorUsedError;
  List<PlantIdentification> get history => throw _privateConstructorUsedError;
  String? get error => throw _privateConstructorUsedError;
  PlantIdentification? get currentIdentification =>
      throw _privateConstructorUsedError;
  /// Serializes this PlantIdentificationState to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;
  /// Create a copy of PlantIdentificationState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $PlantIdentificationStateCopyWith<PlantIdentificationState> get copyWith =>
      throw _privateConstructorUsedError;
}
/// @nodoc
abstract class $PlantIdentificationStateCopyWith<$Res> {
  factory $PlantIdentificationStateCopyWith(PlantIdentificationState value,
          $Res Function(PlantIdentificationState) then) =
      _$PlantIdentificationStateCopyWithImpl<$Res, PlantIdentificationState>;
  @useResult
  $Res call(
      {bool isLoading,
      List<PlantIdentification> identifications,
      List<PlantIdentification> history,
      String? error,
      PlantIdentification? currentIdentification});
  $PlantIdentificationCopyWith<$Res>? get currentIdentification;
}
/// @nodoc
class _$PlantIdentificationStateCopyWithImpl<$Res,
        $Val extends PlantIdentificationState>
    implements $PlantIdentificationStateCopyWith<$Res> {
  _$PlantIdentificationStateCopyWithImpl(this._value, this._then);
  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
  /// Create a copy of PlantIdentificationState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? isLoading = null,
    Object? identifications = null,
    Object? history = null,
    Object? error = freezed,
    Object? currentIdentification = freezed,
  }) {
    return _then(_value.copyWith(
      isLoading: null == isLoading
          ? _value.isLoading
          : isLoading // ignore: cast_nullable_to_non_nullable
              as bool,
      identifications: null == identifications
          ? _value.identifications
          : identifications // ignore: cast_nullable_to_non_nullable
              as List<PlantIdentification>,
      history: null == history
          ? _value.history
          : history // ignore: cast_nullable_to_non_nullable
              as List<PlantIdentification>,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as String?,
      currentIdentification: freezed == currentIdentification
          ? _value.currentIdentification
          : currentIdentification // ignore: cast_nullable_to_non_nullable
              as PlantIdentification?,
    ) as $Val);
  }
  /// Create a copy of PlantIdentificationState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $PlantIdentificationCopyWith<$Res>? get currentIdentification {
    if (_value.currentIdentification == null) {
      return null;
    }
    return $PlantIdentificationCopyWith<$Res>(_value.currentIdentification!,
        (value) {
      return _then(_value.copyWith(currentIdentification: value) as $Val);
    });
  }
}
/// @nodoc
abstract class _$$PlantIdentificationStateImplCopyWith<$Res>
    implements $PlantIdentificationStateCopyWith<$Res> {
  factory _$$PlantIdentificationStateImplCopyWith(
          _$PlantIdentificationStateImpl value,
          $Res Function(_$PlantIdentificationStateImpl) then) =
      __$$PlantIdentificationStateImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {bool isLoading,
      List<PlantIdentification> identifications,
      List<PlantIdentification> history,
      String? error,
      PlantIdentification? currentIdentification});
  @override
  $PlantIdentificationCopyWith<$Res>? get currentIdentification;
}
/// @nodoc
class __$$PlantIdentificationStateImplCopyWithImpl<$Res>
    extends _$PlantIdentificationStateCopyWithImpl<$Res,
        _$PlantIdentificationStateImpl>
    implements _$$PlantIdentificationStateImplCopyWith<$Res> {
  __$$PlantIdentificationStateImplCopyWithImpl(
      _$PlantIdentificationStateImpl _value,
      $Res Function(_$PlantIdentificationStateImpl) _then)
      : super(_value, _then);
  /// Create a copy of PlantIdentificationState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? isLoading = null,
    Object? identifications = null,
    Object? history = null,
    Object? error = freezed,
    Object? currentIdentification = freezed,
  }) {
    return _then(_$PlantIdentificationStateImpl(
      isLoading: null == isLoading
          ? _value.isLoading
          : isLoading // ignore: cast_nullable_to_non_nullable
              as bool,
      identifications: null == identifications
          ? _value._identifications
          : identifications // ignore: cast_nullable_to_non_nullable
              as List<PlantIdentification>,
      history: null == history
          ? _value._history
          : history // ignore: cast_nullable_to_non_nullable
              as List<PlantIdentification>,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as String?,
      currentIdentification: freezed == currentIdentification
          ? _value.currentIdentification
          : currentIdentification // ignore: cast_nullable_to_non_nullable
              as PlantIdentification?,
    ));
  }
}
/// @nodoc
@JsonSerializable()
class _$PlantIdentificationStateImpl implements _PlantIdentificationState {
  const _$PlantIdentificationStateImpl(
      {this.isLoading = false,
      final List<PlantIdentification> identifications = const [],
      final List<PlantIdentification> history = const [],
      this.error,
      this.currentIdentification})
      : _identifications = identifications,
        _history = history;
  factory _$PlantIdentificationStateImpl.fromJson(Map<String, dynamic> json) =>
      _$$PlantIdentificationStateImplFromJson(json);
  @override
  @JsonKey()
  final bool isLoading;
  final List<PlantIdentification> _identifications;
  @override
  @JsonKey()
  List<PlantIdentification> get identifications {
    if (_identifications is EqualUnmodifiableListView) return _identifications;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_identifications);
  }
  final List<PlantIdentification> _history;
  @override
  @JsonKey()
  List<PlantIdentification> get history {
    if (_history is EqualUnmodifiableListView) return _history;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_history);
  }
  @override
  final String? error;
  @override
  final PlantIdentification? currentIdentification;
  @override
  String toString() {
    return 'PlantIdentificationState(isLoading: $isLoading, identifications: $identifications, history: $history, error: $error, currentIdentification: $currentIdentification)';
  }
  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PlantIdentificationStateImpl &&
            (identical(other.isLoading, isLoading) ||
                other.isLoading == isLoading) &&
            const DeepCollectionEquality()
                .equals(other._identifications, _identifications) &&
            const DeepCollectionEquality().equals(other._history, _history) &&
            (identical(other.error, error) || other.error == error) &&
            (identical(other.currentIdentification, currentIdentification) ||
                other.currentIdentification == currentIdentification));
  }
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType,
      isLoading,
      const DeepCollectionEquality().hash(_identifications),
      const DeepCollectionEquality().hash(_history),
      error,
      currentIdentification);
  /// Create a copy of PlantIdentificationState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PlantIdentificationStateImplCopyWith<_$PlantIdentificationStateImpl>
      get copyWith => __$$PlantIdentificationStateImplCopyWithImpl<
          _$PlantIdentificationStateImpl>(this, _$identity);
  @override
  Map<String, dynamic> toJson() {
    return _$$PlantIdentificationStateImplToJson(
      this,
    );
  }
}
abstract class _PlantIdentificationState implements PlantIdentificationState {
  const factory _PlantIdentificationState(
          {final bool isLoading,
          final List<PlantIdentification> identifications,
          final List<PlantIdentification> history,
          final String? error,
          final PlantIdentification? currentIdentification}) =
      _$PlantIdentificationStateImpl;
  factory _PlantIdentificationState.fromJson(Map<String, dynamic> json) =
      _$PlantIdentificationStateImpl.fromJson;
  @override
  bool get isLoading;
  @override
  List<PlantIdentification> get identifications;
  @override
  List<PlantIdentification> get history;
  @override
  String? get error;
  @override
  PlantIdentification? get currentIdentification;
  /// Create a copy of PlantIdentificationState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PlantIdentificationStateImplCopyWith<_$PlantIdentificationStateImpl>
      get copyWith => throw _privateConstructorUsedError;
}
</file>

<file path="lib/features/plant_identification/models/plant_identification_models.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND
part of 'plant_identification_models.dart';
// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************
PlantIdentificationResult _$PlantIdentificationResultFromJson(
        Map<String, dynamic> json) =>
    PlantIdentificationResult(
      identifiedName: json['identifiedName'] as String,
      confidenceScore: (json['confidenceScore'] as num).toDouble(),
      speciesSuggestions: (json['speciesSuggestions'] as List<dynamic>)
          .map(
              (e) => PlantSpeciesSuggestion.fromJson(e as Map<String, dynamic>))
          .toList(),
      careRecommendations: json['careRecommendations'] as String?,
    );
Map<String, dynamic> _$PlantIdentificationResultToJson(
        PlantIdentificationResult instance) =>
    <String, dynamic>{
      'identifiedName': instance.identifiedName,
      'confidenceScore': instance.confidenceScore,
      'speciesSuggestions': instance.speciesSuggestions,
      'careRecommendations': instance.careRecommendations,
    };
PlantSpeciesSuggestion _$PlantSpeciesSuggestionFromJson(
        Map<String, dynamic> json) =>
    PlantSpeciesSuggestion(
      id: json['id'] as String,
      scientificName: json['scientificName'] as String,
      commonName: json['commonName'] as String,
      description: json['description'] as String?,
      commonNames: (json['commonNames'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
    );
Map<String, dynamic> _$PlantSpeciesSuggestionToJson(
        PlantSpeciesSuggestion instance) =>
    <String, dynamic>{
      'id': instance.id,
      'scientificName': instance.scientificName,
      'commonName': instance.commonName,
      'description': instance.description,
      'commonNames': instance.commonNames,
    };
_$PlantIdentificationImpl _$$PlantIdentificationImplFromJson(
        Map<String, dynamic> json) =>
    _$PlantIdentificationImpl(
      id: json['id'] as String,
      scientificName: json['scientificName'] as String,
      commonName: json['commonName'] as String,
      confidence: (json['confidence'] as num).toDouble(),
      alternativeNames: (json['alternativeNames'] as List<dynamic>)
          .map((e) => e as String)
          .toList(),
      imageUrl: json['imageUrl'] as String,
      careInfo:
          PlantCareInfo.fromJson(json['careInfo'] as Map<String, dynamic>),
      identifiedAt: DateTime.parse(json['identifiedAt'] as String),
      description: json['description'] as String?,
      tags: (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList(),
    );
Map<String, dynamic> _$$PlantIdentificationImplToJson(
        _$PlantIdentificationImpl instance) =>
    <String, dynamic>{
      'id': instance.id,
      'scientificName': instance.scientificName,
      'commonName': instance.commonName,
      'confidence': instance.confidence,
      'alternativeNames': instance.alternativeNames,
      'imageUrl': instance.imageUrl,
      'careInfo': instance.careInfo,
      'identifiedAt': instance.identifiedAt.toIso8601String(),
      'description': instance.description,
      'tags': instance.tags,
    };
_$PlantCareInfoImpl _$$PlantCareInfoImplFromJson(Map<String, dynamic> json) =>
    _$PlantCareInfoImpl(
      lightRequirement: json['lightRequirement'] as String,
      waterFrequency: json['waterFrequency'] as String,
      careLevel: json['careLevel'] as String,
      humidity: json['humidity'] as String?,
      temperature: json['temperature'] as String?,
      toxicity: json['toxicity'] as String?,
      careNotes: (json['careNotes'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList(),
    );
Map<String, dynamic> _$$PlantCareInfoImplToJson(_$PlantCareInfoImpl instance) =>
    <String, dynamic>{
      'lightRequirement': instance.lightRequirement,
      'waterFrequency': instance.waterFrequency,
      'careLevel': instance.careLevel,
      'humidity': instance.humidity,
      'temperature': instance.temperature,
      'toxicity': instance.toxicity,
      'careNotes': instance.careNotes,
    };
_$PlantIdentificationRequestImpl _$$PlantIdentificationRequestImplFromJson(
        Map<String, dynamic> json) =>
    _$PlantIdentificationRequestImpl(
      imageBase64: json['imageBase64'] as String,
      location: json['location'] as String?,
      timestamp: json['timestamp'] == null
          ? null
          : DateTime.parse(json['timestamp'] as String),
    );
Map<String, dynamic> _$$PlantIdentificationRequestImplToJson(
        _$PlantIdentificationRequestImpl instance) =>
    <String, dynamic>{
      'imageBase64': instance.imageBase64,
      'location': instance.location,
      'timestamp': instance.timestamp?.toIso8601String(),
    };
_$PlantIdentificationStateImpl _$$PlantIdentificationStateImplFromJson(
        Map<String, dynamic> json) =>
    _$PlantIdentificationStateImpl(
      isLoading: json['isLoading'] as bool? ?? false,
      identifications: (json['identifications'] as List<dynamic>?)
              ?.map((e) =>
                  PlantIdentification.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      history: (json['history'] as List<dynamic>?)
              ?.map((e) =>
                  PlantIdentification.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      error: json['error'] as String?,
      currentIdentification: json['currentIdentification'] == null
          ? null
          : PlantIdentification.fromJson(
              json['currentIdentification'] as Map<String, dynamic>),
    );
Map<String, dynamic> _$$PlantIdentificationStateImplToJson(
        _$PlantIdentificationStateImpl instance) =>
    <String, dynamic>{
      'isLoading': instance.isLoading,
      'identifications': instance.identifications,
      'history': instance.history,
      'error': instance.error,
      'currentIdentification': instance.currentIdentification,
    };
</file>

<file path="lib/features/plant_identification/presentation/screens/plant_identification_history_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_identification/models/plant_identification_models.dart';
import 'package:plant_social/features/plant_identification/providers/plant_identification_provider.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/widgets/loading_widget.dart';
import 'package:plant_social/core/widgets/error_widget.dart';
class PlantIdentificationHistoryScreen extends ConsumerStatefulWidget {
  const PlantIdentificationHistoryScreen({super.key});
  @override
  ConsumerState<PlantIdentificationHistoryScreen> createState() =>
      _PlantIdentificationHistoryScreenState();
}
class _PlantIdentificationHistoryScreenState
    extends ConsumerState<PlantIdentificationHistoryScreen> {
  @override
  void initState() {
    super.initState();
    // Load history when screen opens
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(plantIdentificationProvider.notifier).loadIdentificationHistory();
    });
  }
  @override
  Widget build(BuildContext context) {
    final state = ref.watch(plantIdentificationProvider);
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Identification History'),
        backgroundColor: theme.primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              ref.read(plantIdentificationProvider.notifier).loadIdentificationHistory();
            },
          ),
        ],
      ),
      body: _buildBody(state, theme),
    );
  }
  Widget _buildBody(PlantIdentificationState state, ThemeData theme) {
    if (state.isLoading && state.history.isEmpty) {
      return const Center(child: LoadingWidget());
    }
    if (state.error != null && state.history.isEmpty) {
      return Center(
        child: CustomErrorWidget(
          message: state.error!,
          onRetry: () {
            ref.read(plantIdentificationProvider.notifier).loadIdentificationHistory();
          },
        ),
      );
    }
    if (state.history.isEmpty) {
      return _buildEmptyState(theme);
    }
    return RefreshIndicator(
      onRefresh: () async {
        await ref.read(plantIdentificationProvider.notifier).loadIdentificationHistory();
      },
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: state.history.length,
        itemBuilder: (context, index) {
          final identification = state.history[index];
          return _buildHistoryItem(identification, theme);
        },
      ),
    );
  }
  Widget _buildEmptyState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.eco,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'No identifications yet',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Start identifying plants to see your history here',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.of(context).pop();
            },
            icon: const Icon(Icons.camera_alt),
            label: const Text('Identify a Plant'),
            style: ElevatedButton.styleFrom(
              backgroundColor: theme.primaryColor,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(
                horizontal: 24,
                vertical: 12,
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildHistoryItem(PlantIdentification identification, ThemeData theme) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () {
          _showIdentificationDetails(identification);
        },
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              // Plant image
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Container(
                  width: 60,
                  height: 60,
                  color: Colors.grey[200],
                  child: identification.imageUrl != null
                      ? Image.network(
                          identification.imageUrl!,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) {
                            return Icon(
                              Icons.eco,
                              color: Colors.grey[400],
                              size: 30,
                            );
                          },
                        )
                      : Icon(
                          Icons.eco,
                          color: Colors.grey[400],
                          size: 30,
                        ),
                ),
              ),
              const SizedBox(width: 16),
              // Plant info
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      identification.commonName,
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      identification.scientificName,
                      style: theme.textTheme.bodyMedium?.copyWith(
                        fontStyle: FontStyle.italic,
                        color: Colors.grey[600],
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        _buildConfidenceBadge(identification.confidence, theme),
                        const Spacer(),
                        Text(
                          _formatDate(identification.identifiedAt),
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: Colors.grey[500],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              // Arrow icon
              Icon(
                Icons.chevron_right,
                color: Colors.grey[400],
              ),
            ],
          ),
        ),
      ),
    );
  }
  Widget _buildConfidenceBadge(double confidence, ThemeData theme) {
    Color badgeColor;
    String badgeText;
    if (confidence >= 0.8) {
      badgeColor = Colors.green;
      badgeText = 'High';
    } else if (confidence >= 0.6) {
      badgeColor = Colors.orange;
      badgeText = 'Medium';
    } else {
      badgeColor = Colors.red;
      badgeText = 'Low';
    }
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: badgeColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: badgeColor.withOpacity(0.3)),
      ),
      child: Text(
        '$badgeText (${(confidence * 100).toInt()}%)',
        style: theme.textTheme.bodySmall?.copyWith(
          color: badgeColor,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }
  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    if (difference.inDays == 0) {
      if (difference.inHours == 0) {
        return '${difference.inMinutes}m ago';
      }
      return '${difference.inHours}h ago';
    } else if (difference.inDays == 1) {
      return 'Yesterday';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d ago';
    } else {
      return '${date.day}/${date.month}/${date.year}';
    }
  }
  void _showIdentificationDetails(PlantIdentification identification) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        constraints: BoxConstraints(
          maxHeight: MediaQuery.of(context).size.height * 0.8,
        ),
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Handle bar
            Container(
              margin: const EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            // Header
            Padding(
              padding: const EdgeInsets.all(20),
              child: Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          identification.commonName,
                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          identification.scientificName,
                          style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                            fontStyle: FontStyle.italic,
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              ),
            ),
            // Content
            Flexible(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Image
                    if (identification.imageUrl != null)
                      ClipRRect(
                        borderRadius: BorderRadius.circular(12),
                        child: AspectRatio(
                          aspectRatio: 16 / 9,
                          child: Image.network(
                            identification.imageUrl!,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) {
                              return Container(
                                color: Colors.grey[200],
                                child: Icon(
                                  Icons.eco,
                                  size: 60,
                                  color: Colors.grey[400],
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                    const SizedBox(height: 20),
                    // Confidence
                    _buildDetailSection(
                      'Confidence',
                      '${(identification.confidence * 100).toInt()}%',
                      Icons.verified,
                    ),
                    // Date
                    _buildDetailSection(
                      'Identified',
                      _formatDate(identification.identifiedAt),
                      Icons.schedule,
                    ),
                    // Care info
                    if (identification.careInfo != null) ...[
                      const SizedBox(height: 16),
                      Text(
                        'Care Information',
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 12),
                      _buildDetailSection(
                        'Light',
                        identification.careInfo!.lightRequirement,
                        Icons.wb_sunny,
                      ),
                      _buildDetailSection(
                        'Water',
                        identification.careInfo!.waterFrequency,
                        Icons.water_drop,
                      ),
                      _buildDetailSection(
                        'Care Level',
                        identification.careInfo!.careLevel,
                        Icons.trending_up,
                      ),
                    ],
                    const SizedBox(height: 100),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildDetailSection(String label, String value, IconData icon) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        children: [
          Icon(
            icon,
            size: 20,
            color: Theme.of(context).primaryColor,
          ),
          const SizedBox(width: 12),
          Text(
            '$label: ',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.w500,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/plant_identification/presentation/screens/plant_identification_screen.dart">
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:camera/camera.dart';
import 'package:image_picker/image_picker.dart';
import 'package:plant_social/features/plant_identification/providers/plant_identification_provider.dart';
import 'package:plant_social/features/plant_identification/presentation/widgets/plant_identification_result.dart';
import 'package:plant_social/features/plant_identification/presentation/widgets/plant_identification_loading.dart';
import 'package:plant_social/core/theme/app_theme.dart';
class PlantIdentificationScreen extends ConsumerStatefulWidget {
  const PlantIdentificationScreen({super.key});
  @override
  ConsumerState<PlantIdentificationScreen> createState() => _PlantIdentificationScreenState();
}
class _PlantIdentificationScreenState extends ConsumerState<PlantIdentificationScreen> {
  CameraController? _cameraController;
  List<CameraDescription>? _cameras;
  bool _isCameraInitialized = false;
  final ImagePicker _imagePicker = ImagePicker();
  @override
  void initState() {
    super.initState();
    _initializeCamera();
  }
  Future<void> _initializeCamera() async {
    try {
      _cameras = await availableCameras();
      if (_cameras!.isNotEmpty) {
        _cameraController = CameraController(
          _cameras![0],
          ResolutionPreset.high,
          enableAudio: false,
        );
        await _cameraController!.initialize();
        if (mounted) {
          setState(() {
            _isCameraInitialized = true;
          });
        }
      }
    } catch (e) {
      debugPrint('Error initializing camera: $e');
    }
  }
  @override
  void dispose() {
    _cameraController?.dispose();
    super.dispose();
  }
  Future<void> _takePicture() async {
    if (_cameraController == null || !_cameraController!.value.isInitialized) {
      return;
    }
    try {
      final XFile image = await _cameraController!.takePicture();
      final File imageFile = File(image.path);
      // Identify the plant
      await ref.read(plantIdentificationProvider.notifier).identifyPlant(imageFile);
    } catch (e) {
      debugPrint('Error taking picture: $e');
    }
  }
  Future<void> _pickImageFromGallery() async {
    try {
      final XFile? image = await _imagePicker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 1024,
        maxHeight: 1024,
        imageQuality: 85,
      );
      if (image != null) {
        final File imageFile = File(image.path);
        await ref.read(plantIdentificationProvider.notifier).identifyPlant(imageFile);
      }
    } catch (e) {
      debugPrint('Error picking image: $e');
    }
  }
  @override
  Widget build(BuildContext context) {
    final plantState = ref.watch(plantIdentificationProvider);
    final theme = Theme.of(context);
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.close, color: Colors.white),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: const Text(
          'Plant Identification',
          style: TextStyle(color: Colors.white),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.history, color: Colors.white),
            onPressed: () {
              // Navigate to identification history
              Navigator.of(context).pushNamed('/plant-identification-history');
            },
          ),
        ],
      ),
      body: Stack(
        children: [
          // Camera preview
          if (_isCameraInitialized && _cameraController != null)
            Positioned.fill(
              child: CameraPreview(_cameraController!),
            )
          else
            const Center(
              child: CircularProgressIndicator(color: Colors.white),
            ),
          // Plant identification overlay
          if (plantState.isLoading)
            const PlantIdentificationLoading()
          else if (plantState.currentIdentification != null)
            PlantIdentificationResult(
              identification: plantState.currentIdentification!,
              onClose: () {
                ref.read(plantIdentificationProvider.notifier).clearCurrentIdentification();
              },
              onSaveToCollection: () {
                ref.read(plantIdentificationProvider.notifier)
                    .saveToCollection(plantState.currentIdentification!.id);
              },
            ),
          // Camera controls
          if (!plantState.isLoading && plantState.currentIdentification == null)
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: Container(
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.bottomCenter,
                    end: Alignment.topCenter,
                    colors: [
                      Colors.black.withOpacity(0.8),
                      Colors.transparent,
                    ],
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    // Gallery button
                    GestureDetector(
                      onTap: _pickImageFromGallery,
                      child: Container(
                        width: 60,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.white, width: 2),
                        ),
                        child: const Icon(
                          Icons.photo_library,
                          color: Colors.white,
                          size: 30,
                        ),
                      ),
                    ),
                    // Capture button
                    GestureDetector(
                      onTap: _takePicture,
                      child: Container(
                        width: 80,
                        height: 80,
                        decoration: BoxDecoration(
                          color: theme.primaryColor,
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.white, width: 4),
                          boxShadow: [
                            BoxShadow(
                              color: theme.primaryColor.withOpacity(0.3),
                              blurRadius: 20,
                              spreadRadius: 5,
                            ),
                          ],
                        ),
                        child: const Icon(
                          Icons.camera_alt,
                          color: Colors.white,
                          size: 40,
                        ),
                      ),
                    ),
                    // Switch camera button
                    GestureDetector(
                      onTap: () {
                        // Switch between front and back camera
                        // Implementation depends on camera setup
                      },
                      child: Container(
                        width: 60,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.white, width: 2),
                        ),
                        child: const Icon(
                          Icons.flip_camera_ios,
                          color: Colors.white,
                          size: 30,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          // Instructions overlay
          if (!plantState.isLoading && plantState.currentIdentification == null)
            Positioned(
              top: 100,
              left: 20,
              right: 20,
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.6),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Column(
                  children: [
                    Icon(
                      Icons.eco,
                      color: Colors.white,
                      size: 32,
                    ),
                    SizedBox(height: 8),
                    Text(
                      'Point your camera at a plant',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    SizedBox(height: 4),
                    Text(
                      'Take a clear photo to identify the species',
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          // Error message
          if (plantState.error != null)
            Positioned(
              top: 100,
              left: 20,
              right: 20,
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.9),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.error, color: Colors.white),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        plantState.error!,
                        style: const TextStyle(color: Colors.white),
                      ),
                    ),
                    IconButton(
                      icon: const Icon(Icons.close, color: Colors.white),
                      onPressed: () {
                        ref.read(plantIdentificationProvider.notifier).clearError();
                      },
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/plant_identification/presentation/screens/plant_search_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_identification/models/plant_identification_models.dart';
import 'package:plant_social/features/plant_identification/providers/plant_identification_provider.dart';
import 'package:plant_social/features/plant_identification/presentation/screens/plant_species_detail_screen.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/widgets/loading_widget.dart';
import 'package:plant_social/core/widgets/error_widget.dart';
class PlantSearchScreen extends ConsumerStatefulWidget {
  const PlantSearchScreen({super.key});
  @override
  ConsumerState<PlantSearchScreen> createState() => _PlantSearchScreenState();
}
class _PlantSearchScreenState extends ConsumerState<PlantSearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  final FocusNode _searchFocusNode = FocusNode();
  String _currentQuery = '';
  @override
  void initState() {
    super.initState();
    // Auto-focus search field
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _searchFocusNode.requestFocus();
    });
  }
  @override
  void dispose() {
    _searchController.dispose();
    _searchFocusNode.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final state = ref.watch(plantIdentificationProvider);
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Search Plants'),
        backgroundColor: theme.primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: Column(
        children: [
          // Search bar
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: theme.primaryColor,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: _buildSearchBar(theme),
          ),
          // Search results
          Expanded(
            child: _buildSearchResults(state, theme),
          ),
        ],
      ),
    );
  }
  Widget _buildSearchBar(ThemeData theme) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        controller: _searchController,
        focusNode: _searchFocusNode,
        decoration: InputDecoration(
          hintText: 'Search for plants...',
          prefixIcon: Icon(
            Icons.search,
            color: Colors.grey[600],
          ),
          suffixIcon: _currentQuery.isNotEmpty
              ? IconButton(
                  icon: const Icon(Icons.clear),
                  onPressed: () {
                    _searchController.clear();
                    setState(() {
                      _currentQuery = '';
                    });
                    ref.read(plantIdentificationProvider.notifier).clearSearch();
                  },
                )
              : null,
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
        ),
        onChanged: (query) {
          setState(() {
            _currentQuery = query;
          });
          if (query.trim().isNotEmpty) {
            // Debounce search
            Future.delayed(const Duration(milliseconds: 500), () {
              if (_searchController.text == query && query.trim().isNotEmpty) {
                ref.read(plantIdentificationProvider.notifier).searchPlants(query);
              }
            });
          } else {
            ref.read(plantIdentificationProvider.notifier).clearSearch();
          }
        },
        onSubmitted: (query) {
          if (query.trim().isNotEmpty) {
            ref.read(plantIdentificationProvider.notifier).searchPlants(query);
          }
        },
      ),
    );
  }
  Widget _buildSearchResults(PlantIdentificationState state, ThemeData theme) {
    if (_currentQuery.isEmpty) {
      return _buildEmptyState(theme);
    }
    if (state.isLoading) {
      return const Center(child: LoadingWidget());
    }
    if (state.error != null) {
      return Center(
        child: CustomErrorWidget(
          message: state.error!,
          onRetry: () {
            if (_currentQuery.isNotEmpty) {
              ref.read(plantIdentificationProvider.notifier).searchPlants(_currentQuery);
            }
          },
        ),
      );
    }
    if (state.identifications.isEmpty) {
      return _buildNoResultsState(theme);
    }
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: state.identifications.length,
      itemBuilder: (context, index) {
        final species = state.identifications[index];
        return _buildSearchResultItem(species, theme);
      },
    );
  }
  Widget _buildEmptyState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'Search for Plants',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Enter a plant name to start searching',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          _buildSearchSuggestions(theme),
        ],
      ),
    );
  }
  Widget _buildSearchSuggestions(ThemeData theme) {
    final suggestions = [
      'Rose',
      'Monstera',
      'Fiddle Leaf Fig',
      'Snake Plant',
      'Pothos',
      'Peace Lily',
    ];
    return Column(
      children: [
        Text(
          'Popular searches:',
          style: theme.textTheme.bodySmall?.copyWith(
            color: Colors.grey[600],
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 12),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: suggestions.map((suggestion) {
            return GestureDetector(
              onTap: () {
                _searchController.text = suggestion;
                setState(() {
                  _currentQuery = suggestion;
                });
                ref.read(plantIdentificationProvider.notifier).searchPlants(suggestion);
              },
              child: Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 6,
                ),
                decoration: BoxDecoration(
                  color: theme.primaryColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: theme.primaryColor.withOpacity(0.3),
                  ),
                ),
                child: Text(
                  suggestion,
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.primaryColor,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
  Widget _buildNoResultsState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search_off,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'No plants found',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Try searching with different keywords',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          OutlinedButton.icon(
            onPressed: () {
              _searchController.clear();
              setState(() {
                _currentQuery = '';
              });
              ref.read(plantIdentificationProvider.notifier).clearSearch();
              _searchFocusNode.requestFocus();
            },
            icon: const Icon(Icons.refresh),
            label: const Text('Try Again'),
            style: OutlinedButton.styleFrom(
              foregroundColor: theme.primaryColor,
              side: BorderSide(color: theme.primaryColor),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildSearchResultItem(PlantIdentification species, ThemeData theme) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () {
          Navigator.of(context).push(
            MaterialPageRoute(
              builder: (context) => PlantSpeciesDetailScreen(
                speciesId: species.id,
                speciesName: species.commonName,
              ),
            ),
          );
        },
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              // Plant image
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Container(
                  width: 60,
                  height: 60,
                  color: Colors.grey[200],
                  child: species.imageUrl != null
                      ? Image.network(
                          species.imageUrl!,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) {
                            return Icon(
                              Icons.eco,
                              color: Colors.grey[400],
                              size: 30,
                            );
                          },
                        )
                      : Icon(
                          Icons.eco,
                          color: Colors.grey[400],
                          size: 30,
                        ),
                ),
              ),
              const SizedBox(width: 16),
              // Plant info
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      species.commonName,
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      species.scientificName,
                      style: theme.textTheme.bodyMedium?.copyWith(
                        fontStyle: FontStyle.italic,
                        color: Colors.grey[600],
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'Scientific: ${species.scientificName}',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: Colors.grey[500],
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
              // Arrow icon
              Icon(
                Icons.chevron_right,
                color: Colors.grey[400],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/plant_identification/presentation/screens/plant_species_detail_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_identification/models/plant_identification_models.dart' as identification_models;
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/features/plant_identification/providers/plant_identification_provider.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/widgets/loading_widget.dart';
import 'package:plant_social/core/widgets/error_widget.dart';
class PlantSpeciesDetailScreen extends ConsumerStatefulWidget {
  final String speciesId;
  final String? speciesName;
  const PlantSpeciesDetailScreen({
    super.key,
    required this.speciesId,
    this.speciesName,
  });
  @override
  ConsumerState<PlantSpeciesDetailScreen> createState() =>
      _PlantSpeciesDetailScreenState();
}
class _PlantSpeciesDetailScreenState
    extends ConsumerState<PlantSpeciesDetailScreen> {
  @override
  void initState() {
    super.initState();
    // Species details will be automatically loaded by the provider
  }
  @override
  Widget build(BuildContext context) {
    final speciesDetailAsync = ref.watch(plantSpeciesProvider(widget.speciesId));
    final theme = Theme.of(context);
    return Scaffold(
      body: speciesDetailAsync.when(
        data: (species) => _buildContent(species, theme),
        loading: () => _buildLoadingState(theme),
        error: (error, stackTrace) => _buildErrorState(error.toString(), theme),
      ),
    );
  }
  Widget _buildLoadingState(ThemeData theme) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.speciesName ?? 'Plant Species'),
        backgroundColor: theme.primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: const Center(child: LoadingWidget()),
    );
  }
  Widget _buildErrorState(String error, ThemeData theme) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.speciesName ?? 'Plant Species'),
        backgroundColor: theme.primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: Center(
        child: CustomErrorWidget(
          message: error,
          onRetry: () {
              ref.invalidate(plantSpeciesProvider(widget.speciesId));
            },
        ),
      ),
    );
  }
  Widget _buildContent(PlantSpecies species, ThemeData theme) {
    return CustomScrollView(
      slivers: [
        // App bar with image
        SliverAppBar(
          expandedHeight: 300,
          pinned: true,
          backgroundColor: theme.primaryColor,
          foregroundColor: Colors.white,
          flexibleSpace: FlexibleSpaceBar(
            title: Text(
              species.commonName,
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
                shadows: [
                  Shadow(
                    offset: Offset(0, 1),
                    blurRadius: 3,
                    color: Colors.black54,
                  ),
                ],
              ),
            ),
            background: Stack(
              fit: StackFit.expand,
              children: [
                species.imageUrl != null
                    ? Image.network(
                        species.imageUrl!,
                        fit: BoxFit.cover,
                        errorBuilder: (context, error, stackTrace) {
                          return Container(
                            color: theme.primaryColor,
                            child: Icon(
                              Icons.eco,
                              size: 80,
                              color: Colors.white.withOpacity(0.7),
                            ),
                          );
                        },
                      )
                    : Container(
                        color: theme.primaryColor,
                        child: Icon(
                          Icons.eco,
                          size: 80,
                          color: Colors.white.withOpacity(0.7),
                        ),
                      ),
                // Gradient overlay
                Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [
                        Colors.transparent,
                        Colors.black.withOpacity(0.7),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
          actions: [
            IconButton(
              icon: const Icon(Icons.share),
              onPressed: () {
                // Share species
              },
            ),
            IconButton(
              icon: const Icon(Icons.favorite_border),
              onPressed: () {
                // Add to favorites
              },
            ),
          ],
        ),
        // Content
        SliverToBoxAdapter(
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Scientific name
                Text(
                  species.scientificName,
                  style: theme.textTheme.headlineSmall?.copyWith(
                    fontStyle: FontStyle.italic,
                    color: Colors.grey[600],
                  ),
                ),
                const SizedBox(height: 8),
                // Description
                if (species.description != null)
                  Text(
                    'Description: ${species.description}',
                    style: theme.textTheme.bodyLarge?.copyWith(
                      color: Colors.grey[600],
                    ),
                  ),
                const SizedBox(height: 24),
                // Description
                if (species.description != null) ...[
                  _buildSection(
                    'Description',
                    species.description!,
                    Icons.description,
                    theme,
                  ),
                  const SizedBox(height: 24),
                ],
                // Care information
                if (species.careInfo != null) ...[
                  _buildCareSection(species.careInfo!, theme),
                  const SizedBox(height: 24),
                ],
                // Alternative names
                if (species.alternativeNames != null && species.alternativeNames!.isNotEmpty) ...[
                  _buildAlternativeNamesSection(species.alternativeNames!, theme),
                  const SizedBox(height: 24),
                ],
                // Native regions
                if (species.nativeRegions != null && species.nativeRegions!.isNotEmpty) ...[
                  _buildNativeRegionsSection(species.nativeRegions!, theme),
                  const SizedBox(height: 24),
                ],
                // Growth characteristics
                _buildGrowthCharacteristics(species, theme),
              ],
            ),
          ),
        ),
      ],
    );
  }
  Widget _buildSection(String title, String content, IconData icon, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              icon,
              size: 24,
              color: theme.primaryColor,
            ),
            const SizedBox(width: 8),
            Text(
              title,
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Text(
          content,
          style: theme.textTheme.bodyLarge,
        ),
      ],
    );
  }
  Widget _buildCareSection(PlantCareInfo careInfo, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              Icons.spa,
              size: 24,
              color: theme.primaryColor,
            ),
            const SizedBox(width: 8),
            Text(
              'Care Information',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        _buildCareGrid(careInfo, theme),
      ],
    );
  }
  Widget _buildCareGrid(PlantCareInfo careInfo, ThemeData theme) {
    final careItems = [
      _CareItem(Icons.wb_sunny, 'Light', careInfo.lightRequirement),
      _CareItem(Icons.water_drop, 'Water', careInfo.waterFrequency),
      _CareItem(Icons.trending_up, 'Care Level', careInfo.careLevel),
      if (careInfo.humidity != null)
        _CareItem(Icons.opacity, 'Humidity', careInfo.humidity!),
      if (careInfo.temperature != null)
        _CareItem(Icons.thermostat, 'Temperature', careInfo.temperature!),
      if (careInfo.toxicity != null)
        _CareItem(Icons.warning, 'Toxicity', careInfo.toxicity!),
    ];
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 3,
        crossAxisSpacing: 12,
        mainAxisSpacing: 12,
      ),
      itemCount: careItems.length,
      itemBuilder: (context, index) {
        final item = careItems[index];
        return Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: theme.primaryColor.withOpacity(0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: theme.primaryColor.withOpacity(0.2),
            ),
          ),
          child: Row(
            children: [
              Icon(
                item.icon,
                size: 20,
                color: theme.primaryColor,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      item.label,
                      style: theme.textTheme.bodySmall?.copyWith(
                        fontWeight: FontWeight.w500,
                        color: Colors.grey[600],
                      ),
                    ),
                    Text(
                      item.value,
                      style: theme.textTheme.bodyMedium?.copyWith(
                        fontWeight: FontWeight.w500,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
  Widget _buildAlternativeNamesSection(List<String> names, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              Icons.label,
              size: 24,
              color: theme.primaryColor,
            ),
            const SizedBox(width: 8),
            Text(
              'Also known as',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: names.map((name) {
            return Chip(
              label: Text(
                name,
                style: theme.textTheme.bodyMedium,
              ),
              backgroundColor: theme.primaryColor.withOpacity(0.1),
              side: BorderSide.none,
            );
          }).toList(),
        ),
      ],
    );
  }
  Widget _buildNativeRegionsSection(List<String> regions, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              Icons.public,
              size: 24,
              color: theme.primaryColor,
            ),
            const SizedBox(width: 8),
            Text(
              'Native Regions',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: regions.map((region) {
            return Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: Colors.green.withOpacity(0.3),
                ),
              ),
              child: Text(
                region,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: Colors.green[700],
                  fontWeight: FontWeight.w500,
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
  Widget _buildGrowthCharacteristics(PlantSpecies species, ThemeData theme) {
    final characteristics = <String>[];
    characteristics.add('Scientific Name: ${species.scientificName}');
    if (species.family != null) {
      characteristics.add('Family: ${species.family}');
    }
    if (species.alternativeNames != null && species.alternativeNames!.isNotEmpty) {
      characteristics.add('Alternative Names: ${species.alternativeNames!.join(', ')}');
    }
    if (species.maxHeight != null) {
      characteristics.add('Max Height: ${species.maxHeight}');
    }
    if (species.bloomTime != null) {
      characteristics.add('Bloom Time: ${species.bloomTime}');
    }
    if (species.plantType != null) {
      characteristics.add('Plant Type: ${species.plantType}');
    }
    if (characteristics.isEmpty) return const SizedBox.shrink();
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              Icons.nature,
              size: 24,
              color: theme.primaryColor,
            ),
            const SizedBox(width: 8),
            Text(
              'Growth Characteristics',
              style: theme.textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        ...characteristics.map((characteristic) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Row(
              children: [
                Icon(
                  Icons.fiber_manual_record,
                  size: 8,
                  color: theme.primaryColor,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    characteristic,
                    style: theme.textTheme.bodyLarge,
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
}
class _CareItem {
  final IconData icon;
  final String label;
  final String value;
  _CareItem(this.icon, this.label, this.value);
}
</file>

<file path="lib/features/plant_identification/presentation/widgets/plant_identification_loading.dart">
import 'package:flutter/material.dart';
/// Loading widget displayed during plant identification process
class PlantIdentificationLoading extends StatelessWidget {
  const PlantIdentificationLoading({super.key});
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(24),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const CircularProgressIndicator(
            strokeWidth: 3,
            valueColor: AlwaysStoppedAnimation<Color>(Colors.green),
          ),
          const SizedBox(height: 24),
          Text(
            'Identifying your plant...',
            style: Theme.of(context).textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 12),
          Text(
            'This may take a few moments',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              color: Colors.grey[600],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/plant_identification/presentation/widgets/plant_identification_result.dart">
import 'package:flutter/material.dart';
import 'package:plant_social/features/plant_identification/models/plant_identification_models.dart';
import 'package:plant_social/core/theme/app_theme.dart';
class PlantIdentificationResult extends StatelessWidget {
  final PlantIdentification identification;
  final VoidCallback onClose;
  final VoidCallback onSaveToCollection;
  const PlantIdentificationResult({
    super.key,
    required this.identification,
    required this.onClose,
    required this.onSaveToCollection,
  });
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Positioned(
      bottom: 0,
      left: 0,
      right: 0,
      child: Container(
        constraints: BoxConstraints(
          maxHeight: MediaQuery.of(context).size.height * 0.7,
        ),
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Handle bar
            Container(
              margin: const EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            // Header
            Padding(
              padding: const EdgeInsets.all(20),
              child: Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Plant Identified!',
                          style: theme.textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: theme.primaryColor,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '${(identification.confidence * 100).toInt()}% confidence',
                          style: theme.textTheme.bodyMedium?.copyWith(
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: onClose,
                  ),
                ],
              ),
            ),
            // Content
            Flexible(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Plant names
                    _buildPlantNames(theme),
                    const SizedBox(height: 24),
                    // Confidence indicator
                    _buildConfidenceIndicator(theme),
                    const SizedBox(height: 24),
                    // Care information
                    _buildCareInfo(theme),
                    const SizedBox(height: 24),
                    // Alternative names
                    if (identification.alternativeNames.isNotEmpty)
                      _buildAlternativeNames(theme),
                    // Description
                    if (identification.description != null)
                      _buildDescription(theme),
                    const SizedBox(height: 100), // Space for buttons
                  ],
                ),
              ),
            ),
            // Action buttons
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.grey[50],
                border: Border(
                  top: BorderSide(color: Colors.grey[200]!),
                ),
              ),
              child: Row(
                children: [
                  Expanded(
                    child: OutlinedButton.icon(
                      onPressed: () {
                        // Share identification
                      },
                      icon: const Icon(Icons.share),
                      label: const Text('Share'),
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    flex: 2,
                    child: ElevatedButton.icon(
                      onPressed: onSaveToCollection,
                      icon: const Icon(Icons.add),
                      label: const Text('Add to Collection'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: theme.primaryColor,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildPlantNames(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          identification.commonName,
          style: theme.textTheme.headlineMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          identification.scientificName,
          style: theme.textTheme.bodyLarge?.copyWith(
            fontStyle: FontStyle.italic,
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }
  Widget _buildConfidenceIndicator(ThemeData theme) {
    final confidence = identification.confidence;
    Color confidenceColor;
    String confidenceText;
    if (confidence >= 0.8) {
      confidenceColor = Colors.green;
      confidenceText = 'High Confidence';
    } else if (confidence >= 0.6) {
      confidenceColor = Colors.orange;
      confidenceText = 'Medium Confidence';
    } else {
      confidenceColor = Colors.red;
      confidenceText = 'Low Confidence';
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Text(
              'Confidence: ',
              style: theme.textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w500,
              ),
            ),
            Text(
              confidenceText,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: confidenceColor,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        LinearProgressIndicator(
          value: confidence,
          backgroundColor: Colors.grey[200],
          valueColor: AlwaysStoppedAnimation<Color>(confidenceColor),
        ),
      ],
    );
  }
  Widget _buildCareInfo(ThemeData theme) {
    final careInfo = identification.careInfo;
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Care Information',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        _buildCareItem(Icons.wb_sunny, 'Light', careInfo.lightRequirement, theme),
        _buildCareItem(Icons.water_drop, 'Water', careInfo.waterFrequency, theme),
        _buildCareItem(Icons.trending_up, 'Care Level', careInfo.careLevel, theme),
        if (careInfo.humidity != null)
          _buildCareItem(Icons.opacity, 'Humidity', careInfo.humidity!, theme),
        if (careInfo.temperature != null)
          _buildCareItem(Icons.thermostat, 'Temperature', careInfo.temperature!, theme),
        if (careInfo.toxicity != null)
          _buildCareItem(Icons.warning, 'Toxicity', careInfo.toxicity!, theme),
      ],
    );
  }
  Widget _buildCareItem(IconData icon, String label, String value, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          Icon(
            icon,
            size: 20,
            color: theme.primaryColor,
          ),
          const SizedBox(width: 12),
          Text(
            '$label: ',
            style: theme.textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.w500,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: theme.textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildAlternativeNames(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Also known as:',
          style: theme.textTheme.titleSmall?.copyWith(
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 4,
          children: identification.alternativeNames.map((name) {
            return Chip(
              label: Text(
                name,
                style: theme.textTheme.bodySmall,
              ),
              backgroundColor: theme.primaryColor.withOpacity(0.1),
              side: BorderSide.none,
            );
          }).toList(),
        ),
        const SizedBox(height: 16),
      ],
    );
  }
  Widget _buildDescription(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Description',
          style: theme.textTheme.titleSmall?.copyWith(
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          identification.description!,
          style: theme.textTheme.bodyMedium,
        ),
        const SizedBox(height: 16),
      ],
    );
  }
}
</file>

<file path="lib/features/plant_identification/providers/plant_identification_provider.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/core/network/api_client.dart';
import 'package:plant_social/features/plant_identification/models/plant_identification_models.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
import 'package:plant_social/features/plant_identification/services/plant_identification_service.dart';
import 'dart:io';
// Service provider
final plantIdentificationServiceProvider = Provider<PlantIdentificationService>(
  (ref) => PlantIdentificationService(ref.read(apiClientProvider)),
);
// State notifier for plant identification
class PlantIdentificationNotifier extends StateNotifier<PlantIdentificationState> {
  final PlantIdentificationService _service;
  PlantIdentificationNotifier(this._service) : super(const PlantIdentificationState());
  Future<void> identifyPlant(File imageFile) async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final identification = await _service.identifyPlant(imageFile);
      state = state.copyWith(
        isLoading: false,
        currentIdentification: identification,
        identifications: [identification, ...state.identifications],
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }
  Future<void> loadIdentificationHistory() async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final history = await _service.getIdentificationHistory();
      state = state.copyWith(
        isLoading: false,
        history: history,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }
  Future<void> searchPlants(String query) async {
    if (query.isEmpty) {
      state = state.copyWith(identifications: []);
      return;
    }
    state = state.copyWith(isLoading: true, error: null);
    try {
      final results = await _service.searchPlants(query);
      state = state.copyWith(
        isLoading: false,
        identifications: results,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }
  Future<void> saveToCollection(String identificationId) async {
    try {
      await _service.saveIdentificationToCollection(identificationId);
      // Show success message or update UI as needed
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }
  void clearError() {
    state = state.copyWith(error: null);
  }
  void clearCurrentIdentification() {
    state = state.copyWith(currentIdentification: null);
  }
  void clearSearch() {
    state = state.copyWith(
      identifications: [],
      error: null,
    );
  }
}
// State notifier provider
final plantIdentificationProvider = StateNotifierProvider<PlantIdentificationNotifier, PlantIdentificationState>(
  (ref) => PlantIdentificationNotifier(ref.read(plantIdentificationServiceProvider)),
);
// Individual providers for specific use cases
final plantIdentificationHistoryProvider = FutureProvider<List<PlantIdentification>>(
  (ref) => ref.read(plantIdentificationServiceProvider).getIdentificationHistory(),
);
final plantSpeciesProvider = FutureProvider.family<PlantSpecies, String>(
  (ref, speciesId) => ref.read(plantIdentificationServiceProvider).getPlantSpecies(speciesId),
);
</file>

<file path="lib/features/plant_identification/services/plant_identification_service.dart">
import 'dart:convert';
import 'dart:io';
import 'package:dio/dio.dart';
import 'package:plant_social/core/network/api_client.dart';
import 'package:plant_social/features/plant_identification/models/plant_identification_models.dart';
import 'package:plant_social/features/plant_care/models/plant_care_models.dart';
class PlantIdentificationService {
  final ApiClient _apiClient;
  PlantIdentificationService(this._apiClient);
  /// Upload and identify a plant image with full AI analysis and database storage
  Future<PlantIdentification> identifyPlant(File imageFile, {
    String? location,
    String? notes,
  }) async {
    try {
      // Create multipart form data for file upload
      final formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(
          imageFile.path,
          filename: imageFile.path.split('/').last,
        ),
        if (location != null) 'location': location,
        if (notes != null) 'notes': notes,
      });
      final response = await _apiClient.post(
        '/plant-id/upload',
        data: formData,
        options: Options(
          contentType: 'multipart/form-data',
        ),
      );
      return _parseIdentificationResponse(response.data);
    } catch (e) {
      throw Exception('Failed to identify plant: $e');
    }
  }
  /// Analyze a plant image without saving to database (quick identification)
  Future<PlantIdentificationResult> analyzePlant(File imageFile) async {
    try {
      // Create multipart form data for file upload
      final formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(
          imageFile.path,
          filename: imageFile.path.split('/').last,
        ),
      });
      final response = await _apiClient.post(
        '/plant-id/analyze',
        data: formData,
        options: Options(
          contentType: 'multipart/form-data',
        ),
      );
      return PlantIdentificationResult.fromJson(response.data);
    } catch (e) {
      throw Exception('Failed to analyze plant: $e');
    }
  }
  Future<List<PlantIdentification>> getIdentificationHistory({
    int skip = 0,
    int limit = 20,
  }) async {
    try {
      final response = await _apiClient.get(
        '/plant-id/',
        queryParameters: {
          'skip': skip,
          'limit': limit,
        },
      );
      // Parse the paginated response
      final List<dynamic> items = response.data['items'];
      return items.map((json) => _parseIdentificationResponse(json)).toList();
    } catch (e) {
      throw Exception('Failed to get identification history: $e');
    }
  }
  Future<PlantIdentification> getIdentification(String identificationId) async {
    try {
      final response = await _apiClient.get('/plant-id/$identificationId');
      return _parseIdentificationResponse(response.data);
    } catch (e) {
      throw Exception('Failed to get identification: $e');
    }
  }
  Future<Map<String, dynamic>> getIdentificationAIDetails(String identificationId) async {
    try {
      final response = await _apiClient.get('/plant-id/$identificationId/ai-details');
      return response.data;
    } catch (e) {
      throw Exception('Failed to get AI details: $e');
    }
  }
  Future<PlantSpecies> getPlantSpecies(String speciesId) async {
    try {
      final response = await _apiClient.get('/plant-species/$speciesId');
      return _parsePlantSpeciesResponse(response.data);
    } catch (e) {
      throw Exception('Failed to get plant species: $e');
    }
  }
  Future<List<PlantSpecies>> searchPlantSpecies(String query) async {
    try {
      final response = await _apiClient.get(
        '/plant-species/search',
        queryParameters: {'q': query},
      );
      final List<dynamic> data = response.data['items'] ?? response.data;
      return data.map((json) => _parsePlantSpeciesResponse(json)).toList();
    } catch (e) {
      throw Exception('Failed to search plant species: $e');
    }
  }
  Future<void> updateIdentification(
    String identificationId,
    Map<String, dynamic> updateData,
  ) async {
    try {
      await _apiClient.put(
        '/plant-id/$identificationId',
        data: updateData,
      );
    } catch (e) {
      throw Exception('Failed to update identification: $e');
    }
  }
  Future<void> deleteIdentification(String identificationId) async {
    try {
      await _apiClient.delete('/plant-id/$identificationId');
    } catch (e) {
      throw Exception('Failed to delete identification: $e');
    }
  }
  Future<Map<String, dynamic>> getIdentificationStats() async {
    try {
      final response = await _apiClient.get('/plant-id/stats');
      return response.data;
    } catch (e) {
      throw Exception('Failed to get identification statistics: $e');
    }
  }
  /// Helper method to parse identification response and handle data format differences
  PlantIdentification _parseIdentificationResponse(Map<String, dynamic> data) {
    // Convert backend response format to frontend model format
    return PlantIdentification(
      id: data['id'].toString(),
      scientificName: data['species']?['scientific_name'] ?? data['identified_name'] ?? 'Unknown',
      commonName: data['species']?['common_name'] ?? data['identified_name'] ?? 'Unknown Plant',
      confidence: (data['confidence_score'] ?? 0.0).toDouble(),
      alternativeNames: _extractAlternativeNames(data),
      imageUrl: data['image_path'] ?? '',
      careInfo: _extractCareInfo(data),
      identifiedAt: DateTime.parse(data['created_at'] ?? DateTime.now().toIso8601String()),
      description: data['species']?['description'],
      tags: _extractTags(data),
    );
  }
  List<String> _extractAlternativeNames(Map<String, dynamic> data) {
    final List<String> names = [];
    // Add scientific name if different from common name
    final scientificName = data['species']?['scientific_name'];
    if (scientificName != null && scientificName != data['identified_name']) {
      names.add(scientificName);
    }
    // Add common names from species data
    final commonNames = data['species']?['common_names'];
    if (commonNames is List) {
      names.addAll(commonNames.cast<String>());
    }
    return names;
  }
  PlantCareInfo _extractCareInfo(Map<String, dynamic> data) {
    final species = data['species'];
    return PlantCareInfo(
      lightRequirement: species?['light_requirements'] ?? 'Unknown',
      waterFrequency: species?['water_frequency_days'] != null 
          ? 'Every ${species['water_frequency_days']} days'
          : 'Unknown',
      careLevel: species?['care_level'] ?? 'Unknown',
      humidity: species?['humidity_preference'],
      temperature: species?['temperature_range'],
      toxicity: species?['toxicity_info'],
      careNotes: species?['care_notes'] != null 
          ? [species['care_notes']] 
          : null,
    );
  }
  List<String>? _extractTags(Map<String, dynamic> data) {
    final species = data['species'];
    final List<String> tags = [];
    // Add plant type/category as tags
    if (species?['plant_type'] != null) {
      tags.add(species['plant_type']);
    }
    // Add care difficulty as tag
    if (species?['care_difficulty'] != null) {
      tags.add(species['care_difficulty']);
    }
    return tags.isNotEmpty ? tags : null;
  }
  /// Helper method to convert backend plant species format to frontend model
  PlantSpecies _parsePlantSpeciesResponse(Map<String, dynamic> data) {
    return PlantSpecies(
      id: data['id'].toString(),
      commonName: data['common_names']?.isNotEmpty == true 
          ? data['common_names'][0] 
          : data['scientific_name'] ?? 'Unknown Plant',
      scientificName: data['scientific_name'] ?? 'Unknown',
      family: data['family'],
      description: data['description'],
      imageUrl: data['image_url'],
      alternativeNames: data['common_names']?.cast<String>(),
      nativeRegions: null, // Not provided by backend
      maxHeight: null, // Not provided by backend
      bloomTime: null, // Not provided by backend
      plantType: null, // Not provided by backend
      careInfo: PlantCareInfo(
        lightRequirement: data['light_requirements'] ?? 'Unknown',
        waterFrequency: data['water_frequency_days'] != null 
            ? 'Every ${data['water_frequency_days']} days'
            : 'Unknown',
        careLevel: data['care_level'] ?? 'Unknown',
        humidity: data['humidity_preference'],
        temperature: data['temperature_range'],
        toxicity: data['toxicity_info'],
        fertilizer: null, // Not provided by backend
        repotting: null, // Not provided by backend
        pruning: null, // Not provided by backend
        additionalCare: data['care_notes'] != null 
            ? {'notes': data['care_notes']} 
            : null,
      ),
      createdAt: data['created_at'] != null 
          ? DateTime.parse(data['created_at']) 
          : DateTime.now(),
      updatedAt: data['updated_at'] != null 
          ? DateTime.parse(data['updated_at']) 
          : DateTime.now(),
    );
  }
}
</file>

<file path="lib/features/plant/presentation/screens/plant_features_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/features/plant_identification/presentation/screens/plant_identification_screen.dart';
import 'package:plant_social/features/plant_care/presentation/screens/plant_care_dashboard_screen.dart';
import 'package:plant_social/features/plant_community/presentation/screens/plant_community_screen.dart';
import 'package:plant_social/core/theme/app_theme.dart';
class PlantFeaturesScreen extends ConsumerStatefulWidget {
  const PlantFeaturesScreen({super.key});
  @override
  ConsumerState<PlantFeaturesScreen> createState() => _PlantFeaturesScreenState();
}
class _PlantFeaturesScreenState extends ConsumerState<PlantFeaturesScreen> {
  int _currentIndex = 0;
  final List<Widget> _screens = const [
    PlantIdentificationScreen(),
    PlantCareDashboardScreen(),
    PlantCommunityScreen(),
  ];
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: _screens,
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) => setState(() => _currentIndex = index),
        type: BottomNavigationBarType.fixed,
        selectedItemColor: theme.primaryColor,
        unselectedItemColor: Colors.grey[600],
        backgroundColor: Colors.white,
        elevation: 8,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.camera_alt_outlined),
            activeIcon: Icon(Icons.camera_alt),
            label: 'Identify',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.eco_outlined),
            activeIcon: Icon(Icons.eco),
            label: 'My Plants',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.people_outline),
            activeIcon: Icon(Icons.people),
            label: 'Community',
          ),
        ],
      ),
    );
  }
}
// Alternative grid-based layout for plant features
class PlantFeaturesGridScreen extends ConsumerWidget {
  const PlantFeaturesGridScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Plant Features'),
        elevation: 0,
        backgroundColor: Colors.transparent,
        foregroundColor: theme.colorScheme.onSurface,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Discover & Care for Plants',
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.onSurface,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Identify plants, track care, and connect with fellow plant lovers',
              style: theme.textTheme.bodyLarge?.copyWith(
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 24),
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                childAspectRatio: 1.1,
                children: [
                  _buildFeatureCard(
                    context,
                    title: 'Plant ID',
                    subtitle: 'Identify any plant with AI',
                    icon: Icons.camera_alt,
                    color: Colors.green,
                    onTap: () => _navigateToIdentification(context),
                  ),
                  _buildFeatureCard(
                    context,
                    title: 'My Plants',
                    subtitle: 'Track care & reminders',
                    icon: Icons.eco,
                    color: Colors.blue,
                    onTap: () => _navigateToPlantCare(context),
                  ),
                  _buildFeatureCard(
                    context,
                    title: 'Q&A',
                    subtitle: 'Ask plant experts',
                    icon: Icons.help_outline,
                    color: Colors.orange,
                    onTap: () => _navigateToQuestions(context),
                  ),
                  _buildFeatureCard(
                    context,
                    title: 'Plant Trades',
                    subtitle: 'Buy, sell & trade plants',
                    icon: Icons.swap_horiz,
                    color: Colors.purple,
                    onTap: () => _navigateToTrades(context),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            // Quick actions
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _navigateToIdentification(context),
                    icon: const Icon(Icons.camera_alt),
                    label: const Text('Identify Plant'),
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () => _navigateToPlantCare(context),
                    icon: const Icon(Icons.add),
                    label: const Text('Add Plant'),
                    style: OutlinedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildFeatureCard(
    BuildContext context, {
    required String title,
    required String subtitle,
    required IconData icon,
    required Color color,
    required VoidCallback onTap,
  }) {
    final theme = Theme.of(context);
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(16),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                color.withOpacity(0.1),
                color.withOpacity(0.05),
              ],
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  icon,
                  size: 28,
                  color: color,
                ),
              ),
              const Spacer(),
              Text(
                title,
                style: theme.textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onSurface,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: theme.textTheme.bodySmall?.copyWith(
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  void _navigateToIdentification(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const PlantIdentificationScreen(),
      ),
    );
  }
  void _navigateToPlantCare(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const PlantCareDashboardScreen(),
      ),
    );
  }
  void _navigateToQuestions(BuildContext context) {
    Navigator.pushNamed(context, '/plant-questions');
  }
  void _navigateToTrades(BuildContext context) {
    Navigator.pushNamed(context, '/plant-trades');
  }
}
</file>

<file path="lib/features/profile/presentation/screens/profile_analytics_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:plant_social/core/widgets/loading_widget.dart';
import 'package:plant_social/core/widgets/error_widget.dart';
class ProfileAnalyticsScreen extends ConsumerStatefulWidget {
  final String userId;
  const ProfileAnalyticsScreen({
    super.key,
    required this.userId,
  });
  @override
  ConsumerState<ProfileAnalyticsScreen> createState() => _ProfileAnalyticsScreenState();
}
class _ProfileAnalyticsScreenState extends ConsumerState<ProfileAnalyticsScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
  }
  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Profile Analytics'),
        backgroundColor: theme.primaryColor,
        foregroundColor: Colors.white,
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Colors.white,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          isScrollable: true,
          tabs: const [
            Tab(text: 'Overview', icon: Icon(Icons.analytics)),
            Tab(text: 'Behavior', icon: Icon(Icons.psychology)),
            Tab(text: 'Community', icon: Icon(Icons.group)),
            Tab(text: 'AI Insights', icon: Icon(Icons.smart_toy)),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildOverviewTab(theme),
          _buildBehaviorTab(theme),
          _buildCommunityTab(theme),
          _buildAIInsightsTab(theme),
        ],
      ),
    );
  }
  Widget _buildOverviewTab(ThemeData theme) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Profile Health Score
          _buildProfileHealthCard(theme),
          const SizedBox(height: 16),
          // Activity Overview
          _buildActivityOverviewCard(theme),
          const SizedBox(height: 16),
          // Recent Achievements
          _buildRecentAchievementsCard(theme),
          const SizedBox(height: 16),
          // Quick Stats Grid
          _buildQuickStatsGrid(theme),
        ],
      ),
    );
  }
  Widget _buildBehaviorTab(ThemeData theme) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Engagement Patterns
          _buildEngagementPatternsCard(theme),
          const SizedBox(height: 16),
          // Content Preferences
          _buildContentPreferencesCard(theme),
          const SizedBox(height: 16),
          // Activity Timeline
          _buildActivityTimelineCard(theme),
          const SizedBox(height: 16),
          // Interaction Heatmap
          _buildInteractionHeatmapCard(theme),
        ],
      ),
    );
  }
  Widget _buildCommunityTab(ThemeData theme) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Community Matching Analytics
          _buildCommunityMatchingCard(theme),
          const SizedBox(height: 16),
          // Influence Metrics
          _buildInfluenceMetricsCard(theme),
          const SizedBox(height: 16),
          // Interest Alignment
          _buildInterestAlignmentCard(theme),
          const SizedBox(height: 16),
          // Geographic Distribution
          _buildGeographicDistributionCard(theme),
        ],
      ),
    );
  }
  Widget _buildAIInsightsTab(ThemeData theme) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // RAG Interaction Insights
          _buildRAGInsightsCard(theme),
          const SizedBox(height: 16),
          // ML Predictions
          _buildMLPredictionsCard(theme),
          const SizedBox(height: 16),
          // Personalization Effectiveness
          _buildPersonalizationCard(theme),
          const SizedBox(height: 16),
          // AI Recommendations
          _buildAIRecommendationsCard(theme),
        ],
      ),
    );
  }
  Widget _buildProfileHealthCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.favorite, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'Profile Health Score',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            // Circular Progress Indicator
            Center(
              child: Stack(
                alignment: Alignment.center,
                children: [
                  SizedBox(
                    width: 120,
                    height: 120,
                    child: CircularProgressIndicator(
                      value: 0.87, // Mock data - would come from backend
                      strokeWidth: 12,
                      backgroundColor: Colors.grey[200],
                      valueColor: AlwaysStoppedAnimation<Color>(
                        theme.primaryColor,
                      ),
                    ),
                  ),
                  Column(
                    children: [
                      Text(
                        '87',
                        style: theme.textTheme.headlineMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: theme.primaryColor,
                        ),
                      ),
                      Text(
                        'Excellent',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),
            // Health Factors
            _buildHealthFactors(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildHealthFactors(ThemeData theme) {
    final factors = [
      {'name': 'Profile Completeness', 'score': 95, 'color': Colors.green},
      {'name': 'Community Engagement', 'score': 78, 'color': Colors.blue},
      {'name': 'Content Quality', 'score': 89, 'color': Colors.orange},
      {'name': 'Plant Care Success', 'score': 92, 'color': Colors.teal},
    ];
    return Column(
      children: factors.map((factor) {
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 4),
          child: Row(
            children: [
              Expanded(
                flex: 3,
                child: Text(
                  factor['name'] as String,
                  style: theme.textTheme.bodyMedium,
                ),
              ),
              Expanded(
                flex: 2,
                child: LinearProgressIndicator(
                  value: (factor['score'] as int) / 100,
                  backgroundColor: Colors.grey[200],
                  valueColor: AlwaysStoppedAnimation<Color>(
                    factor['color'] as Color,
                  ),
                ),
              ),
              const SizedBox(width: 8),
              SizedBox(
                width: 30,
                child: Text(
                  '${factor['score']}',
                  style: theme.textTheme.bodySmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        );
      }).toList(),
    );
  }
  Widget _buildActivityOverviewCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Activity Overview',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            // Activity Chart
            SizedBox(
              height: 200,
              child: LineChart(
                LineChartData(
                  gridData: FlGridData(show: false),
                  titlesData: FlTitlesData(
                    leftTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                    topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                    rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                    bottomTitles: AxisTitles(
                      sideTitles: SideTitles(
                        showTitles: true,
                        getTitlesWidget: (value, meta) {
                          const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
                          if (value.toInt() >= 0 && value.toInt() < days.length) {
                            return Text(
                              days[value.toInt()],
                              style: theme.textTheme.bodySmall,
                            );
                          }
                          return const Text('');
                        },
                      ),
                    ),
                  ),
                  borderData: FlBorderData(show: false),
                  lineBarsData: [
                    LineChartBarData(
                      spots: [
                        FlSpot(0, 3.5),
                        FlSpot(1, 4.2),
                        FlSpot(2, 3.8),
                        FlSpot(3, 5.1),
                        FlSpot(4, 4.7),
                        FlSpot(5, 5.8),
                        FlSpot(6, 4.9),
                      ],
                      isCurved: true,
                      color: theme.primaryColor,
                      barWidth: 3,
                      dotData: FlDotData(show: false),
                      belowBarData: BarAreaData(
                        show: true,
                        color: theme.primaryColor.withOpacity(0.1),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildEngagementPatternsCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Engagement Patterns',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            // Peak Activity Times
            _buildPeakActivityTimes(theme),
            const SizedBox(height: 16),
            // Content Type Preferences
            _buildContentTypePreferences(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildPeakActivityTimes(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Peak Activity Times',
          style: theme.textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        // Time slots with activity levels
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildTimeSlot(theme, 'Morning', 0.7, '6-12'),
            _buildTimeSlot(theme, 'Afternoon', 0.4, '12-18'),
            _buildTimeSlot(theme, 'Evening', 0.9, '18-24'),
            _buildTimeSlot(theme, 'Night', 0.2, '24-6'),
          ],
        ),
      ],
    );
  }
  Widget _buildTimeSlot(ThemeData theme, String label, double activity, String hours) {
    return Column(
      children: [
        Stack(
          alignment: Alignment.bottomCenter,
          children: [
            Container(
              width: 40,
              height: 60,
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            Container(
              width: 40,
              height: 60 * activity,
              decoration: BoxDecoration(
                color: theme.primaryColor,
                borderRadius: BorderRadius.circular(4),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Text(
          label,
          style: theme.textTheme.bodySmall?.copyWith(
            fontWeight: FontWeight.w500,
          ),
        ),
        Text(
          hours,
          style: theme.textTheme.bodySmall?.copyWith(
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }
  Widget _buildContentTypePreferences(ThemeData theme) {
    final preferences = [
      {'type': 'Plant Care Tips', 'percentage': 85, 'color': Colors.green},
      {'type': 'Community Q&A', 'percentage': 72, 'color': Colors.blue},
      {'type': 'Plant Trades', 'percentage': 58, 'color': Colors.orange},
      {'type': 'Plant Stories', 'percentage': 67, 'color': Colors.purple},
    ];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Content Type Preferences',
          style: theme.textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        ...preferences.map((pref) {
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 4),
            child: Row(
              children: [
                Container(
                  width: 12,
                  height: 12,
                  decoration: BoxDecoration(
                    color: pref['color'] as Color,
                    shape: BoxShape.circle,
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    pref['type'] as String,
                    style: theme.textTheme.bodyMedium,
                  ),
                ),
                Text(
                  '${pref['percentage']}%',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
  Widget _buildRAGInsightsCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.smart_toy, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'RAG Interaction Insights',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // RAG Statistics
            _buildRAGStatistics(theme),
            const SizedBox(height: 16),
            // Query Topics
            _buildQueryTopics(theme),
            const SizedBox(height: 16),
            // Response Quality
            _buildResponseQuality(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildRAGStatistics(ThemeData theme) {
    return Row(
      children: [
        Expanded(
          child: _buildStatCard(theme, 'Total Queries', '2,847'),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildStatCard(theme, 'Avg. Confidence', '87.3%'),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildStatCard(theme, 'Success Rate', '94.2%'),
        ),
      ],
    );
  }
  Widget _buildStatCard(ThemeData theme, String label, String value) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: theme.primaryColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Text(
            value,
            style: theme.textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
              color: theme.primaryColor,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: theme.textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  Widget _buildQueryTopics(ThemeData theme) {
    final topics = [
      {'topic': 'Plant Health', 'percentage': 32},
      {'topic': 'Watering Care', 'percentage': 28},
      {'topic': 'Pest Control', 'percentage': 18},
      {'topic': 'Fertilization', 'percentage': 14},
      {'topic': 'Propagation', 'percentage': 8},
    ];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Most Queried Topics',
          style: theme.textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        ...topics.map((topic) {
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 4),
            child: Row(
              children: [
                Expanded(
                  flex: 3,
                  child: Text(
                    topic['topic'] as String,
                    style: theme.textTheme.bodyMedium,
                  ),
                ),
                Expanded(
                  flex: 4,
                  child: LinearProgressIndicator(
                    value: (topic['percentage'] as int) / 100,
                    backgroundColor: Colors.grey[200],
                    valueColor: AlwaysStoppedAnimation<Color>(theme.primaryColor),
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  '${topic['percentage']}%',
                  style: theme.textTheme.bodySmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
  Widget _buildResponseQuality(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Response Quality Metrics',
          style: theme.textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: Column(
                children: [
                  Text(
                    '4.7',
                    style: theme.textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: theme.primaryColor,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Avg. Rating',
                    style: theme.textTheme.bodySmall,
                  ),
                  const SizedBox(height: 8),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: List.generate(5, (index) {
                      return Icon(
                        index < 5 ? Icons.star : Icons.star_border,
                        color: Colors.amber,
                        size: 16,
                      );
                    }),
                  ),
                ],
              ),
            ),
            Container(
              width: 1,
              height: 60,
              color: Colors.grey[300],
            ),
            Expanded(
              child: Column(
                children: [
                  Text(
                    '92%',
                    style: theme.textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: Colors.green,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Helpfulness',
                    style: theme.textTheme.bodySmall,
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }
  Widget _buildMLPredictionsCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.psychology, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'ML Prediction Analytics',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // Prediction Accuracy
            _buildPredictionAccuracy(theme),
            const SizedBox(height: 16),
            // Model Performance
            _buildModelPerformance(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildPredictionAccuracy(ThemeData theme) {
    final predictions = [
      {'model': 'Plant Health', 'accuracy': 87, 'predictions': 245},
      {'model': 'Care Optimization', 'accuracy': 92, 'predictions': 189},
      {'model': 'Risk Assessment', 'accuracy': 84, 'predictions': 156},
      {'model': 'Success Predictor', 'accuracy': 89, 'predictions': 134},
    ];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Prediction Model Performance',
          style: theme.textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        ...predictions.map((pred) {
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 6),
            child: Row(
              children: [
                Expanded(
                  flex: 3,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        pred['model'] as String,
                        style: theme.textTheme.bodyMedium?.copyWith(
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      Text(
                        '${pred['predictions']} predictions',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ),
                Expanded(
                  flex: 2,
                  child: LinearProgressIndicator(
                    value: (pred['accuracy'] as int) / 100,
                    backgroundColor: Colors.grey[200],
                    valueColor: AlwaysStoppedAnimation<Color>(
                      _getAccuracyColor(pred['accuracy'] as int),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  '${pred['accuracy']}%',
                  style: theme.textTheme.bodySmall?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: _getAccuracyColor(pred['accuracy'] as int),
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
  Color _getAccuracyColor(int accuracy) {
    if (accuracy >= 90) return Colors.green;
    if (accuracy >= 80) return Colors.orange;
    return Colors.red;
  }
  Widget _buildModelPerformance(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[200]!),
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _buildPerformanceMetric(theme, 'F1 Score', '0.89'),
              _buildPerformanceMetric(theme, 'Precision', '0.92'),
              _buildPerformanceMetric(theme, 'Recall', '0.86'),
            ],
          ),
        ],
      ),
    );
  }
  Widget _buildPerformanceMetric(ThemeData theme, String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
            color: theme.primaryColor,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: theme.textTheme.bodySmall,
        ),
      ],
    );
  }
  // Placeholder methods for other cards
  Widget _buildRecentAchievementsCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Recent Achievements',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildAchievementItems(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildQuickStatsGrid(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Quick Stats',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            _buildStatsGrid(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildActivityTimelineCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Activity Timeline',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildTimelineItems(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildInteractionHeatmapCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Interaction Heatmap',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            _buildHeatmapVisualization(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildCommunityMatchingCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Community Matching Analytics',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildCommunityMatchingData(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildInfluenceMetricsCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Influence Metrics',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildInfluenceMetricsData(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildInterestAlignmentCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Interest Alignment',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildInterestAlignmentData(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildGeographicDistributionCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Geographic Distribution',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildGeographicData(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildPersonalizationCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Personalization Effectiveness',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildPersonalizationData(theme),
          ],
        ),
      ),
    );
  }
  Widget _buildAIRecommendationsCard(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'AI Recommendations',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildAIRecommendationsData(theme),
          ],
        ),
      ),
    );
  }
  List<Widget> _buildAchievementItems(ThemeData theme) {
    final achievements = [
      {'name': 'Plant Parent', 'progress': 0.8, 'icon': Icons.local_florist, 'color': Colors.green},
      {'name': 'Community Helper', 'progress': 0.6, 'icon': Icons.people_alt, 'color': Colors.blue},
      {'name': 'Green Thumb', 'progress': 0.9, 'icon': Icons.thumb_up, 'color': Colors.orange},
      {'name': 'Knowledge Seeker', 'progress': 0.4, 'icon': Icons.school, 'color': Colors.purple},
    ];
    return achievements.map((achievement) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(achievement['icon'] as IconData, color: achievement['color'] as Color, size: 20),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  achievement['name'] as String,
                  style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
                ),
                LinearProgressIndicator(
                  value: achievement['progress'] as double,
                  backgroundColor: Colors.grey[200],
                  valueColor: AlwaysStoppedAnimation<Color>(achievement['color'] as Color),
                ),
              ],
            ),
          ),
          Text(
            '${((achievement['progress'] as double) * 100).toInt()}%',
            style: theme.textTheme.bodySmall?.copyWith(color: Colors.grey[600]),
          ),
        ],
      ),
    )).toList();
  }
  Widget _buildStatsGrid(ThemeData theme) {
    final stats = [
      {'label': 'Plants', 'value': '23', 'icon': Icons.local_florist, 'color': Colors.green},
      {'label': 'Friends', 'value': '47', 'icon': Icons.people, 'color': Colors.blue},
      {'label': 'Posts', 'value': '156', 'icon': Icons.photo_camera, 'color': Colors.purple},
      {'label': 'Answers', 'value': '89', 'icon': Icons.question_answer, 'color': Colors.orange},
    ];
    return GridView.count(
      crossAxisCount: 2,
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisSpacing: 12,
      mainAxisSpacing: 12,
      childAspectRatio: 2.5,
      children: stats.map((stat) => Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: (stat['color'] as Color).withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: (stat['color'] as Color).withValues(alpha: 0.3)),
        ),
        child: Row(
          children: [
            Icon(stat['icon'] as IconData, color: stat['color'] as Color, size: 20),
            const SizedBox(width: 8),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    stat['value'] as String,
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: stat['color'] as Color,
                    ),
                  ),
                  Text(
                    stat['label'] as String,
                    style: theme.textTheme.bodySmall,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
      )).toList(),
    );
  }
  List<Widget> _buildTimelineItems(ThemeData theme) {
    final activities = [
      {'time': '2h ago', 'action': 'Shared plant story', 'icon': Icons.photo_camera, 'color': Colors.purple},
      {'time': '1d ago', 'action': 'Answered question', 'icon': Icons.question_answer, 'color': Colors.blue},
      {'time': '2d ago', 'action': 'Added new plant', 'icon': Icons.local_florist, 'color': Colors.green},
      {'time': '3d ago', 'action': 'Made new friend', 'icon': Icons.people, 'color': Colors.orange},
    ];
    return activities.map((activity) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Container(
            width: 24,
            height: 24,
            decoration: BoxDecoration(
              color: (activity['color'] as Color).withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              activity['icon'] as IconData,
              color: activity['color'] as Color,
              size: 14,
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              activity['action'] as String,
              style: theme.textTheme.bodySmall,
            ),
          ),
          Text(
            activity['time'] as String,
            style: theme.textTheme.bodySmall?.copyWith(color: Colors.grey[600]),
          ),
        ],
      ),
    )).toList();
  }
  Widget _buildHeatmapVisualization(ThemeData theme) {
    final days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
    final values = [0.3, 0.7, 0.5, 0.9, 0.6, 0.8, 0.4];
    return Column(
      children: [
        Text('Weekly Activity Pattern', style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.bold)),
        const SizedBox(height: 8),
        ...List.generate(days.length, (index) => Padding(
          padding: const EdgeInsets.symmetric(vertical: 2),
          child: Row(
            children: [
              SizedBox(width: 24, child: Text(days[index], style: theme.textTheme.bodySmall)),
              const SizedBox(width: 8),
              Expanded(
                child: Container(
                  height: 16,
                  decoration: BoxDecoration(
                    color: Colors.grey[200],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: FractionallySizedBox(
                    alignment: Alignment.centerLeft,
                    widthFactor: values[index],
                    child: Container(
                      decoration: BoxDecoration(
                        color: theme.primaryColor,
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        )),
      ],
    );
  }
  List<Widget> _buildCommunityMatchingData(ThemeData theme) {
    final matches = [
      {'name': 'Plant Enthusiasts', 'score': 0.92, 'members': 156},
      {'name': 'Succulent Lovers', 'score': 0.78, 'members': 89},
      {'name': 'Indoor Gardeners', 'score': 0.85, 'members': 234},
    ];
    return matches.map((match) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(match['name'] as String, style: theme.textTheme.bodyMedium),
                Text('${match['members']} members', style: theme.textTheme.bodySmall?.copyWith(color: Colors.grey[600])),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: theme.primaryColor.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              '${((match['score'] as double) * 100).toInt()}%',
              style: theme.textTheme.bodySmall?.copyWith(
                color: theme.primaryColor,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    )).toList();
  }
  List<Widget> _buildInfluenceMetricsData(ThemeData theme) {
    final metrics = [
      {'metric': 'Helpfulness Score', 'value': 4.8, 'icon': Icons.star},
      {'metric': 'Content Quality', 'value': 9.2, 'icon': Icons.quality_vote},
      {'metric': 'Community Impact', 'value': 7.6, 'icon': Icons.trending_up},
    ];
    return metrics.map((metric) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(metric['icon'] as IconData, color: theme.primaryColor, size: 20),
          const SizedBox(width: 8),
          Expanded(
            child: Text(metric['metric'] as String, style: theme.textTheme.bodyMedium),
          ),
          Text(
            metric['value'].toString(),
            style: theme.textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: theme.primaryColor,
            ),
          ),
        ],
      ),
    )).toList();
  }
  List<Widget> _buildInterestAlignmentData(ThemeData theme) {
    final interests = [
      {'interest': 'Indoor Plants', 'alignment': 0.95, 'color': Colors.green},
      {'interest': 'Plant Care', 'alignment': 0.87, 'color': Colors.blue},
      {'interest': 'Gardening Tips', 'alignment': 0.73, 'color': Colors.orange},
    ];
    return interests.map((interest) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(interest['interest'] as String, style: theme.textTheme.bodyMedium),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: LinearProgressIndicator(
              value: interest['alignment'] as double,
              backgroundColor: Colors.grey[200],
              valueColor: AlwaysStoppedAnimation<Color>(interest['color'] as Color),
            ),
          ),
          const SizedBox(width: 8),
          Text(
            '${((interest['alignment'] as double) * 100).toInt()}%',
            style: theme.textTheme.bodySmall,
          ),
        ],
      ),
    )).toList();
  }
  List<Widget> _buildGeographicData(ThemeData theme) {
    final locations = [
      {'city': 'San Francisco', 'connections': 23, 'icon': Icons.location_city},
      {'city': 'New York', 'connections': 18, 'icon': Icons.location_city},
      {'city': 'Los Angeles', 'connections': 15, 'icon': Icons.location_city},
    ];
    return locations.map((location) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(location['icon'] as IconData, color: theme.primaryColor, size: 20),
          const SizedBox(width: 8),
          Expanded(
            child: Text(location['city'] as String, style: theme.textTheme.bodyMedium),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
            decoration: BoxDecoration(
              color: theme.primaryColor.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(10),
            ),
            child: Text(
              '${location['connections']} friends',
              style: theme.textTheme.bodySmall?.copyWith(color: theme.primaryColor),
            ),
          ),
        ],
      ),
    )).toList();
  }
  List<Widget> _buildPersonalizationData(ThemeData theme) {
    final metrics = [
      {'metric': 'Content Relevance', 'score': 0.89, 'trend': '+12%'},
      {'metric': 'Recommendation Accuracy', 'score': 0.76, 'trend': '+8%'},
      {'metric': 'Engagement Prediction', 'score': 0.82, 'trend': '+15%'},
    ];
    return metrics.map((metric) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Expanded(
            child: Text(metric['metric'] as String, style: theme.textTheme.bodyMedium),
          ),
          Text(
            '${((metric['score'] as double) * 100).toInt()}%',
            style: theme.textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: theme.primaryColor,
            ),
          ),
          const SizedBox(width: 8),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
            decoration: BoxDecoration(
              color: Colors.green.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              metric['trend'] as String,
              style: theme.textTheme.bodySmall?.copyWith(
                color: Colors.green[700],
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    )).toList();
  }
  List<Widget> _buildAIRecommendationsData(ThemeData theme) {
    final recommendations = [
      {'title': 'Try fertilizing your Monstera', 'confidence': 0.91, 'type': 'Care Tip'},
      {'title': 'Connect with Sarah about succulents', 'confidence': 0.84, 'type': 'Social'},
      {'title': 'Check out trending air plants', 'confidence': 0.77, 'type': 'Discovery'},
    ];
    return recommendations.map((rec) => Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: theme.primaryColor.withValues(alpha: 0.05),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: theme.primaryColor.withValues(alpha: 0.2)),
        ),
        child: Row(
          children: [
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    rec['title'] as String,
                    style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
                  ),
                  Text(
                    rec['type'] as String,
                    style: theme.textTheme.bodySmall?.copyWith(color: Colors.grey[600]),
                  ),
                ],
              ),
            ),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: theme.primaryColor,
                borderRadius: BorderRadius.circular(10),
              ),
              child: Text(
                '${((rec['confidence'] as double) * 100).toInt()}%',
                style: theme.textTheme.bodySmall?.copyWith(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
      ),
    )).toList();
  }
}
</file>

<file path="lib/features/profile/presentation/screens/profile_edit_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../../../core/models/user.dart';
import '../../../auth/providers/auth_provider.dart';
/// Profile edit screen for updating user information
class ProfileEditScreen extends ConsumerStatefulWidget {
  const ProfileEditScreen({super.key});
  @override
  ConsumerState<ProfileEditScreen> createState() => _ProfileEditScreenState();
}
class _ProfileEditScreenState extends ConsumerState<ProfileEditScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _bioController = TextEditingController();
  final _locationController = TextEditingController();
  final _websiteController = TextEditingController();
  bool _isLoading = false;
  bool _hasChanges = false;
  bool _controllersInitialized = false;
  @override
  void initState() {
    super.initState();
    // Add listeners to detect changes
    _nameController.addListener(_onFieldChanged);
    _bioController.addListener(_onFieldChanged);
    _locationController.addListener(_onFieldChanged);
    _websiteController.addListener(_onFieldChanged);
  }
  @override
  void dispose() {
    _nameController.dispose();
    _bioController.dispose();
    _locationController.dispose();
    _websiteController.dispose();
    super.dispose();
  }
  void _initializeControllers(WidgetRef ref) {
    final authState = ref.read(authProvider);
    // Initialize with mock data for demonstration
    _nameController.text = authState?.user?.displayName ?? 'Plant Lover';
    _bioController.text = 'Passionate about plants and sustainable living 🌱\nSharing my green journey with fellow plant enthusiasts!';
    _locationController.text = 'San Francisco, CA';
    _websiteController.text = 'https://myplantblog.com';
  }
  void _onFieldChanged() {
    if (!_hasChanges) {
      setState(() {
        _hasChanges = true;
      });
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    // Initialize controllers with ref access
    if (!_controllersInitialized) {
      _initializeControllers(ref);
      _controllersInitialized = true;
    }
    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Profile'),
        leading: IconButton(
          onPressed: () => _handleBackPress(context),
          icon: const Icon(Icons.close),
        ),
        actions: [
          TextButton(
            onPressed: _hasChanges && !_isLoading ? _saveProfile : null,
            child: _isLoading
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  )
                : const Text('Save'),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Profile picture section
              _buildProfilePictureSection(theme),
              const SizedBox(height: 32),
              // Basic information
              _buildBasicInfoSection(theme),
              const SizedBox(height: 24),
              // Bio section
              _buildBioSection(theme),
              const SizedBox(height: 24),
              // Contact information
              _buildContactInfoSection(theme),
              const SizedBox(height: 24),
              // Privacy settings
              _buildPrivacySection(theme),
              const SizedBox(height: 32),
              // Danger zone
              _buildDangerZone(theme),
            ],
          ),
        ),
      ),
    );
  }
  Widget _buildProfilePictureSection(ThemeData theme) {
    return Center(
      child: Column(
        children: [
          Stack(
            children: [
              CircleAvatar(
                radius: 60,
                backgroundColor: theme.colorScheme.primary,
                child: Text(
                  _nameController.text.split(' ').map((name) => name.isNotEmpty ? name[0] : '').join(),
                  style: TextStyle(
                    fontSize: 36,
                    fontWeight: FontWeight.bold,
                    color: theme.colorScheme.onPrimary,
                  ),
                ),
              ),
              Positioned(
                bottom: 0,
                right: 0,
                child: Container(
                  decoration: BoxDecoration(
                    color: theme.colorScheme.primary,
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: theme.colorScheme.surface,
                      width: 2,
                    ),
                  ),
                  child: IconButton(
                    onPressed: _changeProfilePicture,
                    icon: Icon(
                      Icons.camera_alt,
                      color: theme.colorScheme.onPrimary,
                      size: 20,
                    ),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          TextButton(
            onPressed: _changeProfilePicture,
            child: const Text('Change Profile Picture'),
          ),
        ],
      ),
    );
  }
  Widget _buildBasicInfoSection(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Basic Information',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _nameController,
          decoration: const InputDecoration(
            labelText: 'Display Name',
            hintText: 'Enter your display name',
            prefixIcon: Icon(Icons.person),
          ),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Display name is required';
            }
            if (value.trim().length < 2) {
              return 'Display name must be at least 2 characters';
            }
            return null;
          },
          textCapitalization: TextCapitalization.words,
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _locationController,
          decoration: const InputDecoration(
            labelText: 'Location',
            hintText: 'Enter your location',
            prefixIcon: Icon(Icons.location_on),
          ),
          textCapitalization: TextCapitalization.words,
        ),
      ],
    );
  }
  Widget _buildBioSection(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Bio',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _bioController,
          decoration: InputDecoration(
            labelText: 'Bio',
            hintText: 'Tell others about yourself and your plant journey...',
            prefixIcon: const Icon(Icons.info_outline),
            alignLabelWithHint: true,
            helperText: '${_bioController.text.length}/500 characters',
          ),
          maxLines: 4,
          maxLength: 500,
          validator: (value) {
            if (value != null && value.length > 500) {
              return 'Bio must be 500 characters or less';
            }
            return null;
          },
          textCapitalization: TextCapitalization.sentences,
        ),
      ],
    );
  }
  Widget _buildContactInfoSection(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Contact Information',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _websiteController,
          decoration: const InputDecoration(
            labelText: 'Website',
            hintText: 'https://yourwebsite.com',
            prefixIcon: Icon(Icons.link),
          ),
          keyboardType: TextInputType.url,
          validator: (value) {
            if (value != null && value.isNotEmpty) {
              final urlPattern = r'^https?:\/\/.+';
              if (!RegExp(urlPattern).hasMatch(value)) {
                return 'Please enter a valid URL starting with http:// or https://';
              }
            }
            return null;
          },
        ),
      ],
    );
  }
  Widget _buildPrivacySection(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Privacy Settings',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                _buildPrivacyOption(
                  'Private Account',
                  'Only approved followers can see your posts',
                  false,
                  (value) {
                    setState(() {
                      _hasChanges = true;
                    });
                    _showComingSoon('Private Account');
                  },
                ),
                const Divider(),
                _buildPrivacyOption(
                  'Show Activity Status',
                  'Let others see when you\'re active',
                  true,
                  (value) {
                    setState(() {
                      _hasChanges = true;
                    });
                    _showComingSoon('Activity Status');
                  },
                ),
                const Divider(),
                _buildPrivacyOption(
                  'Allow Plant Identification',
                  'Let others identify plants in your photos',
                  true,
                  (value) {
                    setState(() {
                      _hasChanges = true;
                    });
                    _showComingSoon('Plant Identification');
                  },
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
  Widget _buildPrivacyOption(
    String title,
    String subtitle,
    bool value,
    ValueChanged<bool> onChanged,
  ) {
    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(fontWeight: FontWeight.w500),
              ),
              Text(
                subtitle,
                style: TextStyle(
                  fontSize: 12,
                  color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
                ),
              ),
            ],
          ),
        ),
        Switch(
          value: value,
          onChanged: onChanged,
        ),
      ],
    );
  }
  Widget _buildDangerZone(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Danger Zone',
          style: theme.textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.bold,
            color: Colors.red,
          ),
        ),
        const SizedBox(height: 16),
        Card(
          color: Colors.red.shade50,
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.warning,
                      color: Colors.red.shade700,
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Delete Account',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.red.shade700,
                            ),
                          ),
                          Text(
                            'Permanently delete your account and all data',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.red.shade600,
                            ),
                          ),
                        ],
                      ),
                    ),
                    OutlinedButton(
                      onPressed: _showDeleteAccountDialog,
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.red.shade700,
                        side: BorderSide(color: Colors.red.shade700),
                      ),
                      child: const Text('Delete'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
  void _changeProfilePicture() {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Change Profile Picture',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildImageSourceOption(
                  Icons.camera_alt,
                  'Camera',
                  () {
                    Navigator.pop(context);
                    _showComingSoon('Camera');
                  },
                ),
                _buildImageSourceOption(
                  Icons.photo_library,
                  'Gallery',
                  () {
                    Navigator.pop(context);
                    _showComingSoon('Gallery');
                  },
                ),
                _buildImageSourceOption(
                  Icons.delete,
                  'Remove',
                  () {
                    Navigator.pop(context);
                    _showComingSoon('Remove Photo');
                  },
                ),
              ],
            ),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
  Widget _buildImageSourceOption(
    IconData icon,
    String label,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              icon,
              color: Theme.of(context).colorScheme.primary,
              size: 24,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: const TextStyle(fontSize: 12),
          ),
        ],
      ),
    );
  }
  void _handleBackPress(BuildContext context) {
    if (_hasChanges) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Discard Changes?'),
          content: const Text(
            'You have unsaved changes. Are you sure you want to discard them?',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                Navigator.pop(context); // Close dialog
                context.pop(); // Go back
              },
              child: const Text('Discard'),
            ),
          ],
        ),
      );
    } else {
      context.pop();
    }
  }
  Future<void> _saveProfile() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }
    setState(() {
      _isLoading = true;
    });
    try {
      // Simulate API call
      await Future.delayed(const Duration(seconds: 2));
      if (mounted) {
        setState(() {
          _hasChanges = false;
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Profile updated successfully!'),
            backgroundColor: Colors.green,
          ),
        );
        context.pop();
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to update profile: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  void _showDeleteAccountDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text(
          'Delete Account',
          style: TextStyle(color: Colors.red),
        ),
        content: const Text(
          'This action cannot be undone. All your data, including posts, plants, and connections will be permanently deleted.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _showComingSoon('Account Deletion');
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }
  void _showComingSoon(String feature) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
                          content: Text('$feature feature ready to use!'),
        action: SnackBarAction(
          label: 'OK',
          onPressed: () {},
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/profile/presentation/screens/profile_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../../../core/models/user.dart';
import '../../../auth/providers/auth_provider.dart';
/// Profile screen displaying user information and settings
class ProfileScreen extends ConsumerWidget {
  const ProfileScreen({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final authState = ref.watch(authProvider);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Profile'),
        actions: [
          IconButton(
            onPressed: () => context.push('/profile/edit'),
            icon: const Icon(Icons.edit),
            tooltip: 'Edit Profile',
          ),
          PopupMenuButton<String>(
            onSelected: (value) => _handleMenuAction(context, ref, value),
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'settings',
                child: Row(
                  children: [
                    Icon(Icons.settings),
                    SizedBox(width: 8),
                    Text('Settings'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'privacy',
                child: Row(
                  children: [
                    Icon(Icons.privacy_tip),
                    SizedBox(width: 8),
                    Text('Privacy'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'help',
                child: Row(
                  children: [
                    Icon(Icons.help),
                    SizedBox(width: 8),
                    Text('Help & Support'),
                  ],
                ),
              ),
              const PopupMenuDivider(),
              const PopupMenuItem(
                value: 'logout',
                child: Row(
                  children: [
                    Icon(Icons.logout, color: Colors.red),
                    SizedBox(width: 8),
                    Text('Logout', style: TextStyle(color: Colors.red)),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      body: _buildBody(context, theme, authState, ref),
    );
  }
  Widget _buildBody(BuildContext context, ThemeData theme, AuthState authState, WidgetRef ref) {
    if (authState.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    if (authState.error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error, size: 64, color: Colors.red),
            const SizedBox(height: 16),
            Text('Error loading profile: ${authState.error}'),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => ref.refresh(authProvider),
              child: const Text('Retry'),
            ),
          ],
        ),
      );
    }
    return _buildProfileContent(context, theme, authState);
  }
  Widget _buildProfileContent(BuildContext context, ThemeData theme, AuthState state) {
    // Mock user data for demonstration
    final mockUser = MockUser(
      id: state.user?.id ?? 'user1',
      name: state.user?.displayName ?? 'Plant Lover',
      email: state.user?.email ?? 'plantlover@example.com',
      bio: 'Passionate about plants and sustainable living 🌱\nSharing my green journey with fellow plant enthusiasts!',
      location: 'San Francisco, CA',
      joinDate: DateTime(2023, 1, 15),
      followersCount: 1247,
      followingCount: 892,
      postsCount: 156,
      plantsCount: 23,
    );
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Profile header
          _buildProfileHeader(context, theme, mockUser),
          const SizedBox(height: 24),
          // Stats section
          _buildStatsSection(theme, mockUser),
          const SizedBox(height: 24),
          // Bio section
          _buildBioSection(theme, mockUser),
          const SizedBox(height: 24),
          // Quick actions
          _buildQuickActions(context, theme),
          const SizedBox(height: 24),
          // Recent activity
          _buildRecentActivity(theme),
        ],
      ),
    );
  }
  Widget _buildProfileHeader(BuildContext context, ThemeData theme, MockUser user) {
    return Column(
      children: [
        // Profile picture
        Stack(
          children: [
            CircleAvatar(
              radius: 60,
              backgroundColor: theme.colorScheme.primary,
              child: Text(
                user.displayName.split(' ').map((name) => name[0]).join(),
                style: TextStyle(
                  fontSize: 36,
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onPrimary,
                ),
              ),
            ),
            Positioned(
              bottom: 0,
              right: 0,
              child: Container(
                decoration: BoxDecoration(
                  color: theme.colorScheme.primary,
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: theme.colorScheme.surface,
                    width: 2,
                  ),
                ),
                child: IconButton(
                  onPressed: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Change profile picture (Demo mode)'),
                      ),
                    );
                  },
                  icon: Icon(
                    Icons.camera_alt,
                    color: theme.colorScheme.onPrimary,
                    size: 20,
                  ),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        // Name and verification
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              user.displayName,
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(width: 8),
            Icon(
              Icons.verified,
              color: theme.colorScheme.primary,
              size: 20,
            ),
          ],
        ),
        const SizedBox(height: 4),
        // Email
        Text(
          user.email,
          style: theme.textTheme.bodyMedium?.copyWith(
            color: theme.colorScheme.onSurface.withOpacity(0.7),
          ),
        ),
        const SizedBox(height: 8),
        // Location and join date
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.location_on,
              size: 16,
              color: theme.colorScheme.onSurface.withOpacity(0.7),
            ),
            const SizedBox(width: 4),
            Text(
              user.location,
              style: theme.textTheme.bodySmall?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
            const SizedBox(width: 16),
            Icon(
              Icons.calendar_today,
              size: 16,
              color: theme.colorScheme.onSurface.withOpacity(0.7),
            ),
            const SizedBox(width: 4),
            Text(
              'Joined ${_formatJoinDate(user.joinDate)}',
              style: theme.textTheme.bodySmall?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
          ],
        ),
      ],
    );
  }
  Widget _buildStatsSection(ThemeData theme, MockUser user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildStatItem(theme, 'Posts', user.postsCount.toString()),
            _buildStatDivider(theme),
            _buildStatItem(theme, 'Plants', user.plantsCount.toString()),
            _buildStatDivider(theme),
            _buildStatItem(theme, 'Followers', _formatCount(user.followersCount)),
            _buildStatDivider(theme),
            _buildStatItem(theme, 'Following', _formatCount(user.followingCount)),
          ],
        ),
      ),
    );
  }
  Widget _buildStatItem(ThemeData theme, String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: theme.textTheme.titleLarge?.copyWith(
            fontWeight: FontWeight.bold,
            color: theme.colorScheme.primary,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: theme.textTheme.bodySmall?.copyWith(
            color: theme.colorScheme.onSurface.withOpacity(0.7),
          ),
        ),
      ],
    );
  }
  Widget _buildStatDivider(ThemeData theme) {
    return Container(
      height: 40,
      width: 1,
      color: theme.colorScheme.outline.withOpacity(0.3),
    );
  }
  Widget _buildBioSection(ThemeData theme, MockUser user) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.info_outline,
                  color: theme.colorScheme.primary,
                ),
                const SizedBox(width: 8),
                Text(
                  'About',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              user.bio,
              style: theme.textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildQuickActions(BuildContext context, ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Quick Actions',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildActionButton(
                  context,
                  theme,
                  Icons.eco,
                  'My Plants',
                  () => _showComingSoon(context, 'My Plants'),
                ),
                _buildActionButton(
                  context,
                  theme,
                  Icons.bookmark,
                  'Saved',
                  () => _showComingSoon(context, 'Saved Posts'),
                ),
                _buildActionButton(
                  context,
                  theme,
                  Icons.analytics,
                  'Insights',
                  () => _showProfileInsights(context),
                ),
                _buildActionButton(
                  context,
                  theme,
                  Icons.share,
                  'Share',
                  () => _showShareProfile(context),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildActionButton(
    BuildContext context,
    ThemeData theme,
    IconData icon,
    String label,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: theme.colorScheme.primary.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              icon,
              color: theme.colorScheme.primary,
              size: 24,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: theme.textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  Widget _buildRecentActivity(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Recent Activity',
              style: theme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            ..._buildActivityItems(theme),
          ],
        ),
      ),
    );
  }
  List<Widget> _buildActivityItems(ThemeData theme) {
    final activities = [
      ('Posted a new plant photo', '2 hours ago', Icons.camera_alt),
      ('Liked 5 posts', '1 day ago', Icons.favorite),
      ('Added new plant to collection', '3 days ago', Icons.eco),
      ('Followed 3 new gardeners', '1 week ago', Icons.person_add),
    ];
    return activities.map((activity) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: theme.colorScheme.primary.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                activity.$3,
                color: theme.colorScheme.primary,
                size: 16,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    activity.$1,
                    style: theme.textTheme.bodyMedium,
                  ),
                  Text(
                    activity.$2,
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: theme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      );
    }).toList();
  }
  void _handleMenuAction(BuildContext context, WidgetRef ref, String action) {
    switch (action) {
      case 'settings':
        _showComingSoon(context, 'Settings');
        break;
      case 'privacy':
        _showComingSoon(context, 'Privacy Settings');
        break;
      case 'help':
        _showComingSoon(context, 'Help & Support');
        break;
      case 'logout':
        _showLogoutDialog(context, ref);
        break;
    }
  }
  void _showComingSoon(BuildContext context, String feature) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
                          content: Text('$feature functionality activated!'),
        action: SnackBarAction(
          label: 'OK',
          onPressed: () {},
        ),
      ),
    );
  }
  void _showProfileInsights(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.9,
        maxChildSize: 0.95,
        minChildSize: 0.5,
        expand: false,
        builder: (context, scrollController) {
          return _buildProfileInsightsSheet(context, scrollController);
        },
      ),
    );
  }
  Widget _buildProfileInsightsSheet(BuildContext context, ScrollController scrollController) {
    final theme = Theme.of(context);
    // Mock analytics data - would come from backend API calls
    final mockAnalyticsData = {
      'profile_health_score': 0.87,
      'engagement_score': 0.82,
      'ml_health_data': {
        'overall_health_score': 0.89,
        'risk_level': 'low',
        'model_confidence': 0.94,
        'feature_scores': {
          'activity_consistency': 0.91,
          'content_quality': 0.85,
          'community_interaction': 0.78,
          'learning_engagement': 0.88,
        },
        'predictions': {
          'next_week_engagement': 0.86,
          'content_success_rate': 0.82,
        }
      },
      'rag_insights': {
        'total_queries': 147,
        'success_rate': 96,
        'avg_response_time': 234,
        'recent_topics': ['Plant Care', 'Disease Treatment', 'Fertilizers', 'Watering'],
        'response_quality': 0.93,
        'knowledge_coverage': {
          'Plant Care': 92.0,
          'Disease Treatment': 78.0,
          'Nutrition': 85.0,
        }
      },
      'community_data': {
        'avg_similarity_score': 0.73,
        'total_matches': 28,
        'top_interests': [
          {'interest': 'Indoor Gardening', 'percentage': 82},
          {'interest': 'Sustainable Living', 'percentage': 67},
          {'interest': 'Plant Photography', 'percentage': 54},
        ],
        'influence_score': 2.8,
      }
    };
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        children: [
          // Handle
          Container(
            width: 40,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 12),
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          // Header
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Row(
              children: [
                Icon(Icons.analytics, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'Profile Analytics & Insights',
                  style: theme.textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            ),
          ),
          const Divider(),
          // Content
          Expanded(
            child: SingleChildScrollView(
              controller: scrollController,
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Profile Health Overview
                  _buildProfileHealthOverview(theme, mockAnalyticsData),
                  const SizedBox(height: 20),
                  // ML Health Analytics
                  _buildMLHealthAnalytics(theme, mockAnalyticsData['ml_health_data'] as Map<String, dynamic>),
                  const SizedBox(height: 20),
                  // RAG Knowledge Insights
                  _buildRAGKnowledgeInsights(theme, mockAnalyticsData['rag_insights'] as Map<String, dynamic>),
                  const SizedBox(height: 20),
                  // Community Analytics
                  _buildCommunityAnalytics(theme, mockAnalyticsData['community_data'] as Map<String, dynamic>),
                  const SizedBox(height: 20),
                  // Behavior Patterns
                  _buildBehaviorPatterns(theme),
                  const SizedBox(height: 20),
                  // Recommendations
                  _buildRecommendations(theme),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildProfileHealthOverview(ThemeData theme, Map<String, dynamic> data) {
    final healthScore = data['profile_health_score'] ?? 0.87;
    final engagementScore = data['engagement_score'] ?? 0.82;
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.favorite, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'Profile Health Overview',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: Column(
                    children: [
                      Text(
                        '${(healthScore * 100).toInt()}%',
                        style: theme.textTheme.headlineMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.green,
                        ),
                      ),
                      Text(
                        'Profile Health',
                        style: theme.textTheme.bodySmall,
                      ),
                    ],
                  ),
                ),
                Container(width: 1, height: 40, color: Colors.grey[300]),
                Expanded(
                  child: Column(
                    children: [
                      Text(
                        '${(engagementScore * 100).toInt()}%',
                        style: theme.textTheme.headlineMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: theme.primaryColor,
                        ),
                      ),
                      Text(
                        'Engagement',
                        style: theme.textTheme.bodySmall,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildMLHealthAnalytics(ThemeData theme, Map<String, dynamic> data) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.psychology, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'ML Behavior Analytics',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              'Behavioral Factors',
              style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 8),
            ...(data['feature_scores'] as Map<String, dynamic>).entries.map((entry) {
              final score = entry.value as double;
              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 4),
                child: Row(
                  children: [
                    Expanded(
                      flex: 2,
                      child: Text(
                        _formatFeatureName(entry.key),
                        style: theme.textTheme.bodySmall,
                      ),
                    ),
                    Expanded(
                      flex: 3,
                      child: LinearProgressIndicator(
                        value: score,
                        backgroundColor: Colors.grey[200],
                        valueColor: AlwaysStoppedAnimation<Color>(
                          score >= 0.8 ? Colors.green : score >= 0.6 ? Colors.orange : Colors.red,
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),
                    Text(
                      '${(score * 100).toInt()}%',
                      style: theme.textTheme.bodySmall?.copyWith(fontWeight: FontWeight.w500),
                    ),
                  ],
                ),
              );
            }).toList(),
          ],
        ),
      ),
    );
  }
  Widget _buildRAGKnowledgeInsights(ThemeData theme, Map<String, dynamic> data) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.smart_toy, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'Knowledge Interaction Insights',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(child: _buildInsightMetric(theme, 'Queries', '${data['total_queries']}')),
                Expanded(child: _buildInsightMetric(theme, 'Success Rate', '${data['success_rate']}%')),
                Expanded(child: _buildInsightMetric(theme, 'Quality', '${(data['response_quality'] * 100).toInt()}%')),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              'Recent Query Topics',
              style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              runSpacing: 4,
              children: (data['recent_topics'] as List<dynamic>).map<Widget>((topic) {
                return Chip(
                  label: Text(topic.toString(), style: theme.textTheme.bodySmall),
                  backgroundColor: theme.primaryColor.withValues(alpha: 0.1),
                  side: BorderSide(color: theme.primaryColor.withValues(alpha: 0.3)),
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildCommunityAnalytics(ThemeData theme, Map<String, dynamic> data) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.group, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'Community Connection Analytics',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Community Match Score',
                        style: theme.textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),
                      ),
                      Text(
                        '${(data['avg_similarity_score'] * 100).toInt()}%',
                        style: theme.textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: theme.primaryColor,
                        ),
                      ),
                    ],
                  ),
                ),
                Column(
                  children: [
                    Text('Similar Users', style: theme.textTheme.bodySmall),
                    Text('${data['total_matches']}', style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold)),
                  ],
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              'Top Shared Interests',
              style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 8),
            ...(data['top_interests'] as List<dynamic>).map<Widget>((interest) {
              final interestData = interest as Map<String, dynamic>;
              return Chip(
                label: Text(
                  '${interestData['interest']} ${interestData['percentage']}%',
                  style: theme.textTheme.bodySmall,
                ),
                backgroundColor: theme.primaryColor.withValues(alpha: 0.1),
                side: BorderSide(color: theme.primaryColor.withValues(alpha: 0.3)),
              );
            }).toList(),
          ],
        ),
      ),
    );
  }
  Widget _buildBehaviorPatterns(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.timeline, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'Activity Patterns',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              'Peak Activity Times',
              style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildActivityTime(theme, 'Morning', 0.7),
                _buildActivityTime(theme, 'Afternoon', 0.4),
                _buildActivityTime(theme, 'Evening', 0.9),
                _buildActivityTime(theme, 'Night', 0.2),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildActivityTime(ThemeData theme, String label, double activity) {
    return Column(
      children: [
        Stack(
          alignment: Alignment.bottomCenter,
          children: [
            Container(
              width: 30,
              height: 50,
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            Container(
              width: 30,
              height: 50 * activity,
              decoration: BoxDecoration(
                color: theme.primaryColor,
                borderRadius: BorderRadius.circular(4),
              ),
            ),
          ],
        ),
        const SizedBox(height: 4),
        Text(label, style: theme.textTheme.bodySmall),
      ],
    );
  }
  Widget _buildRecommendations(ThemeData theme) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.lightbulb, color: theme.primaryColor),
                const SizedBox(width: 8),
                Text(
                  'AI Recommendations',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildRecommendationItem(theme, 'Increase morning engagement', 'Your activity is highest in evenings. Try morning interactions to boost consistency.'),
            _buildRecommendationItem(theme, 'Explore fertilizer topics', 'Based on your interests, you might enjoy learning about organic fertilizers.'),
            _buildRecommendationItem(theme, 'Connect with similar users', 'We found 8 users with 85%+ similar interests. Consider following them!'),
          ],
        ),
      ),
    );
  }
  Widget _buildRecommendationItem(ThemeData theme, String title, String description) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: 8,
            height: 8,
            margin: const EdgeInsets.only(top: 6),
            decoration: BoxDecoration(
              color: theme.primaryColor,
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  description,
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildInsightMetric(ThemeData theme, String label, String value) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[200]!),
      ),
      child: Column(
        children: [
          Text(
            value,
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: theme.primaryColor,
            ),
          ),
          Text(
            label,
            style: theme.textTheme.bodySmall,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  String _formatFeatureName(String key) {
    return key.split('_').map((word) => 
      word[0].toUpperCase() + word.substring(1)
    ).join(' ');
  }
  void _showShareProfile(BuildContext context) {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'Share Profile',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
                  _buildSharingInterface(context, theme),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Close'),
            ),
          ],
        ),
      ),
    );
  }
  void _showLogoutDialog(BuildContext context, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Logout'),
        content: const Text('Are you sure you want to logout?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              ref.read(authProvider.notifier).logout();
              context.go('/login');
            },
            child: const Text('Logout'),
          ),
        ],
      ),
    );
  }
  String _formatJoinDate(DateTime date) {
    final months = [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ];
    return '${months[date.month - 1]} ${date.year}';
  }
  String _formatCount(int count) {
    if (count >= 1000000) {
      return '${(count / 1000000).toStringAsFixed(1)}M';
    } else if (count >= 1000) {
      return '${(count / 1000).toStringAsFixed(1)}K';
    }
    return count.toString();
  }
  Widget _buildSharingInterface(BuildContext context, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Share Your Plant Journey',
          style: theme.textTheme.titleSmall?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: _buildShareOption(
                context,
                'QR Code',
                Icons.qr_code,
                'Quick profile share',
                () => _shareViaQR(context),
              ),
            ),
            const SizedBox(width: 8),
            Expanded(
              child: _buildShareOption(
                context,
                'Link',
                Icons.link,
                'Share profile URL',
                () => _shareViaLink(context),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Row(
          children: [
            Expanded(
              child: _buildShareOption(
                context,
                'Social Media',
                Icons.share,
                'Post to social networks',
                () => _shareToSocial(context),
              ),
            ),
            const SizedBox(width: 8),
            Expanded(
              child: _buildShareOption(
                context,
                'Plant Card',
                Icons.local_florist,
                'Share plant collection',
                () => _sharePlantCard(context),
              ),
            ),
          ],
        ),
      ],
    );
  }
  Widget _buildShareOption(BuildContext context, String title, IconData icon, String subtitle, VoidCallback onTap) {
    final theme = Theme.of(context);
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: theme.primaryColor.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: theme.primaryColor.withValues(alpha: 0.3)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, color: theme.primaryColor, size: 24),
            const SizedBox(height: 4),
            Text(
              title,
              style: theme.textTheme.bodySmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            Text(
              subtitle,
              style: theme.textTheme.bodySmall?.copyWith(
                color: Colors.grey[600],
                fontSize: 10,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
  void _shareViaQR(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('QR Code'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 200,
              height: 200,
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Icon(Icons.qr_code, size: 100),
            ),
            const SizedBox(height: 16),
            const Text('Scan to view my plant profile!'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Close'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('QR code saved to gallery!')),
              );
            },
            child: const Text('Save'),
          ),
        ],
      ),
    );
  }
  void _shareViaLink(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Profile link copied to clipboard!'),
        action: SnackBarAction(
          label: 'Share',
          onPressed: null,
        ),
      ),
    );
  }
  void _shareToSocial(BuildContext context) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Share to Social Media',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildSocialShareButton('Instagram', Icons.camera_alt, Colors.purple),
                _buildSocialShareButton('Facebook', Icons.facebook, Colors.blue),
                _buildSocialShareButton('Twitter', Icons.alternate_email, Colors.lightBlue),
                _buildSocialShareButton('TikTok', Icons.music_note, Colors.black),
              ],
            ),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
  Widget _buildSocialShareButton(String platform, IconData icon, Color color) {
    return Column(
      children: [
        Container(
          width: 60,
          height: 60,
          decoration: BoxDecoration(
            color: color.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(30),
            border: Border.all(color: color.withValues(alpha: 0.3)),
          ),
          child: Icon(icon, color: color, size: 30),
        ),
        const SizedBox(height: 4),
        Text(platform, style: const TextStyle(fontSize: 12)),
      ],
    );
  }
  void _sharePlantCard(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Creating shareable plant collection card...'),
        action: SnackBarAction(
          label: 'Preview',
          onPressed: null,
        ),
      ),
    );
  }
}
/// Mock user model for demonstration
class MockUser {
  final String id;
  final String name;
  final String email;
  final String bio;
  final String location;
  final DateTime joinDate;
  final int followersCount;
  final int followingCount;
  final int postsCount;
  final int plantsCount;
  MockUser({
    required this.id,
    required this.name,
    required this.email,
    required this.bio,
    required this.location,
    required this.joinDate,
    required this.followersCount,
    required this.followingCount,
    required this.postsCount,
    required this.plantsCount,
  });
  String get displayName => name;
}
</file>

<file path="lib/features/stories/presentation/screens/stories_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
/// Stories screen displaying user stories in a feed format
class StoriesScreen extends ConsumerStatefulWidget {
  const StoriesScreen({super.key});
  @override
  ConsumerState<StoriesScreen> createState() => _StoriesScreenState();
}
class _StoriesScreenState extends ConsumerState<StoriesScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  final _scrollController = ScrollController();
  bool _isLoading = false;
  bool _hasMore = true;
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _scrollController.addListener(_onScroll);
  }
  @override
  void dispose() {
    _tabController.dispose();
    _scrollController.dispose();
    super.dispose();
  }
  void _onScroll() {
    if (_scrollController.position.pixels >=
        _scrollController.position.maxScrollExtent - 200) {
      _loadMoreStories();
    }
  }
  void _loadMoreStories() async {
    if (_isLoading || !_hasMore) return;
    setState(() {
      _isLoading = true;
    });
    // Simulate loading more stories
    await Future.delayed(const Duration(seconds: 1));
    if (mounted) {
      setState(() {
        _isLoading = false;
        // Simulate no more stories after some loads
        _hasMore = DateTime.now().millisecond % 3 != 0;
      });
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Stories'),
        actions: [
          IconButton(
            onPressed: () => context.push('/home/camera/story-creation'),
            icon: const Icon(Icons.add_circle_outline),
            tooltip: 'Create Story',
          ),
          PopupMenuButton<String>(
            onSelected: _handleMenuAction,
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'archive',
                child: Row(
                  children: [
                    Icon(Icons.archive),
                    SizedBox(width: 8),
                    Text('Story Archive'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'settings',
                child: Row(
                  children: [
                    Icon(Icons.settings),
                    SizedBox(width: 8),
                    Text('Story Settings'),
                  ],
                ),
              ),
            ],
          ),
        ],
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(text: 'Following'),
            Tab(text: 'Explore'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildFollowingTab(),
          _buildExploreTab(),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.push('/home/camera'),
        child: const Icon(Icons.camera_alt),
        tooltip: 'Create Story',
      ),
    );
  }
  Widget _buildFollowingTab() {
    final stories = _getMockFollowingStories();
    if (stories.isEmpty) {
      return _buildEmptyState(
        Icons.people_outline,
        'No stories from friends',
        'When your friends share stories, they\'ll appear here',
        actionLabel: 'Explore Stories',
        onAction: () => _tabController.animateTo(1),
      );
    }
    return CustomScrollView(
      controller: _scrollController,
      slivers: [
        // Active stories row
        SliverToBoxAdapter(
          child: _buildActiveStoriesRow(),
        ),
        // Stories grid
        SliverPadding(
          padding: const EdgeInsets.all(16),
          sliver: SliverGrid(
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
              childAspectRatio: 0.75,
            ),
            delegate: SliverChildBuilderDelegate(
              (context, index) {
                if (index < stories.length) {
                  return _buildStoryCard(stories[index]);
                }
                return null;
              },
              childCount: stories.length,
            ),
          ),
        ),
        // Loading indicator
        if (_isLoading)
          const SliverToBoxAdapter(
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Center(child: CircularProgressIndicator()),
            ),
          ),
      ],
    );
  }
  Widget _buildExploreTab() {
    final stories = _getMockExploreStories();
    return CustomScrollView(
      slivers: [
        // Trending section
        SliverToBoxAdapter(
          child: _buildTrendingSection(),
        ),
        // Explore grid
        SliverPadding(
          padding: const EdgeInsets.all(16),
          sliver: SliverGrid(
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
              childAspectRatio: 0.75,
            ),
            delegate: SliverChildBuilderDelegate(
              (context, index) {
                if (index < stories.length) {
                  return _buildStoryCard(stories[index]);
                }
                return null;
              },
              childCount: stories.length,
            ),
          ),
        ),
      ],
    );
  }
  Widget _buildActiveStoriesRow() {
    final activeStories = _getMockActiveStories();
    return Container(
      height: 120,
      padding: const EdgeInsets.symmetric(vertical: 16),
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        padding: const EdgeInsets.symmetric(horizontal: 16),
        itemCount: activeStories.length + 1, // +1 for "Your Story" button
        itemBuilder: (context, index) {
          if (index == 0) {
            return _buildYourStoryButton();
          }
          return _buildActiveStoryItem(activeStories[index - 1]);
        },
      ),
    );
  }
  Widget _buildYourStoryButton() {
    final theme = Theme.of(context);
    return Container(
      width: 80,
      margin: const EdgeInsets.only(right: 12),
      child: Column(
        children: [
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(
                color: theme.colorScheme.primary,
                width: 2,
              ),
            ),
            child: IconButton(
              onPressed: () => context.push('/home/camera'),
              icon: Icon(
                Icons.add,
                color: theme.colorScheme.primary,
              ),
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'Your Story',
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  Widget _buildActiveStoryItem(MockStory story) {
    final theme = Theme.of(context);
    return Container(
      width: 80,
      margin: const EdgeInsets.only(right: 12),
      child: GestureDetector(
        onTap: () => context.push('/story/${story.id}'),
        child: Column(
          children: [
            Container(
              width: 60,
              height: 60,
              padding: const EdgeInsets.all(2),
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: LinearGradient(
                  colors: story.isViewed
                      ? [Colors.grey, Colors.grey]
                      : [theme.colorScheme.primary, theme.colorScheme.secondary],
                ),
              ),
              child: Container(
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: theme.colorScheme.surface,
                  border: Border.all(
                    color: theme.colorScheme.surface,
                    width: 2,
                  ),
                ),
                child: CircleAvatar(
                  backgroundColor: theme.colorScheme.primary,
                  child: Text(
                    story.userName.split(' ').map((name) => name[0]).join(),
                    style: TextStyle(
                      color: theme.colorScheme.onPrimary,
                      fontWeight: FontWeight.bold,
                      fontSize: 14,
                    ),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              story.userName.split(' ').first,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w500,
                color: story.isViewed
                    ? theme.colorScheme.onSurface.withOpacity(0.6)
                    : theme.colorScheme.onSurface,
              ),
              textAlign: TextAlign.center,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildTrendingSection() {
    final theme = Theme.of(context);
    final trendingTopics = ['#PlantCare', '#SucculentLove', '#IndoorGarden', '#PlantParent'];
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Trending Topics',
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: trendingTopics.map((topic) {
              return GestureDetector(
                onTap: () => _searchByTopic(topic),
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: theme.colorScheme.primary.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: theme.colorScheme.primary.withOpacity(0.3),
                    ),
                  ),
                  child: Text(
                    topic,
                    style: TextStyle(
                      color: theme.colorScheme.primary,
                      fontWeight: FontWeight.w500,
                      fontSize: 12,
                    ),
                  ),
                ),
              );
            }).toList(),
          ),
        ],
      ),
    );
  }
  Widget _buildStoryCard(MockStory story) {
    final theme = Theme.of(context);
    return GestureDetector(
      onTap: () => context.push('/story/${story.id}'),
      child: Card(
        clipBehavior: Clip.antiAlias,
        child: Stack(
          children: [
            // Story background
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      theme.colorScheme.primary.withOpacity(0.7),
                      theme.colorScheme.secondary.withOpacity(0.7),
                    ],
                  ),
                ),
                child: const Center(
                  child: Icon(
                    Icons.eco,
                    size: 60,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
            // Gradient overlay
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      Colors.transparent,
                      Colors.black.withOpacity(0.7),
                    ],
                  ),
                ),
              ),
            ),
            // Story info
            Positioned(
              left: 12,
              right: 12,
              bottom: 12,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  // User info
                  Row(
                    children: [
                      CircleAvatar(
                        radius: 12,
                        backgroundColor: Colors.white,
                        child: Text(
                          story.userName.split(' ').map((name) => name[0]).join(),
                          style: TextStyle(
                            color: theme.colorScheme.primary,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          story.userName,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  // Caption
                  if (story.caption.isNotEmpty)
                    Text(
                      story.caption,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 11,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  const SizedBox(height: 4),
                  // Stats
                  Row(
                    children: [
                      Icon(
                        Icons.visibility,
                        color: Colors.white.withOpacity(0.8),
                        size: 12,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        '${story.viewCount}',
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.8),
                          fontSize: 10,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Icon(
                        Icons.favorite,
                        color: Colors.white.withOpacity(0.8),
                        size: 12,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        '${story.likeCount}',
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.8),
                          fontSize: 10,
                        ),
                      ),
                      const Spacer(),
                      Text(
                        _formatTimestamp(story.timestamp),
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.8),
                          fontSize: 10,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            // Viewed indicator
            if (story.isViewed)
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.5),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Icon(
                    Icons.check,
                    color: Colors.white,
                    size: 12,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
  Widget _buildEmptyState(
    IconData icon,
    String title,
    String subtitle, {
    String? actionLabel,
    VoidCallback? onAction,
  }) {
    final theme = Theme.of(context);
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              size: 80,
              color: theme.colorScheme.onSurface.withOpacity(0.3),
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: theme.textTheme.headlineSmall?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.7),
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              subtitle,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface.withOpacity(0.5),
              ),
              textAlign: TextAlign.center,
            ),
            if (actionLabel != null && onAction != null) ...[
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: onAction,
                child: Text(actionLabel),
              ),
            ],
          ],
        ),
      ),
    );
  }
  List<MockStory> _getMockActiveStories() {
    return [
      MockStory(
        id: 'active1',
        userId: 'user1',
        userName: 'Alice Green',
        caption: '',
        timestamp: DateTime.now().subtract(const Duration(hours: 2)),
        viewCount: 24,
        likeCount: 8,
        isViewed: false,
      ),
      MockStory(
        id: 'active2',
        userId: 'user2',
        userName: 'Bob Plant',
        caption: '',
        timestamp: DateTime.now().subtract(const Duration(hours: 4)),
        viewCount: 15,
        likeCount: 5,
        isViewed: true,
      ),
      MockStory(
        id: 'active3',
        userId: 'user3',
        userName: 'Carol Bloom',
        caption: '',
        timestamp: DateTime.now().subtract(const Duration(hours: 6)),
        viewCount: 32,
        likeCount: 12,
        isViewed: false,
      ),
    ];
  }
  List<MockStory> _getMockFollowingStories() {
    return [
      MockStory(
        id: 'following1',
        userId: 'user1',
        userName: 'Alice Green',
        caption: 'My succulent garden is thriving! 🌵✨',
        timestamp: DateTime.now().subtract(const Duration(hours: 2)),
        viewCount: 24,
        likeCount: 8,
        isViewed: false,
      ),
      MockStory(
        id: 'following2',
        userId: 'user2',
        userName: 'Bob Plant',
        caption: 'New additions to my indoor jungle 🌿',
        timestamp: DateTime.now().subtract(const Duration(hours: 4)),
        viewCount: 15,
        likeCount: 5,
        isViewed: true,
      ),
      MockStory(
        id: 'following3',
        userId: 'user3',
        userName: 'Carol Bloom',
        caption: 'Spring flowers are blooming beautifully 🌸',
        timestamp: DateTime.now().subtract(const Duration(hours: 6)),
        viewCount: 32,
        likeCount: 12,
        isViewed: false,
      ),
      MockStory(
        id: 'following4',
        userId: 'user4',
        userName: 'David Leaf',
        caption: 'Harvesting fresh herbs from my garden 🌱',
        timestamp: DateTime.now().subtract(const Duration(hours: 8)),
        viewCount: 18,
        likeCount: 7,
        isViewed: false,
      ),
    ];
  }
  List<MockStory> _getMockExploreStories() {
    return [
      MockStory(
        id: 'explore1',
        userId: 'explore_user1',
        userName: 'Plant Expert',
        caption: 'Tips for caring for your monstera 🌿 #PlantCare',
        timestamp: DateTime.now().subtract(const Duration(hours: 1)),
        viewCount: 156,
        likeCount: 42,
        isViewed: false,
      ),
      MockStory(
        id: 'explore2',
        userId: 'explore_user2',
        userName: 'Garden Guru',
        caption: 'Amazing succulent arrangement ideas 🌵 #SucculentLove',
        timestamp: DateTime.now().subtract(const Duration(hours: 3)),
        viewCount: 89,
        likeCount: 28,
        isViewed: false,
      ),
      MockStory(
        id: 'explore3',
        userId: 'explore_user3',
        userName: 'Indoor Gardener',
        caption: 'Creating the perfect indoor garden space 🏠 #IndoorGarden',
        timestamp: DateTime.now().subtract(const Duration(hours: 5)),
        viewCount: 203,
        likeCount: 67,
        isViewed: false,
      ),
      MockStory(
        id: 'explore4',
        userId: 'explore_user4',
        userName: 'Plant Parent',
        caption: 'My plant babies are growing so fast! 🌱 #PlantParent',
        timestamp: DateTime.now().subtract(const Duration(hours: 7)),
        viewCount: 124,
        likeCount: 35,
        isViewed: false,
      ),
    ];
  }
  void _handleMenuAction(String action) {
    switch (action) {
      case 'archive':
        _showComingSoon('Story Archive');
        break;
      case 'settings':
        _showComingSoon('Story Settings');
        break;
    }
  }
  void _searchByTopic(String topic) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Searching for $topic stories (Demo mode)'),
      ),
    );
  }
  void _showComingSoon(String feature) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
                          content: Text('$feature feature now live!'),
        action: SnackBarAction(
          label: 'OK',
          onPressed: () {},
        ),
      ),
    );
  }
  String _formatTimestamp(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    if (difference.inMinutes < 1) {
      return 'now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes}m';
    } else if (difference.inDays < 1) {
      return '${difference.inHours}h';
    } else {
      return '${difference.inDays}d';
    }
  }
}
/// Mock story model for demonstration
class MockStory {
  final String id;
  final String userId;
  final String userName;
  final String caption;
  final DateTime timestamp;
  final int viewCount;
  final int likeCount;
  final bool isViewed;
  MockStory({
    required this.id,
    required this.userId,
    required this.userName,
    required this.caption,
    required this.timestamp,
    required this.viewCount,
    required this.likeCount,
    this.isViewed = false,
  });
}
</file>

<file path="lib/features/stories/presentation/screens/story_creation_screen.dart">
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
/// Story creation screen for editing and publishing captured photos
/// Allows users to add captions and create stories from camera captures
class StoryCreationScreen extends ConsumerStatefulWidget {
  final String? imagePath;
  const StoryCreationScreen({
    super.key,
    this.imagePath,
  });
  @override
  ConsumerState<StoryCreationScreen> createState() => _StoryCreationScreenState();
}
class _StoryCreationScreenState extends ConsumerState<StoryCreationScreen> {
  final TextEditingController _captionController = TextEditingController();
  bool _isPublishing = false;
  @override
  void dispose() {
    _captionController.dispose();
    super.dispose();
  }
  /// Publish the story (placeholder implementation)
  Future<void> _publishStory() async {
    if (widget.imagePath == null) return;
    setState(() {
      _isPublishing = true;
    });
    try {
      // Simulate API call delay
      await Future.delayed(const Duration(seconds: 2));
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Story published successfully!'),
            backgroundColor: Colors.green,
          ),
        );
        // Navigate back to home
        context.go('/home');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to publish story: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isPublishing = false;
      });
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          onPressed: () => context.pop(),
          icon: const Icon(Icons.close, color: Colors.white),
        ),
        title: const Text(
          'Create Story',
          style: TextStyle(color: Colors.white),
        ),
        actions: [
          TextButton(
            onPressed: _isPublishing ? null : _publishStory,
            child: _isPublishing
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  )
                : const Text(
                    'Share',
                    style: TextStyle(
                      color: Colors.blue,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
          ),
        ],
      ),
      body: widget.imagePath == null
          ? _buildNoImageState(theme)
          : _buildStoryEditor(theme),
    );
  }
  Widget _buildNoImageState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(
            Icons.photo_camera_outlined,
            size: 64,
            color: Colors.white,
          ),
          const SizedBox(height: 16),
          Text(
            'No Image Selected',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Take a photo to create your story',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: Colors.white70,
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () => context.pop(),
            child: const Text('Take Photo'),
          ),
        ],
      ),
    );
  }
  Widget _buildStoryEditor(ThemeData theme) {
    return Column(
      children: [
        // Image preview
        Expanded(
          child: Container(
            width: double.infinity,
            margin: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.3),
                  blurRadius: 10,
                  offset: const Offset(0, 5),
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.file(
                File(widget.imagePath!),
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    color: Colors.grey[800],
                    child: const Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.error_outline,
                            color: Colors.white,
                            size: 48,
                          ),
                          SizedBox(height: 8),
                          Text(
                            'Failed to load image',
                            style: TextStyle(color: Colors.white),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        ),
        // Caption input and controls
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.grey[900],
            borderRadius: const BorderRadius.vertical(
              top: Radius.circular(20),
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Caption input
              TextField(
                controller: _captionController,
                style: const TextStyle(color: Colors.white),
                maxLines: 3,
                decoration: InputDecoration(
                  hintText: 'Add a caption to your story...',
                  hintStyle: TextStyle(color: Colors.white.withOpacity(0.6)),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.white.withOpacity(0.3)),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.white.withOpacity(0.3)),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: theme.colorScheme.primary),
                  ),
                  filled: true,
                  fillColor: Colors.white.withOpacity(0.1),
                ),
              ),
              const SizedBox(height: 16),
              // Story options
              Row(
                children: [
                  Expanded(
                    child: _buildOptionButton(
                      icon: Icons.public,
                      label: 'Public',
                      isSelected: true,
                      onTap: () {
                        // Handle privacy selection
                      },
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildOptionButton(
                      icon: Icons.people,
                      label: 'Friends',
                      isSelected: false,
                      onTap: () {
                        // Handle privacy selection
                      },
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              // Additional options
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _buildActionButton(
                    icon: Icons.local_florist,
                    label: 'Tag Plants',
                    onTap: () {
                      _showPlantTagDialog(context, theme);
                    },
                  ),
                  _buildActionButton(
                    icon: Icons.location_on,
                    label: 'Add Location',
                    onTap: () {
                      _showLocationTagDialog(context, theme);
                    },
                  ),
                  _buildActionButton(
                    icon: Icons.tune,
                    label: 'Filters',
                    onTap: () {
                      _showFiltersDialog(context, theme);
                    },
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }
  Widget _buildOptionButton({
    required IconData icon,
    required String label,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        decoration: BoxDecoration(
          color: isSelected 
              ? Theme.of(context).colorScheme.primary.withOpacity(0.2)
              : Colors.white.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
            color: isSelected 
                ? Theme.of(context).colorScheme.primary
                : Colors.white.withOpacity(0.3),
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              color: isSelected 
                  ? Theme.of(context).colorScheme.primary
                  : Colors.white,
              size: 20,
            ),
            const SizedBox(width: 8),
            Text(
              label,
              style: TextStyle(
                color: isSelected 
                    ? Theme.of(context).colorScheme.primary
                    : Colors.white,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              icon,
              color: Colors.white,
              size: 24,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }
  void _showPlantTagDialog(BuildContext context, ThemeData theme) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Tag Plants'),
        content: SizedBox(
          width: double.maxFinite,
          height: 300,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Select plants to tag in your story:',
                style: theme.textTheme.bodyMedium,
              ),
              const SizedBox(height: 16),
              Expanded(
                child: ListView(
                  children: [
                    _buildPlantTagItem(theme, 'Monstera Deliciosa', 'Indoor Plant', true),
                    _buildPlantTagItem(theme, 'Peace Lily', 'Flowering Plant', false),
                    _buildPlantTagItem(theme, 'Snake Plant', 'Succulent', false),
                    _buildPlantTagItem(theme, 'Fiddle Leaf Fig', 'Tree', false),
                    _buildPlantTagItem(theme, 'Pothos', 'Vine', true),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Plants tagged successfully!')),
              );
            },
            child: const Text('Done'),
          ),
        ],
      ),
    );
  }
  Widget _buildPlantTagItem(ThemeData theme, String plantName, String category, bool isSelected) {
    return StatefulBuilder(
      builder: (context, setState) {
        return CheckboxListTile(
          title: Text(plantName),
          subtitle: Text(category),
          value: isSelected,
          onChanged: (value) {
            setState(() {
              // Toggle selection
            });
          },
          secondary: CircleAvatar(
            backgroundColor: theme.primaryColor.withValues(alpha: 0.1),
            child: Icon(Icons.local_florist, color: theme.primaryColor),
          ),
        );
      },
    );
  }
  void _showLocationTagDialog(BuildContext context, ThemeData theme) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add Location'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Choose how to add location:',
              style: theme.textTheme.bodyMedium,
            ),
            const SizedBox(height: 16),
            ListTile(
              leading: const Icon(Icons.my_location),
              title: const Text('Use Current Location'),
              subtitle: const Text('GPS location will be used'),
              onTap: () {
                Navigator.of(context).pop();
                _useCurrentLocation();
              },
            ),
            ListTile(
              leading: const Icon(Icons.search),
              title: const Text('Search Location'),
              subtitle: const Text('Search for a specific place'),
              onTap: () {
                Navigator.of(context).pop();
                _showLocationSearchDialog(context, theme);
              },
            ),
            ListTile(
              leading: const Icon(Icons.home),
              title: const Text('Select from Saved'),
              subtitle: const Text('Choose from saved locations'),
              onTap: () {
                Navigator.of(context).pop();
                _showSavedLocationsDialog(context, theme);
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }
  void _useCurrentLocation() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Current location added to story!')),
    );
  }
  void _showLocationSearchDialog(BuildContext context, ThemeData theme) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Search Location'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              decoration: const InputDecoration(
                hintText: 'Search for a place...',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(),
              ),
              onChanged: (value) {
                // Implement search functionality
              },
            ),
            const SizedBox(height: 16),
            SizedBox(
              height: 200,
              child: ListView(
                children: [
                  _buildLocationSearchResult(theme, 'Central Park, New York', 'Park'),
                  _buildLocationSearchResult(theme, 'Brooklyn Botanic Garden', 'Garden'),
                  _buildLocationSearchResult(theme, 'High Line Park', 'Public Garden'),
                  _buildLocationSearchResult(theme, 'The New York Botanical Garden', 'Botanical Garden'),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }
  Widget _buildLocationSearchResult(ThemeData theme, String name, String type) {
    return ListTile(
      leading: const Icon(Icons.place),
      title: Text(name),
      subtitle: Text(type),
      onTap: () {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Location "$name" added to story!')),
        );
      },
    );
  }
  void _showSavedLocationsDialog(BuildContext context, ThemeData theme) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Saved Locations'),
        content: SizedBox(
          width: double.maxFinite,
          height: 200,
          child: ListView(
            children: [
              _buildSavedLocationItem(theme, 'My Garden', 'Home', Icons.home),
              _buildSavedLocationItem(theme, 'Local Nursery', 'Plant Store', Icons.store),
              _buildSavedLocationItem(theme, 'Community Garden', 'Public Space', Icons.group),
              _buildSavedLocationItem(theme, 'Office Plants', 'Workplace', Icons.business),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }
  Widget _buildSavedLocationItem(ThemeData theme, String name, String type, IconData icon) {
    return ListTile(
      leading: Icon(icon, color: theme.primaryColor),
      title: Text(name),
      subtitle: Text(type),
      onTap: () {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Location "$name" added to story!')),
        );
      },
    );
  }
  void _showFiltersDialog(BuildContext context, ThemeData theme) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Apply Filters'),
        content: SizedBox(
          width: double.maxFinite,
          height: 400,
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Brightness & Color',
                  style: theme.textTheme.titleSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                _buildFilterSlider('Brightness', 0.5),
                _buildFilterSlider('Contrast', 0.5),
                _buildFilterSlider('Saturation', 0.5),
                const SizedBox(height: 16),
                Text(
                  'Plant Enhancement',
                  style: theme.textTheme.titleSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                _buildFilterSlider('Green Boost', 0.3),
                _buildFilterSlider('Leaf Detail', 0.4),
                _buildFilterSlider('Natural Light', 0.6),
                const SizedBox(height: 16),
                Text(
                  'Creative Filters',
                  style: theme.textTheme.titleSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  runSpacing: 4,
                  children: [
                    _buildFilterChip('Vintage', false),
                    _buildFilterChip('Warm', true),
                    _buildFilterChip('Cool', false),
                    _buildFilterChip('Dramatic', false),
                    _buildFilterChip('Soft', false),
                    _buildFilterChip('Vibrant', false),
                  ],
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Reset'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Filters applied successfully!')),
              );
            },
            child: const Text('Apply'),
          ),
        ],
      ),
    );
  }
  Widget _buildFilterSlider(String label, double value) {
    return StatefulBuilder(
      builder: (context, setState) {
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(label),
            Slider(
              value: value,
              onChanged: (newValue) {
                setState(() {
                  value = newValue;
                });
              },
            ),
          ],
        );
      },
    );
  }
  Widget _buildFilterChip(String label, bool isSelected) {
    return StatefulBuilder(
      builder: (context, setState) {
        return FilterChip(
          label: Text(label),
          selected: isSelected,
          onSelected: (selected) {
            setState(() {
              isSelected = selected;
            });
          },
        );
      },
    );
  }
}
</file>

<file path="lib/features/stories/presentation/screens/story_viewer_screen.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
/// Story viewer screen for viewing individual stories
/// Displays stories with full-screen media and interaction options
class StoryViewerScreen extends ConsumerStatefulWidget {
  final String storyId;
  final String? userId;
  const StoryViewerScreen({
    super.key,
    required this.storyId,
    this.userId,
  });
  @override
  ConsumerState<StoryViewerScreen> createState() => _StoryViewerScreenState();
}
class _StoryViewerScreenState extends ConsumerState<StoryViewerScreen>
    with TickerProviderStateMixin {
  late AnimationController _progressController;
  bool _isPaused = false;
  bool _showUI = true;
  @override
  void initState() {
    super.initState();
    _progressController = AnimationController(
      duration: const Duration(seconds: 15), // Story duration
      vsync: this,
    );
    _startStoryProgress();
  }
  @override
  void dispose() {
    _progressController.dispose();
    super.dispose();
  }
  /// Start the story progress animation
  void _startStoryProgress() {
    _progressController.forward().then((_) {
      if (mounted) {
        _onStoryComplete();
      }
    });
  }
  /// Handle story completion
  void _onStoryComplete() {
    context.pop();
  }
  /// Toggle pause/play
  void _togglePause() {
    setState(() {
      _isPaused = !_isPaused;
    });
    if (_isPaused) {
      _progressController.stop();
    } else {
      _progressController.forward();
    }
  }
  /// Toggle UI visibility
  void _toggleUI() {
    setState(() {
      _showUI = !_showUI;
    });
  }
  /// Mock story data
  MockStory get _mockStory => MockStory(
    id: widget.storyId,
    userId: widget.userId ?? 'user1',
    userName: 'Alice Green',
    caption: 'My beautiful succulent garden is thriving! 🌵✨ #PlantLife #SucculentLove',
    imageUrl: 'https://example.com/story-image.jpg', // Placeholder
    timestamp: DateTime.now().subtract(const Duration(hours: 2)),
    viewCount: 24,
    isLiked: false,
  );
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final story = _mockStory;
    return Scaffold(
      backgroundColor: Colors.black,
      body: GestureDetector(
        onTap: _toggleUI,
        onLongPressStart: (_) => _togglePause(),
        onLongPressEnd: (_) => _togglePause(),
        child: Stack(
          children: [
            // Story content (placeholder image)
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      Colors.green.shade400,
                      Colors.green.shade700,
                    ],
                  ),
                ),
                child: const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.eco,
                        size: 120,
                        color: Colors.white,
                      ),
                      SizedBox(height: 16),
                      Text(
                        '🌵 Succulent Garden 🌵',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 8),
                      Text(
                        'Demo Story Content',
                        style: TextStyle(
                          color: Colors.white70,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            // Pause indicator
            if (_isPaused)
              const Center(
                child: Icon(
                  Icons.pause_circle_filled,
                  size: 80,
                  color: Colors.white70,
                ),
              ),
            // UI overlay
            if (_showUI) ...[
              // Progress bar
              Positioned(
                top: MediaQuery.of(context).padding.top + 8,
                left: 16,
                right: 16,
                child: AnimatedBuilder(
                  animation: _progressController,
                  builder: (context, child) {
                    return LinearProgressIndicator(
                      value: _progressController.value,
                      backgroundColor: Colors.white.withOpacity(0.3),
                      valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
                    );
                  },
                ),
            ),
              // Header
              Positioned(
                top: MediaQuery.of(context).padding.top + 32,
                left: 16,
                right: 16,
                child: _buildHeader(story, theme),
              ),
              // Caption and interactions
              Positioned(
                bottom: MediaQuery.of(context).padding.bottom + 16,
                left: 16,
                right: 16,
                child: _buildFooter(story, theme),
              ),
            ],
          ],
        ),
      ),
    );
  }
  Widget _buildHeader(MockStory story, ThemeData theme) {
    return Row(
      children: [
        CircleAvatar(
          radius: 20,
          backgroundColor: Colors.white,
          child: Text(
            story.userName.split(' ').map((name) => name[0]).join(),
            style: TextStyle(
              color: theme.colorScheme.primary,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                story.userName,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              Text(
                _formatTimestamp(story.timestamp),
                style: const TextStyle(
                  color: Colors.white70,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),
        IconButton(
          onPressed: () => context.pop(),
          icon: const Icon(
            Icons.close,
            color: Colors.white,
          ),
        ),
      ],
    );
  }
  Widget _buildFooter(MockStory story, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Caption
        if (story.caption.isNotEmpty)
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.5),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              story.caption,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
          ),
        const SizedBox(height: 16),
        // Interaction buttons
        Row(
          children: [
            // Like button
            GestureDetector(
              onTap: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Story liked! (Demo mode)'),
                    duration: Duration(seconds: 1),
                  ),
                );
              },
              child: Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.5),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      story.isLiked ? Icons.favorite : Icons.favorite_border,
                      color: story.isLiked ? Colors.red : Colors.white,
                      size: 20,
                    ),
                    const SizedBox(width: 4),
                    const Text(
                      'Like',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(width: 12),
            // Reply button
            GestureDetector(
              onTap: () {
                _showReplyBottomSheet(context, story);
              },
              child: Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.5),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: const Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      Icons.reply,
                      color: Colors.white,
                      size: 20,
                    ),
                    SizedBox(width: 4),
                    Text(
                      'Reply',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const Spacer(),
            // View count
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.5),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(
                    Icons.visibility,
                    color: Colors.white70,
                    size: 16,
                  ),
                  const SizedBox(width: 4),
                  Text(
                    '${story.viewCount}',
                    style: const TextStyle(
                      color: Colors.white70,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }
  void _showReplyBottomSheet(BuildContext context, MockStory story) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Reply to ${story.userName}',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                hintText: 'Send a message...',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                suffixIcon: IconButton(
                  onPressed: () {
                    Navigator.pop(context);
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Reply sent! (Demo mode)'),
                      ),
                    );
                  },
                  icon: const Icon(Icons.send),
                ),
              ),
              maxLines: 3,
            ),
            SizedBox(height: MediaQuery.of(context).viewInsets.bottom),
          ],
        ),
      ),
    );
  }
  String _formatTimestamp(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    if (difference.inMinutes < 1) {
      return 'now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes}m ago';
    } else if (difference.inDays < 1) {
      return '${difference.inHours}h ago';
    } else {
      return '${difference.inDays}d ago';
    }
  }
}
/// Mock story model for demonstration
class MockStory {
  final String id;
  final String userId;
  final String userName;
  final String caption;
  final String imageUrl;
  final DateTime timestamp;
  final int viewCount;
  final bool isLiked;
  MockStory({
    required this.id,
    required this.userId,
    required this.userName,
    required this.caption,
    required this.imageUrl,
    required this.timestamp,
    required this.viewCount,
    required this.isLiked,
  });
}
</file>

<file path="lib/features/stories/presentation/widgets/stories_bar.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/features/auth/providers/auth_provider.dart';
class StoriesBar extends ConsumerWidget {
  const StoriesBar({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final user = ref.watch(authProvider).user;
    return Container(
      height: 120,
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: ListView(
        scrollDirection: Axis.horizontal,
        children: [
          // Add Story Button
          _buildAddStoryItem(context, theme, user),
          const SizedBox(width: 12),
          // Sample Stories (placeholder)
          ..._buildSampleStories(context, theme),
        ],
      ),
    );
  }
  Widget _buildAddStoryItem(BuildContext context, ThemeData theme, dynamic user) {
    return GestureDetector(
      onTap: () {
        context.go(AppRoutes.camera);
      },
      child: Column(
        children: [
          Container(
            width: 72,
            height: 72,
            decoration: BoxDecoration(
              color: theme.colorScheme.surface,
              shape: BoxShape.circle,
              border: Border.all(
                color: theme.colorScheme.outline.withOpacity(0.3),
                width: 2,
              ),
            ),
            child: Stack(
              children: [
                Center(
                  child: CircleAvatar(
                    radius: 28,
                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),
                    child: Text(
                      user?.initials ?? 'U',
                      style: theme.textTheme.titleMedium?.copyWith(
                        color: theme.colorScheme.primary,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
                Positioned(
                  bottom: 2,
                  right: 2,
                  child: Container(
                    width: 24,
                    height: 24,
                    decoration: BoxDecoration(
                      color: theme.colorScheme.primary,
                      shape: BoxShape.circle,
                      border: Border.all(
                        color: theme.colorScheme.surface,
                        width: 2,
                      ),
                    ),
                    child: Icon(
                      Icons.add,
                      size: 14,
                      color: theme.colorScheme.onPrimary,
                    ),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Your Story',
            style: theme.textTheme.labelSmall?.copyWith(
              color: theme.colorScheme.onSurface,
              fontWeight: FontWeight.w500,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }
  List<Widget> _buildSampleStories(BuildContext context, ThemeData theme) {
    final sampleStories = [
      {'name': 'Alice', 'hasStory': true, 'color': Colors.green},
      {'name': 'Bob', 'hasStory': true, 'color': Colors.blue},
      {'name': 'Carol', 'hasStory': false, 'color': Colors.orange},
      {'name': 'David', 'hasStory': true, 'color': Colors.purple},
      {'name': 'Emma', 'hasStory': false, 'color': Colors.red},
    ];
    return sampleStories.map((story) {
      return Padding(
        padding: const EdgeInsets.only(right: 12),
        child: _buildStoryItem(
          context,
          theme,
          story['name'] as String,
          story['hasStory'] as bool,
          story['color'] as Color,
        ),
      );
    }).toList();
  }
  Widget _buildStoryItem(
    BuildContext context,
    ThemeData theme,
    String name,
    bool hasStory,
    Color avatarColor,
  ) {
    return GestureDetector(
      onTap: () {
        if (hasStory) {
          // TODO: Navigate to story viewer
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Viewing $name\'s story'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        }
      },
      child: Column(
        children: [
          Container(
            width: 72,
            height: 72,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              gradient: hasStory
                  ? LinearGradient(
                      colors: [
                        theme.colorScheme.primary,
                        theme.colorScheme.secondary,
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    )
                  : null,
              border: !hasStory
                  ? Border.all(
                      color: theme.colorScheme.outline.withOpacity(0.3),
                      width: 2,
                    )
                  : null,
            ),
            child: Padding(
              padding: EdgeInsets.all(hasStory ? 3 : 0),
              child: Container(
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  border: hasStory
                      ? Border.all(
                          color: theme.colorScheme.surface,
                          width: 2,
                        )
                      : null,
                ),
                child: CircleAvatar(
                  radius: hasStory ? 31 : 34,
                  backgroundColor: avatarColor.withOpacity(0.2),
                  child: Text(
                    name[0].toUpperCase(),
                    style: theme.textTheme.titleLarge?.copyWith(
                      color: avatarColor,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(height: 8),
          SizedBox(
            width: 72,
            child: Text(
              name,
              style: theme.textTheme.labelSmall?.copyWith(
                color: theme.colorScheme.onSurface,
                fontWeight: FontWeight.w500,
              ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
              textAlign: TextAlign.center,
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/main.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/core/theme/app_theme.dart';
import 'package:plant_social/core/router/app_router.dart';
import 'package:plant_social/core/constants/app_constants.dart';
void main() {
  runApp(
    const ProviderScope(
      child: PlantSocialApp(),
    ),
  );
}
class PlantSocialApp extends ConsumerWidget {
  const PlantSocialApp({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final router = ref.watch(appRouterProvider);
    return MaterialApp.router(
      title: AppConstants.appName,
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,
      themeMode: ThemeMode.system,
      routerConfig: router,
    );
  }
}
</file>

<file path="preview.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plant Social - Preview</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 400px;
            margin: 0 auto;
            background: white;
            min-height: 100vh;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            position: relative;
        }
        .header {
            background: #2E7D32;
            color: white;
            padding: 20px;
            text-align: center;
        }
        .content {
            padding: 20px;
            padding-bottom: 80px;
        }
        .feature-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 16px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-left: 4px solid #4CAF50;
        }
        .feature-title {
            font-size: 18px;
            font-weight: 600;
            color: #2E7D32;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .feature-description {
            color: #666;
            line-height: 1.5;
        }
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 400px;
            background: white;
            border-top: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-around;
            padding: 12px 0;
        }
        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
            padding: 8px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .nav-item.active {
            background: #e8f5e8;
            color: #2E7D32;
        }
        .nav-item:hover {
            background: #f5f5f5;
        }
        .nav-icon {
            font-size: 24px;
        }
        .nav-label {
            font-size: 12px;
            font-weight: 500;
        }
        .status {
            background: #e8f5e8;
            color: #2E7D32;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌱 Plant Social</h1>
            <p>Plant Features Integration Complete</p>
        </div>
        <div class="content">
            <div class="status">
                ✅ Plant Features Successfully Integrated!
            </div>
            <div class="feature-card">
                <div class="feature-title">
                    🔍 Plant Identification
                </div>
                <div class="feature-description">
                    AI-powered plant identification using camera or photo upload. Identify plant species with detailed information.
                </div>
            </div>
            <div class="feature-card">
                <div class="feature-title">
                    🌿 Plant Care Dashboard
                </div>
                <div class="feature-description">
                    Manage your plant collection, track care activities, set reminders, and monitor plant health.
                </div>
            </div>
            <div class="feature-card">
                <div class="feature-title">
                    👥 Plant Community
                </div>
                <div class="feature-description">
                    Connect with other plant enthusiasts, ask questions, share experiences, and trade plants.
                </div>
            </div>
            <div class="feature-card">
                <div class="feature-title">
                    📱 Navigation Integration
                </div>
                <div class="feature-description">
                    Plant features are now accessible through the main app navigation with a dedicated "Plants" tab.
                </div>
            </div>
        </div>
        <div class="bottom-nav">
            <div class="nav-item">
                <div class="nav-icon">🏠</div>
                <div class="nav-label">Home</div>
            </div>
            <div class="nav-item">
                <div class="nav-icon">📷</div>
                <div class="nav-label">Camera</div>
            </div>
            <div class="nav-item">
                <div class="nav-icon">💬</div>
                <div class="nav-label">Chat</div>
            </div>
            <div class="nav-item active">
                <div class="nav-icon">🌸</div>
                <div class="nav-label">Plants</div>
            </div>
            <div class="nav-item">
                <div class="nav-icon">👤</div>
                <div class="nav-label">Profile</div>
            </div>
        </div>
    </div>
</body>
</html>
</file>

<file path="pubspec.yaml">
name: plant_social
description: A plant-focused social messaging platform built with Flutter
publish_to: 'none'
version: 1.0.0+1
environment:
  sdk: '>=3.8.0 <4.0.0'
  flutter: ">=3.0.0"
dependencies:
  flutter:
    sdk: flutter
  freezed_annotation: ^2.4.1
  json_annotation: ^4.8.1
  # State Management
  flutter_riverpod: ^2.4.9
  riverpod_annotation: ^2.3.3
  # UI Components
  cupertino_icons: ^1.0.2
  google_fonts: ^6.1.0
  flutter_svg: ^2.0.9
  cached_network_image: ^3.3.0
  # Navigation
  go_router: ^12.1.3
  # Network & API
  dio: ^5.4.0
  retrofit: ^4.0.3
  # Storage
  flutter_secure_storage: ^9.0.0
  shared_preferences: ^2.2.2
  # Camera & Media
  camera: ^0.10.5+5
  image_picker: ^1.0.4
  video_player: ^2.8.1
  photo_view: ^0.14.0
  # Real-time Communication
  web_socket_channel: ^2.4.0
  # Permissions
  permission_handler: ^11.1.0
  # Utils
  intl: ^0.18.1
  uuid: ^4.2.1
  path_provider: ^2.1.1
  # Image Processing
  image: ^4.1.3
  # Notifications
  flutter_local_notifications: ^16.3.0
  # Location
  geolocator: ^10.1.0
  # Contacts
  contacts_service: ^0.6.3
dev_dependencies:
  flutter_test:
    sdk: flutter
  freezed: ^2.4.6
  json_serializable: ^6.7.1
  # Code Generation
  build_runner: ^2.4.7
  riverpod_generator: ^2.3.9
  retrofit_generator: 9.2.0
  analyzer: 6.11.0
  # Linting
  flutter_lints: ^3.0.0
  # Testing
  mockito: ^5.4.4
  integration_test:
    sdk: flutter
flutter:
  uses-material-design: true
  assets:
    - assets/images/
    - assets/icons/
    - assets/animations/
</file>

<file path="README.md">
# plant_social

A new Flutter project.

## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)

For help getting started with Flutter development, view the
[online documentation](https://docs.flutter.dev/), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
</file>

<file path="test/widget_test.dart">
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:plant_social/main.dart';
void main() {
  testWidgets('App smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(
      const ProviderScope(
        child: PlantSocialApp(),
      ),
    );
    // Verify that the app builds without crashing
    await tester.pumpAndSettle();
    // Basic test to ensure the app loads
    expect(find.byType(MaterialApp), findsOneWidget);
  });
}
</file>

<file path="web/index.html">
<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.
    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.
    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
    This is a placeholder for base href that will be replaced by the value of
    the `--base-href` argument provided to `flutter build`.
  -->
  <base href="$FLUTTER_BASE_HREF">
  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="A new Flutter project.">
  <!-- iOS meta tags & icons -->
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="plant_social">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">
  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>
  <title>plant_social</title>
  <link rel="manifest" href="manifest.json">
</head>
<body>
  <script src="flutter_bootstrap.js" async></script>
</body>
</html>
</file>

<file path="web/manifest.json">
{
    "name": "plant_social",
    "short_name": "plant_social",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}
</file>

</files>
