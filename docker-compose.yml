# Docker Compose Configuration for LeafWise
# Supports development, testing, and production environments
# Includes services for web app, API, database, and monitoring

version: '3.8'

services:
  # Development service
  LeafWise-dev:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: LeafWise-dev
    ports:
      - "19000:19000"  # Expo dev server
      - "19001:19001"  # Expo dev tools
      - "19002:19002"  # Expo tunnel
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - EXPO_PUBLIC_ENV=development
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
    networks:
      - LeafWise-network
    profiles:
      - development

  # Production web service
  LeafWise-web:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
    container_name: LeafWise-web
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - EXPO_PUBLIC_ENV=production
    restart: unless-stopped
    networks:
      - LeafWise-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Staging web service
  LeafWise-staging:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
      args:
        BUILD_ENV: staging
    container_name: LeafWise-staging
    ports:
      - "8081:8080"
    environment:
      - NODE_ENV=production
      - EXPO_PUBLIC_ENV=staging
    restart: unless-stopped
    networks:
      - LeafWise-network
    profiles:
      - staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # CI/CD testing service
  LeafWise-ci:
    build:
      context: .
      target: ci
      dockerfile: Dockerfile
    container_name: LeafWise-ci
    environment:
      - CI=true
      - NODE_ENV=test
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - LeafWise-network
    profiles:
      - ci
    command: >
      sh -c "
        npm run type-check &&
        npm run lint &&
        npm run format:check &&
        npm test -- --passWithNoTests --coverage
      "

  # PostgreSQL database (for future backend)
  postgres:
    image: postgres:15-alpine
    container_name: LeafWise-postgres
    environment:
      POSTGRES_DB: LeafWise
      POSTGRES_USER: LeafWise
      POSTGRES_PASSWORD: LeafWise_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - LeafWise-network
    profiles:
      - development
      - staging
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U LeafWise"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache (for future backend)
  redis:
    image: redis:7-alpine
    container_name: LeafWise-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - LeafWise-network
    profiles:
      - development
      - staging
      - production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: LeafWise-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - LeafWise-web
    networks:
      - LeafWise-network
    profiles:
      - production
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: LeafWise-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - LeafWise-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: LeafWise-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - LeafWise-network
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  LeafWise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16